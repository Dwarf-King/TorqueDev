   class  SimObject {
     public:
      virtual bool save(fileName, <selectedOnly>) {}
      virtual void setName(newName) {}
      virtual string getName() {}
      virtual string getClassName() {}
      virtual int getId() {}
      virtual int getGroup() {}
      virtual void delete() {}
      virtual int schedule(time, command, <arg1...argN>) {}
      virtual void dump() {}
      virtual int getType() {}
   };
   
   class  SimSet : public SimObject {
     public:
      virtual void listObjects() {}
      virtual void add(obj1,...) {}
      virtual void remove(obj1,...) {}
      virtual void clear() {}
      virtual int getCount() {}
      virtual int getObject(objIndex) {}
      virtual bool isMember(object) {}
      virtual void bringToFront(object) {}
      virtual void pushToBack(object) {}
   };
   
   class  SimGroup : public SimSet {
     public:
   };
   
   class  GuiControl : public SimGroup {
     public:
      virtual void setValue(string value) {}
      virtual string getValue() {}
      virtual void setActive(bool active) {}
      virtual bool isActive() {}
      virtual void setVisible(bool visible) {}
      virtual void makeFirstResponder(bool isFirst) {}
      virtual bool isVisible() {}
      virtual bool isAwake() {}
      virtual void setProfile(GuiControlProfile p) {}
      virtual void resize(int x, int y, int w, int h) {}
      virtual string getPosition() {}
      /*! Get the width and height of the control. */
      virtual string getExtent() {}
      /*! Get the minimum allowed size of the control. */
      virtual string getMinExtent() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  LoginDialog : public GuiControl {
     public:
   };
   
   class  GuiChunkedBitmapCtrl : public GuiControl {
     public:
      /*! Set the bitmap contained in this control. */
      virtual void setBitmap(string filename) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool useVariable;
      /*!
       */
      bool tile;
      /// @}
   
   };
   
   class  MainMenuGui : public GuiChunkedBitmapCtrl {
     public:
      virtual Script goHome() {}
      virtual Script onSleep() {}
      virtual Script update() {}
      virtual Script prevPage() {}
      virtual Script nextPage() {}
      virtual Script isPrevThread() {}
      virtual Script isPrevPage() {}
      virtual Script isNextPage() {}
      virtual Script popThread() {}
      virtual Script pushThread() {}
      virtual Script popCurrent() {}
      virtual Script getThread() {}
      virtual Script onWake() {}
   };
   
   class  GuiMLTextCtrl : public GuiControl {
     public:
      /*! Set the text contained in the control. */
      virtual void setText(string text) {}
      /*! Returns the text from the control, including ML. */
      virtual string getText() {}
      virtual void addText(string text, bool reformat) {}
      /*! Offset in characters to set cursor's position to. */
      virtual bool setCursorPosition(int newPos) {}
      /*! Scroll down to a specified tag. */
      virtual void scrollToTag(int tagID) {}
      /*! Scroll to the top of the text. */
      virtual void scrollToTop() {}
      /*! Scroll to the top of the text. */
      virtual void scrollToBottom() {}
      /*! forces the text control to reflow the text after new text is added, possibly resizing the control. */
      virtual void forceReflow() {}
      virtual void setAlpha() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      int lineSpacing;
      /*!
       */
      bool allowColorChars;
      /*!
       */
      int maxChars;
      /*!
       */
      AudioProfilePtr deniedSound;
      /*!
       */
      caseString text;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MessagePopText : public GuiMLTextCtrl {
     public:
   };
   
   class  GuiTextCtrl : public GuiControl {
     public:
      virtual void setText( newText ) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
   };
   
   class  GuiWindowCtrl : public GuiTextCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      bool resizeWidth;
      /*!
       */
      bool resizeHeight;
      /*!
       */
      bool canMove;
      /*!
       */
      bool canClose;
      /*!
       */
      bool canMinimize;
      /*!
       */
      bool canMaximize;
      /*!
       */
      Point2I minSize;
      /*!
       */
      string closeCommand;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MessagePopFrame : public GuiWindowCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MessagePopupDlg : public GuiControl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBOKCancelText : public GuiMLTextCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBOKCancelFrame : public GuiWindowCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBYesNoText : public GuiMLTextCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBYesNoFrame : public GuiWindowCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBOKText : public GuiMLTextCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  MBOKFrame : public GuiWindowCtrl {
     public:
   };
   
   class  GuiTextEditCtrl : public GuiTextCtrl {
     public:
      virtual int getCursorPos() {}
      virtual void setCursorPos( newPos ) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      string validate;
      /*!
       */
      string escapeCommand;
      /*!
       */
      int historySize;
      /*!
       */
      bool password;
      /*!
       */
      bool tabComplete;
      /*!
       */
      AudioProfilePtr deniedSound;
      /*!
       */
      bool sinkAllKeyEvents;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  SA_nameEdit : public GuiTextEditCtrl {
     public:
   };
   
   class  GuiArrayCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiTextListCtrl : public GuiArrayCtrl {
     public:
      /*! Get the ID of the currently selected item. */
      virtual int getSelectedId() {}
      /*! Finds the specified entry by id, then marks its row as selected. */
      virtual void setSelectedById(int id) {}
      /*! Selects the specified row. */
      virtual void setSelectedRow(int rowNum) {}
      /*! Set the selection to nothing. */
      virtual void clearSelection() {}
      /*! Returns row number of the new item. */
      virtual int addRow(int id, string text, int index=0) {}
      virtual void setRowById(int id, string text) {}
      /*! Performs a standard (alphabetical) sort on the values in the specified column. */
      virtual void sort(int columnID, bool increasing=false) {}
      /*! Perform a numerical sort on the values in the specified column. */
      virtual void sortNumerical(int columnID, bool increasing=false) {}
      /*! Clear the list. */
      virtual void clear() {}
      /*! Get the number of rows. */
      virtual int rowCount() {}
      /*! Get the row ID for an index. */
      virtual int getRowId(int index) {}
      /*! Get the text of a row with the specified id. */
      virtual string getRowTextById(int id) {}
      /*! Get the row number for a specified id. */
      virtual int getRowNumById(int id) {}
      /*! Get the text of the row with the specified index. */
      virtual string getRowText(int index) {}
      /*! Remove row with the specified id. */
      virtual void removeRowById(int id) {}
      /*! Remove a row from the table, based on its index. */
      virtual void removeRow(int index) {}
      /*! Scroll so the specified row is visible. */
      virtual void scrollVisible(int rowNum) {}
      /*! Find needle in the list, and return the row number it was found in. */
      virtual int findTextIndex(string needle) {}
      /*! Mark a specified row as active/not. */
      virtual void setRowActive(int rowNum, bool active) {}
      /*! Is the specified row currently active? */
      virtual bool isRowActive(int rowNum) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      bool enumerate;
      /*!
       */
      bool resizeCell;
      /*!
       */
      intList columns;
      /*!
       */
      bool fitParentWidth;
      /*!
       */
      bool clipColumnText;
   };
   
   class  SA_fileList : public GuiTextListCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   class  GuiPopUpMenuCtrl : public GuiTextCtrl {
     public:
      virtual void add(string name, int idNum, int scheme=0) {}
      virtual void addScheme(int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL) {}
      virtual void setText(string text) {}
      virtual string getText() {}
      /*! Clear the popup list. */
      virtual void clear() {}
      /*! Sort the list alphabetically. */
      virtual void sort() {}
      virtual void forceOnAction() {}
      virtual void forceClose() {}
      virtual int getSelected() {}
      virtual void setSelected(int id) {}
      virtual string getTextById(int id) {}
      /*! This fills the popup with a classrep's field enumeration type info.

More of a helper function than anything.   If console access to the field list is added, at least for the enumerated types, then this should go away.. */
      virtual void setEnumContent(string class, string enum) {}
      /*! Returns the position of the first entry containing the specified text. */
      virtual int findText(string text) {}
      /*! Get the size of the menu - the number of entries in it. */
      virtual int size() {}
      virtual void replaceText(bool doReplaceText) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      int maxPopupHeight;
   };
   
   class  SA_directoryList : public GuiPopUpMenuCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  SaveFileDlg : public GuiControl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  loadFileList : public GuiTextListCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  LoadFileDlg : public GuiControl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectAddFieldName : public GuiTextEditCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectAddFieldValue : public GuiTextEditCtrl {
     public:
   };
   
   class  InspectAddFieldDlg : public GuiControl {
     public:
      virtual Script doAction() {}
   };
   
   class  GuiTreeViewCtrl : public GuiArrayCtrl {
     public:
      /*!  Set the root of the tree view to the specified object, or to the root set. */
      virtual void open(SimSet obj) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      bool allowMultipleSelections;
      /*!
       */
      bool recurseSets;
   };
   
   class  InspectTreeView : public GuiTreeViewCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectTreeTitle : public GuiWindowCtrl {
     public:
   };
   
   class  GuiInspector : public GuiControl {
     public:
      virtual Script addDynamicField() {}
      virtual Script setAllGroupStateScript() {}
      virtual Script toggleGroupScript() {}
      virtual Script toggleDynamicGroupScript() {}
      /*! Set this GuiInspector to show information about the specified object. */
      virtual void inspect(SimObject obj) {}
      /*! Apply any changed values to the current object. */
      virtual void apply(string newName) {}
      /*! Toggle the expandedness of a given group on the specified object. */
      virtual void toggleGroupExpand(SimObject obj, string groupName) {}
      /*! Toggle the dynamic group expandedness. */
      virtual void toggleDynamicGroupExpand() {}
      /*! Set all groups on the current object to be expanded or not. */
      virtual void setAllGroupState(bool groupState) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      int editControlOffset;
      /*!
       */
      int entryHeight;
      /*!
       */
      int textExtent;
      /*!
       */
      int entrySpacing;
      /*!
       */
      int maxMenuExtent;
      /*!
       */
      bool useFieldGrouping;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectFields : public GuiInspector {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectObjectName : public GuiTextEditCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectTitle : public GuiWindowCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  InspectDlg : public GuiControl {
     public:
   };
   
   class  GuiControlListPopUp : public GuiPopUpMenuCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      int maxPopupHeight;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  NewGuiDialogClass : public GuiControlListPopUp {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  NewGuiDialogName : public GuiTextEditCtrl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  NewGuiDialog : public GuiControl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorInspectFields : public GuiInspector {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorInspectName : public GuiTextEditCtrl {
     public:
   };
   
   class  GuiEditorTreeView : public GuiTreeViewCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   class  GuiEditCtrl : public GuiControl {
     public:
      virtual void setRoot(GuiControl root) {}
      virtual void addNewCtrl(GuiControl ctrl) {}
      virtual void select(GuiControl ctrl) {}
      virtual void setCurrentAddSet(GuiControl ctrl) {}
      /*! Toggle activation. */
      virtual void toggle() {}
      virtual void justify(int mode) {}
      virtual void bringToFront() {}
      virtual void pushToBack() {}
      /*! Delete the selected text. */
      virtual void deleteSelection() {}
      virtual void moveSelection(int deltax, int deltay) {}
      virtual void saveSelection(string fileName) {}
      virtual void loadSelection(string fileName) {}
      virtual void selectAll() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiEditor : public GuiEditCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorContent : public GuiControl {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorRegion : public GuiControl {
     public:
   };
   
   class  GuiScrollCtrl : public GuiControl {
     public:
      /*!  - scrolls the scroll control to the top of the child content area. */
      virtual void scrollToTop() {}
      /*!  - scrolls the scroll control to the bottom of the child content area. */
      virtual void scrollToBottom() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      bool willFirstRespond;
      /*!
       */
      enumval hScrollBar;
      /*!
       */
      enumval vScrollBar;
      /*!
       */
      bool constantThumbHeight;
      /*!
       */
      Point2I childMargin;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorScroll : public GuiScrollCtrl {
     public:
   };
   
   class  GuiEditorRuler : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      string refCtrl;
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorLeftRuler : public GuiEditorRuler {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorTopRuler : public GuiEditorRuler {
     public:
   };
   
   class  GuiEditorResList : public GuiPopUpMenuCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   class  GuiEditorContentList : public GuiPopUpMenuCtrl {
     public:
      virtual Script onSelect() {}
   };
   
   class  GuiEditorClassPopup : public GuiControlListPopUp {
     public:
      virtual Script onSelect() {}
   };
   
   class  GuiMenuBar : public GuiControl {
     public:
      /*!  - clears all the menus from the menu bar. */
      virtual void clearMenus() {}
      /*!  - adds a new menu to the menu bar. */
      virtual void addMenu(string menuText, int menuId) {}
      /*!  - adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id. */
      virtual void addMenuItem(string menu, string menuItemText, int menuItemId, string accelerator = NULL, int checkGroup = -1) {}
      /*!  - sets the menu item to enabled or disabled based on the enable parameter.  The specified menu and menu item can either be text or ids. */
      virtual void setMenuItemEnable(string menu, string menuItem, bool enabled) {}
      /*!  - sets the menu item bitmap to a check mark, which must be the first element in the bitmap array.  Any other menu items in the menu with the same check group become unchecked if they are checked. */
      virtual void setMenuItemChecked(string menu, string menuItem, bool checked) {}
      /*!  - sets the text of the specified menu to the new string. */
      virtual void setMenuText(string menu, string newMenuText) {}
      /*!  - sets the whether or not to display the specified menu. */
      virtual void setMenuVisible(string menu, bool visible) {}
      /*!  - sets the text of the specified menu item to the new string. */
      virtual void setMenuItemText(string menu, string menuItem, string newMenuItemText) {}
      /*!  - sets the specified menu item to be either visible or not. */
      virtual void setMenuItemVisible(string menu, string menuItem, bool isVisible) {}
      /*!  - sets the specified menu item bitmap index in the bitmap array.  Setting the item's index to -1 will remove any bitmap. */
      virtual void setMenuItemBitmap(string menu, string menuItem, int bitmapIndex) {}
      /*!  - removes the specified menu item from the menu. */
      virtual void removeMenuItem(string menu, string menuItem) {}
      /*!  - removes all the menu items from the specified menu. */
      virtual void clearMenuItems(string menu) {}
      /*!  - removes the specified menu from the menu bar. */
      virtual void removeMenu(string menu) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiEditorMenuBar : public GuiMenuBar {
     public:
      virtual Script onMenuItemSelect() {}
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  GuiEditorGui : public GuiControl {
     public:
   };
   
   class  GuiConsoleEditCtrl : public GuiTextEditCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      string validate;
      /*!
       */
      string escapeCommand;
      /*!
       */
      int historySize;
      /*!
       */
      bool password;
      /*!
       */
      bool tabComplete;
      /*!
       */
      AudioProfilePtr deniedSound;
      /*!
       */
      bool sinkAllKeyEvents;
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool useSiblingScroller;
      /// @}
   
   };
   
   class  ConsoleEntry : public GuiConsoleEditCtrl {
     public:
      virtual Script eval() {}
   };
   
   class  GuiConsole : public GuiArrayCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  testArrayCtrl : public GuiConsole {
     public:
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  ConsoleDlg : public GuiControl {
     public:
   };
   
   class  MessageBoxYesNoDlg : public GuiControl {
     public:
      virtual Script onSleep() {}
   };
   
   class  MessageBoxOKCancelDlg : public GuiControl {
     public:
      virtual Script onSleep() {}
   };
   
   class  MessageBoxOKDlg : public GuiControl {
     public:
      virtual Script onSleep() {}
   };
   
   class  GuiCanvas : public GuiCanvas {
     public:
      virtual Script popLayer() {}
      virtual Script popDialog() {}
      virtual Script pushDialog() {}
      virtual Script setContent() {}
      virtual Script checkCursor() {}
   };
   
   /// Stub class
   /// 
   /// @note This is a stub class to ensure a proper class hierarchy. No 
   ///       information was available for this class.
   class  Canvas : public GuiCanvas {
     public:
   };
   
   class  Editor {
     public:
      virtual Script checkActiveLoadDone() {}
      virtual Script onAdd() {}
      virtual Script create() {}
   };
   
   class  SimDataBlock : public SimObject {
     public:
   };
   
   class  AudioEnvironment : public SimDataBlock {
     public:
      /*!
       */
      bool useRoom;
      /*!
       */
      enumval room;
      /*!
       */
      int roomHF;
      /*!
       */
      int reflections;
      /*!
       */
      int reverb;
      /*!
       */
      float roomRolloffFactor;
      /*!
       */
      float decayTime;
      /*!
       */
      float decayHFRatio;
      /*!
       */
      float reflectionsDelay;
      /*!
       */
      float reverbDelay;
      /*!
       */
      int roomVolume;
      /*!
       */
      float effectVolume;
      /*!
       */
      float damping;
      /*!
       */
      float environmentSize;
      /*!
       */
      float environmentDiffusion;
      /*!
       */
      float airAbsorption;
      /*!
       */
      int flags;
   };
   
   class  AudioSampleEnvironment : public SimDataBlock {
     public:
      /*!
       */
      int direct;
      /*!
       */
      int directHF;
      /*!
       */
      int room;
      /*!
       */
      float obstruction;
      /*!
       */
      float obstructionLFRatio;
      /*!
       */
      float occlusion;
      /*!
       */
      float occlusionLFRatio;
      /*!
       */
      float occlusionRoomRatio;
      /*!
       */
      float roomRolloff;
      /*!
       */
      float airAbsorption;
      /*!
       */
      int outsideVolumeHF;
      /*!
       */
      int flags;
   };
   
   class  AudioDescription : public SimDataBlock {
     public:
      /*!
       */
      float volume;
      /*!
       */
      bool isLooping;
      /*!
       */
      bool isStreaming;
      /*!
       */
      bool is3D;
      /*!
       */
      float ReferenceDistance;
      /*!
       */
      float maxDistance;
      /*!
       */
      int coneInsideAngle;
      /*!
       */
      int coneOutsideAngle;
      /*!
       */
      float coneOutsideVolume;
      /*!
       */
      Point3F coneVector;
      /*!
       */
      float environmentLevel;
      /*!
       */
      int loopCount;
      /*!
       */
      int minLoopGap;
      /*!
       */
      int maxLoopGap;
      /*!
       */
      int type;
   };
   
   class  AudioProfile : public SimDataBlock {
     public:
      /*!
       */
      filename fileName;
      /*!
       */
      AudioDescriptionPtr description;
      /*!
       */
      AudioSampleEnvironmentPtr environment;
      /*!
       */
      bool preload;
   };
   
   class  ScriptObject : public SimObject {
     public:
   
      /*! @name Classes
      
      Script objects have the ability to inherit and have class information.
      @{ */
      /*!
      Class of object.
      
       */
      string class;
      /*!
      Superclass of object.
      
       */
      string superClass;
      /// @}
   
   };
   
   class  ScriptGroup : public SimGroup {
     public:
   
      /*! @name Classes
      @{ */
      /*!
       */
      string class;
      /*!
       */
      string superClass;
      /// @}
   
   };
   
   class  NetConnection : public SimGroup {
     public:
      virtual void transmitPaths() {}
      virtual void clearPaths() {}
      /*! Returns the address we're connected to. */
      virtual string getAddress() {}
      virtual void setSimulatedNetParams(float packetLoss, int delay) {}
      virtual int getPing() {}
      virtual int getPacketLoss() {}
      virtual void checkMaxRate() {}
      /*!  Connects this NC object to the remote address. */
      virtual void Connect(string remoteAddress) {}
      /*! Connects a connection to the server running in the same process. */
      virtual string connectLocal() {}
   };
   
   class  GameConnection : public NetConnection {
     public:
      virtual Script onConnectionTimedOut() {}
      virtual Script onConnectionAccepted() {}
      virtual void setJoinPassword() {}
      virtual void setConnectArgs() {}
      virtual void transmitDataBlocks(int sequence) {}
      virtual void activateGhosting() {}
      virtual void resetGhosting() {}
      virtual bool setControlObject(ShapeBase object) {}
      virtual int getControlObject() {}
      virtual bool isAIControlled() {}
      virtual bool play2D(AudioProfile ap) {}
      virtual bool play3D(AudioProfile ap, Transform pos) {}
      virtual bool chaseCam(int size) {}
      /*! Set new FOV in degrees. */
      virtual void setControlCameraFov(int newFOV) {}
      virtual float getControlCameraFov() {}
      virtual void setBlackOut(bool doFade, int timeMS) {}
      virtual void setMissionCRC(int CRC) {}
      /*!  Disconnect a client; reason is sent as part of the disconnect packet. */
      virtual void delete(string reason=NULL) {}
      /*! records the network connection to a demo file. */
      virtual void startRecording(string fileName) {}
      /*! stops the demo recording. */
      virtual void stopRecording() {}
      /*! plays a previously recorded demo. */
      virtual bool playDemo(string demoFileName) {}
      virtual bool isDemoPlaying() {}
      virtual bool isDemoRecording() {}
   };
   
   class  AIConnection : public GameConnection {
     public:
      virtual void setMoveSpeed( float ) {}
      virtual void stop() {}
      virtual void setAimLocation( x y z ) {}
      virtual void setMoveDestination( x y z ) {}
      virtual string getAimLocation() {}
      virtual string getMoveDestination() {}
      virtual void setTargetObject( obj ) {}
      virtual int getTargetObject() {}
      virtual void missionCycleCleanup() {}
      virtual void move() {}
      virtual string getLocation() {}
      virtual void moveForward() {}
      /*! Set a field on the current move.

@param   field One of {'x','y','z','yaw','pitch','roll'}
@param   value Value to set field to. */
      virtual void setMove(string field, float value) {}
      /*! Get the given field of a move.

@param field One of {'x','y','z','yaw','pitch','roll'}
@returns The requested field on the current move. */
      virtual float getMove(string field) {}
      /*! Enable/disable freelook on the current move. */
      virtual void setFreeLook(bool isFreeLook) {}
      /*! Is freelook on for the current move? */
      virtual bool getFreeLook() {}
      /*! Set a trigger. */
      virtual void setTrigger(int trigger, bool set) {}
      /*! Is the given trigger set? */
      virtual bool getTrigger(int trigger) {}
      virtual string getAddress() {}
   };
   
   class  AIClient : public AIConnection {
     public:
   };
   
   class  NetObject : public SimObject {
     public:
      /*! Cause the NetObject to be forced as scoped on the specified NetConnection. */
      virtual void scopeToClient(NetConnection %client) {}
      /*! Undo the effects of a scopeToClient() call. */
      virtual void clearScopeToClient(%client) {}
      /*! Always scope this object on all connections. */
      virtual void setScopeAlways() {}
   };
   
   class  SceneObject : public NetObject {
     public:
      /*! Get transform of object. */
      virtual string getTransform() {}
      /*! Get position of object. */
      virtual string getPosition() {}
      /*! Returns a vector indicating the direction this object is facing. */
      virtual string getForwardVector() {}
      virtual void setTransform(Transform T) {}
      /*! Get scaling as a Point3F. */
      virtual string getScale() {}
      virtual void setScale(Point3F scale) {}
      /*! Returns six fields, two Point3Fs, containing the min and max points of the worldbox. */
      virtual string getWorldBox() {}
      /*! Returns the center of the world bounding box. */
      virtual string getWorldBoxCenter() {}
      /*! Returns the bounding box relative to the object's origin. */
      virtual string getObjectBox() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   };
   
   class  AudioEmitter : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name profile
      @{ */
      /*!
       */
      AudioProfilePtr profile;
      /*!
       */
      bool useProfileDescription;
      /// @}
   
   
      /*! @name Media
      @{ */
      /*!
       */
      AudioDescriptionPtr description;
      /*!
       */
      filename fileName;
      /*!
       */
      int type;
      /// @}
   
   
      /*! @name Sound
      @{ */
      /*!
       */
      float volume;
      /*!
       */
      bool outsideAmbient;
      /*!
       */
      float ReferenceDistance;
      /*!
       */
      float maxDistance;
      /// @}
   
   
      /*! @name Looping
      @{ */
      /*!
       */
      bool isLooping;
      /*!
       */
      bool is3D;
      /*!
       */
      int loopCount;
      /*!
       */
      int minLoopGap;
      /*!
       */
      int maxLoopGap;
      /// @}
   
   
      /*! @name Sound Cone
      @{ */
      /*!
       */
      int coneInsideAngle;
      /*!
       */
      int coneOutsideAngle;
      /*!
       */
      float coneOutsideVolume;
      /*!
       */
      Point3F coneVector;
      /// @}
   
   };
   
   class  GameBaseData : public SimDataBlock {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   };
   
   class  ShapeBaseData : public GameBaseData {
     public:
      virtual bool checkDeployPos(Transform xform) {}
      virtual string getDeployTransform(Point3F pos, Point3F normal) {}
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
   };
   
   class  CameraData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
   };
   
   class  DebrisData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Display
      @{ */
      /*!
       */
      string texture;
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool render2D;
      /// @}
   
   
      /*! @name Datablocks
      @{ */
      /*!
       */
      ParticleEmitterDataPtr emitters;
      /*!
       */
      ExplosionDataPtr Explosion;
      /// @}
   
   
      /*! @name Physical Properties
      @{ */
      /*!
       */
      float elasticity;
      /*!
       */
      float friction;
      /*!
       */
      int numBounces;
      /*!
       */
      int bounceVariance;
      /*!
       */
      float minSpinSpeed;
      /*!
       */
      float maxSpinSpeed;
      /*!
       */
      float gravModifier;
      /*!
       */
      float terminalVelocity;
      /*!
       */
      float velocity;
      /*!
       */
      float velocityVariance;
      /*!
       */
      float lifetime;
      /*!
       */
      float lifetimeVariance;
      /*!
       */
      bool useRadiusMass;
      /*!
       */
      float baseRadius;
      /// @}
   
   
      /*! @name Behavior
      @{ */
      /*!
       */
      bool explodeOnMaxBounce;
      /*!
       */
      bool staticOnMaxBounce;
      /*!
       */
      bool snapOnMaxBounce;
      /*!
       */
      bool fade;
      /*!
       */
      bool ignoreWater;
      /// @}
   
   };
   
   class  SimDataBlockEvent {
     public:
   };
   
   class  Sim2DAudioEvent {
     public:
   };
   
   class  Sim3DAudioEvent {
     public:
   };
   
   class  SetMissionCRCEvent {
     public:
   };
   
   class  GuiTSCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   };
   
   class  GameTSCtrl : public GuiTSCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   };
   
   class  GuiNoMouseCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  ItemData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      string pickUpName;
      /*!
       */
      float friction;
      /*!
       */
      float elasticity;
      /*!
       */
      bool sticky;
      /*!
       */
      float gravityMod;
      /*!
       */
      float maxVelocity;
      /*!
       */
      int dynamicType;
      /*!
       */
      enumval lightType;
      /*!
       */
      ColorF lightColor;
      /*!
       */
      int lightTime;
      /*!
       */
      float lightRadius;
      /*!
       */
      bool lightOnlyStatic;
   };
   
   class  MissionMarkerData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
   };
   
   class  GameBase : public SceneObject {
     public:
      /*! Return the datablock this GameBase is using. */
      virtual int getDataBlock() {}
      /*! Assign this GameBase to use the specified datablock. */
      virtual bool setDataBlock(DataBlock db) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  ShapeBase : public GameBase {
     public:
      virtual void setHidden(bool show) {}
      virtual bool isHidden() {}
      virtual bool playAudio(int slot, AudioProfile ap) {}
      virtual bool stopAudio(int slot) {}
      virtual bool playThread(int slot, string sequenceName) {}
      virtual bool setThreadDir(int slot, bool isForward) {}
      virtual bool stopThread(int slot) {}
      virtual bool pauseThread(int slot) {}
      /*! Mount ourselves on an object in the specified slot. */
      virtual bool mountObject( ShapeBase object, int slot ) {}
      /*! Unmount an object from ourselves. */
      virtual bool unmountObject(ShapeBase obj) {}
      /*! Unmount from the currently mounted object if any. */
      virtual void unmount() {}
      /*! Are we mounted? */
      virtual bool isMounted() {}
      /*! Returns the ShapeBase we're mounted on. */
      virtual int getObjectMount() {}
      virtual int getMountedObjectCount() {}
      virtual int getMountedObject(int slot) {}
      virtual int getMountedObjectNode(int node) {}
      virtual int getMountNodeObject(int node) {}
      virtual bool mountImage(ShapeBaseImageData image, int slot, bool loaded=true, string skinTag=NULL) {}
      virtual bool unmountImage(int slot) {}
      virtual int getMountedImage(int slot) {}
      virtual int getPendingImage(int slot) {}
      virtual bool isImageFiring(int slot) {}
      virtual bool isImageMounted(ShapeBaseImageData db) {}
      virtual int getMountSlot(ShapeBaseImageData db) {}
      virtual int getImageSkinTag(int slot) {}
      virtual string getImageState(int slot) {}
      virtual bool getImageTrigger(int slot) {}
      virtual bool setImageTrigger(int slot, bool isTriggered) {}
      virtual bool getImageAmmo(int slot) {}
      virtual bool setImageAmmo(int slot, bool hasAmmo) {}
      virtual bool getImageLoaded(int slot) {}
      virtual bool setImageLoaded(int slot, bool loaded) {}
      virtual string getMuzzleVector(int slot) {}
      virtual string getMuzzlePoint(int slot) {}
      virtual string getSlotTransform(int slot) {}
      /*! Get the position at which the AI should stand to repair things. */
      virtual string getAIRepairPoint() {}
      virtual string getVelocity() {}
      virtual bool setVelocity(Vector3F vel) {}
      virtual bool applyImpulse(Point3F Pos, VectorF vel) {}
      virtual string getEyeVector() {}
      virtual string getEyePoint() {}
      virtual string getEyeTransform() {}
      virtual void setEnergyLevel(float level) {}
      virtual float getEnergyLevel() {}
      virtual float getEnergyPercent() {}
      virtual void setDamageLevel(float level) {}
      virtual float getDamageLevel() {}
      virtual float getDamagePercent() {}
      virtual bool setDamageState(string state) {}
      virtual string getDamageState() {}
      virtual bool isDestroyed() {}
      /*! True if the state is not Enabled. */
      virtual bool isDisabled() {}
      virtual bool isEnabled() {}
      virtual void applyDamage(float amt) {}
      virtual void applyRepair(float amt) {}
      virtual void setRepairRate(float amt) {}
      virtual float getRepairRate() {}
      virtual void setRechargeRate(float rate) {}
      virtual float getRechargeRate() {}
      /*! Returns a GameConnection. */
      virtual int getControllingClient() {}
      virtual int getControllingObject() {}
      virtual bool canCloak() {}
      virtual void setCloaked(bool isCloaked) {}
      virtual bool isCloaked() {}
      virtual void setDamageFlash(float lvl) {}
      virtual float getDamageFlash() {}
      virtual void setWhiteOut(float flashLevel) {}
      virtual float getWhiteOut() {}
      virtual float getCameraFov() {}
      virtual void setCameraFov(float fov) {}
      virtual void setInvincibleMode(float time, float speed) {}
      virtual void startFade( int fadeTimeMS, int fadeDelayMS, bool fadeOut ) {}
      virtual void setDamageVector(Vector3F origin) {}
      virtual void setShapeName(string tag) {}
      virtual void setSkinName(string tag) {}
      virtual string getShapeName() {}
      virtual string getSkinName() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  MissionMarker : public ShapeBase {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  WayPoint : public MissionMarker {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString name;
      /*!
       */
      WaypointTeam team;
      /// @}
   
   };
   
   class  SpawnSphere : public MissionMarker {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   
      /*! @name dimensions
      @{ */
      /*!
       */
      float radius;
      /// @}
   
   
      /*! @name Weight
      @{ */
      /*!
       */
      float sphereWeight;
      /*!
       */
      float indoorWeight;
      /*!
       */
      float outdoorWeight;
      /// @}
   
   };
   
   class  PathCameraData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
   };
   
   class  PlayerData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      bool renderFirstPerson;
      /*!
       */
      float pickupRadius;
      /*!
       */
      float minLookAngle;
      /*!
       */
      float maxLookAngle;
      /*!
       */
      float maxFreelookAngle;
      /*!
       */
      float maxTimeScale;
      /*!
       */
      float maxStepHeight;
      /*!
       */
      float runForce;
      /*!
       */
      float runEnergyDrain;
      /*!
       */
      float minRunEnergy;
      /*!
       */
      float maxForwardSpeed;
      /*!
       */
      float maxBackwardSpeed;
      /*!
       */
      float maxSideSpeed;
      /*!
       */
      float maxUnderwaterForwardSpeed;
      /*!
       */
      float maxUnderwaterBackwardSpeed;
      /*!
       */
      float maxUnderwaterSideSpeed;
      /*!
       */
      float runSurfaceAngle;
      /*!
       */
      float minImpactSpeed;
      /*!
       */
      int recoverDelay;
      /*!
       */
      float recoverRunForceScale;
      /*!
       */
      float jumpForce;
      /*!
       */
      float jumpEnergyDrain;
      /*!
       */
      float minJumpEnergy;
      /*!
       */
      float minJumpSpeed;
      /*!
       */
      float maxJumpSpeed;
      /*!
       */
      float jumpSurfaceAngle;
      /*!
       */
      int jumpDelay;
      /*!
       */
      Point3F boundingBox;
      /*!
       */
      float boxHeadPercentage;
      /*!
       */
      float boxTorsoPercentage;
      /*!
       */
      int boxHeadLeftPercentage;
      /*!
       */
      int boxHeadRightPercentage;
      /*!
       */
      int boxHeadBackPercentage;
      /*!
       */
      int boxHeadFrontPercentage;
      /*!
       */
      float horizMaxSpeed;
      /*!
       */
      float horizResistSpeed;
      /*!
       */
      float horizResistFactor;
      /*!
       */
      float upMaxSpeed;
      /*!
       */
      float upResistSpeed;
      /*!
       */
      float upResistFactor;
      /*!
       */
      DecalDataPtr DecalData;
      /*!
       */
      float decalOffset;
      /*!
       */
      ParticleEmitterDataPtr footPuffEmitter;
      /*!
       */
      int footPuffNumParts;
      /*!
       */
      float footPuffRadius;
      /*!
       */
      ParticleEmitterDataPtr dustEmitter;
      /*!
       */
      AudioProfilePtr FootSoftSound;
      /*!
       */
      AudioProfilePtr FootHardSound;
      /*!
       */
      AudioProfilePtr FootMetalSound;
      /*!
       */
      AudioProfilePtr FootSnowSound;
      /*!
       */
      AudioProfilePtr FootShallowSound;
      /*!
       */
      AudioProfilePtr FootWadingSound;
      /*!
       */
      AudioProfilePtr FootUnderwaterSound;
      /*!
       */
      AudioProfilePtr FootBubblesSound;
      /*!
       */
      AudioProfilePtr movingBubblesSound;
      /*!
       */
      AudioProfilePtr waterBreathSound;
      /*!
       */
      AudioProfilePtr impactSoftSound;
      /*!
       */
      AudioProfilePtr impactHardSound;
      /*!
       */
      AudioProfilePtr impactMetalSound;
      /*!
       */
      AudioProfilePtr impactSnowSound;
      /*!
       */
      float mediumSplashSoundVelocity;
      /*!
       */
      float hardSplashSoundVelocity;
      /*!
       */
      float exitSplashSoundVelocity;
      /*!
       */
      AudioProfilePtr impactWaterEasy;
      /*!
       */
      AudioProfilePtr impactWaterMedium;
      /*!
       */
      AudioProfilePtr impactWaterHard;
      /*!
       */
      AudioProfilePtr exitingWater;
      /*!
       */
      float splashVelocity;
      /*!
       */
      float splashAngle;
      /*!
       */
      float splashFreqMod;
      /*!
       */
      float splashVelEpsilon;
      /*!
       */
      float bubbleEmitTime;
      /*!
       */
      ParticleEmitterDataPtr splashEmitter;
      /*!
       */
      float footstepSplashHeight;
      /*!
       */
      float groundImpactMinSpeed;
      /*!
       */
      Point3F groundImpactShakeFreq;
      /*!
       */
      Point3F groundImpactShakeAmp;
      /*!
       */
      float groundImpactShakeDuration;
      /*!
       */
      float groundImpactShakeFalloff;
   };
   
   class  ProjectileData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      ParticleEmitterDataPtr particleEmitter;
      /*!
       */
      filename projectileShapeName;
      /*!
       */
      Point3F scale;
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      bool hasLight;
      /*!
       */
      float lightRadius;
      /*!
       */
      ColorF lightColor;
      /*!
       */
      bool isBallistic;
      /*!
       */
      float velInheritFactor;
      /*!
       */
      float muzzleVelocity;
      /*!
       */
      int lifetime;
      /*!
       */
      int armingDelay;
      /*!
       */
      int fadeDelay;
      /*!
       */
      float bounceElasticity;
      /*!
       */
      float bounceFriction;
      /*!
       */
      float gravityMod;
   };
   
   class  Projectile : public GameBase {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      Point3F initialPosition;
      /*!
       */
      Point3F initialVelocity;
      /// @}
   
   
      /*! @name Source
      @{ */
      /*!
       */
      int sourceObject;
      /*!
       */
      int sourceSlot;
      /// @}
   
   };
   
   class  StaticShape : public ShapeBase {
     public:
      virtual void setPoweredState(bool isPowered) {}
      virtual bool getPoweredState() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  ScopeAlwaysShape : public StaticShape {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  ShapeBaseImageData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      bool emap;
      /*!
       */
      filename shapeFile;
      /*!
       */
      ProjectileDataPtr Projectile;
      /*!
       */
      bool cloakable;
      /*!
       */
      int mountPoint;
      /*!
       */
      MatrixPosition offset;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      MatrixPosition eyeOffset;
      /*!
       */
      MatrixRotation eyeRotation;
      /*!
       */
      bool correctMuzzleVector;
      /*!
       */
      bool firstPerson;
      /*!
       */
      float mass;
      /*!
       */
      bool usesEnergy;
      /*!
       */
      float minEnergy;
      /*!
       */
      bool accuFire;
      /*!
       */
      enumval lightType;
      /*!
       */
      ColorF lightColor;
      /*!
       */
      int lightTime;
      /*!
       */
      float lightRadius;
      /*!
       */
      DebrisDataPtr casing;
      /*!
       */
      Point3F shellExitDir;
      /*!
       */
      float shellExitVariance;
      /*!
       */
      float shellVelocity;
      /*!
       */
      caseString stateName;
      /*!
       */
      string stateTransitionOnLoaded;
      /*!
       */
      string stateTransitionOnNotLoaded;
      /*!
       */
      string stateTransitionOnAmmo;
      /*!
       */
      string stateTransitionOnNoAmmo;
      /*!
       */
      string stateTransitionOnTarget;
      /*!
       */
      string stateTransitionOnNoTarget;
      /*!
       */
      string stateTransitionOnWet;
      /*!
       */
      string stateTransitionOnNotWet;
      /*!
       */
      string stateTransitionOnTriggerUp;
      /*!
       */
      string stateTransitionOnTriggerDown;
      /*!
       */
      string stateTransitionOnTimeout;
      /*!
       */
      float stateTimeoutValue;
      /*!
       */
      bool stateWaitForTimeout;
      /*!
       */
      bool stateFire;
      /*!
       */
      bool stateEjectShell;
      /*!
       */
      float stateEnergyDrain;
      /*!
       */
      bool stateAllowImageChange;
      /*!
       */
      bool stateDirection;
      /*!
       */
      enumval stateLoadedFlag;
      /*!
       */
      enumval stateSpinThread;
      /*!
       */
      enumval stateRecoil;
      /*!
       */
      string stateSequence;
      /*!
       */
      bool stateSequenceRandomFlash;
      /*!
       */
      AudioProfilePtr stateSound;
      /*!
       */
      caseString stateScript;
      /*!
       */
      ParticleEmitterDataPtr stateEmitter;
      /*!
       */
      float stateEmitterTime;
      /*!
       */
      int stateEmitterNode;
      /*!
       */
      bool stateIgnoreLoadedForReady;
      /*!
       */
      bool computeCRC;
   };
   
   class  ShowTSCtrl : public GuiTSCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   };
   
   class  StaticShapeData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      bool noIndividualDamage;
      /*!
       */
      int dynamicType;
   };
   
   class  TSStatic : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Media
      @{ */
      /*!
       */
      filename shapeName;
      /// @}
   
   };
   
   class  Explosion : public GameBase {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  ExplosionData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      filename explosionShape;
      /*!
       */
      AudioProfilePtr soundProfile;
      /*!
       */
      bool faceViewer;
      /*!
       */
      ParticleEmitterDataPtr particleEmitter;
      /*!
       */
      int particleDensity;
      /*!
       */
      float particleRadius;
      /*!
       */
      Point3F explosionScale;
      /*!
       */
      float playSpeed;
      /*!
       */
      ParticleEmitterDataPtr emitter;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      (null) shockwave;
      /*!
       */
      bool shockwaveOnTerrain;
      /*!
       */
      float debrisThetaMin;
      /*!
       */
      float debrisThetaMax;
      /*!
       */
      float debrisPhiMin;
      /*!
       */
      float debrisPhiMax;
      /*!
       */
      int debrisNum;
      /*!
       */
      int debrisNumVariance;
      /*!
       */
      float debrisVelocity;
      /*!
       */
      float debrisVelocityVariance;
      /*!
       */
      ExplosionDataPtr subExplosion;
      /*!
       */
      int delayMS;
      /*!
       */
      int delayVariance;
      /*!
       */
      int lifetimeMS;
      /*!
       */
      int lifetimeVariance;
      /*!
       */
      float offset;
      /*!
       */
      float times;
      /*!
       */
      Point3F sizes;
      /*!
       */
      bool shakeCamera;
      /*!
       */
      Point3F camShakeFreq;
      /*!
       */
      Point3F camShakeAmp;
      /*!
       */
      float camShakeDuration;
      /*!
       */
      float camShakeRadius;
      /*!
       */
      float camShakeFalloff;
      /*!
       */
      float lightStartRadius;
      /*!
       */
      float lightEndRadius;
      /*!
       */
      ColorF lightStartColor;
      /*!
       */
      ColorF lightEndColor;
   };
   
   class  ParticleData : public SimDataBlock {
     public:
      /*!
       */
      float dragCoefficient;
      /*!
       */
      float windCoefficient;
      /*!
       */
      float gravityCoefficient;
      /*!
       */
      float inheritedVelFactor;
      /*!
       */
      float constantAcceleration;
      /*!
       */
      int lifetimeMS;
      /*!
       */
      int lifetimeVarianceMS;
      /*!
       */
      float spinSpeed;
      /*!
       */
      float spinRandomMin;
      /*!
       */
      float spinRandomMax;
      /*!
       */
      bool useInvAlpha;
      /*!
       */
      bool animateTexture;
      /*!
       */
      int framesPerSec;
      /*!
       */
      filename textureName;
      /*!
       */
      filename animTexName;
      /*!
       */
      ColorF Colors;
      /*!
       */
      float sizes;
      /*!
       */
      float times;
   };
   
   class  ParticleEmitterData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      int ejectionPeriodMS;
      /*!
       */
      int periodVarianceMS;
      /*!
       */
      float ejectionVelocity;
      /*!
       */
      float velocityVariance;
      /*!
       */
      float ejectionOffset;
      /*!
       */
      float thetaMin;
      /*!
       */
      float thetaMax;
      /*!
       */
      float phiReferenceVel;
      /*!
       */
      float phiVariance;
      /*!
       */
      bool overrideAdvance;
      /*!
       */
      bool orientParticles;
      /*!
       */
      bool orientOnVelocity;
      /*!
       */
      string particles;
      /*!
       */
      int lifetimeMS;
      /*!
       */
      int lifetimeVarianceMS;
      /*!
       */
      bool useEmitterSizes;
      /*!
       */
      bool useEmitterColors;
   };
   
   class  ParticleEmitterNodeData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      float timeMultiple;
   };
   
   class  ParticleEmitterNode : public GameBase {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      ParticleEmitterDataPtr emitter;
      /*!
       */
      float velocity;
   };
   
   class  PrecipitationData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      AudioProfilePtr soundProfile;
      /*!
       */
      filename dropTexture;
      /*!
       */
      filename splashTexture;
      /*!
       */
      float dropSize;
      /*!
       */
      float splashSize;
      /*!
       */
      bool useTrueBillboards;
      /*!
       */
      int splashMS;
   };
   
   class  RemoteCommandEvent {
     public:
   };
   
   class  SimpleMessageEvent {
     public:
   };
   
   class  GuiBitmapCtrl : public GuiControl {
     public:
      /*! Set the offset of the bitmap. */
      virtual void setValue(int xAxis, int yAxis) {}
      /*! Set the bitmap displayed in the control. Note that it is limited in size, to 256x256. */
      virtual void setBitmap(string filename, bool resize=false) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool wrap;
      /// @}
   
   };
   
   class  GuiCrossHairHud : public GuiBitmapCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool wrap;
      /// @}
   
   
      /*! @name Damage
      @{ */
      /*!
       */
      ColorF damageFillColor;
      /*!
       */
      ColorF damageFrameColor;
      /*!
       */
      Point2I damageRect;
      /*!
       */
      Point2I damageOffset;
      /// @}
   
   };
   
   class  GuiHealthBarHud : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Colors
      @{ */
      /*!
       */
      ColorF fillColor;
      /*!
       */
      ColorF frameColor;
      /*!
       */
      ColorF damageFillColor;
      /// @}
   
   
      /*! @name Pulse
      @{ */
      /*!
       */
      int pulseRate;
      /*!
       */
      float pulseThreshold;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool showFill;
      /*!
       */
      bool showFrame;
      /*!
       */
      bool displayEnergy;
      /// @}
   
   };
   
   class  GuiShapeNameHud : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Colors
      @{ */
      /*!
       */
      ColorF fillColor;
      /*!
       */
      ColorF frameColor;
      /*!
       */
      ColorF textColor;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool showFill;
      /*!
       */
      bool showFrame;
      /*!
       */
      float verticalOffset;
      /*!
       */
      float distanceFade;
      /// @}
   
   };
   
   class  VehicleData : public ShapeBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      float jetForce;
      /*!
       */
      float jetEnergyDrain;
      /*!
       */
      float minJetEnergy;
      /*!
       */
      Point3F massCenter;
      /*!
       */
      Point3F massBox;
      /*!
       */
      float bodyRestitution;
      /*!
       */
      float bodyFriction;
      /*!
       */
      AudioProfilePtr softImpactSound;
      /*!
       */
      AudioProfilePtr hardImpactSound;
      /*!
       */
      float minImpactSpeed;
      /*!
       */
      float softImpactSpeed;
      /*!
       */
      float hardImpactSpeed;
      /*!
       */
      float minRollSpeed;
      /*!
       */
      float maxSteeringAngle;
      /*!
       */
      float maxDrag;
      /*!
       */
      float minDrag;
      /*!
       */
      int integration;
      /*!
       */
      float collisionTol;
      /*!
       */
      float contactTol;
      /*!
       */
      bool cameraRoll;
      /*!
       */
      float cameraLag;
      /*!
       */
      float cameraDecay;
      /*!
       */
      float cameraOffset;
      /*!
       */
      ParticleEmitterDataPtr dustEmitter;
      /*!
       */
      float triggerDustHeight;
      /*!
       */
      float dustHeight;
      /*!
       */
      ParticleEmitterDataPtr damageEmitter;
      /*!
       */
      ParticleEmitterDataPtr splashEmitter;
      /*!
       */
      Point3F damageEmitterOffset;
      /*!
       */
      float damageLevelTolerance;
      /*!
       */
      float numDmgEmitterAreas;
      /*!
       */
      float splashFreqMod;
      /*!
       */
      float splashVelEpsilon;
      /*!
       */
      float exitSplashSoundVelocity;
      /*!
       */
      float softSplashSoundVelocity;
      /*!
       */
      float mediumSplashSoundVelocity;
      /*!
       */
      float hardSplashSoundVelocity;
      /*!
       */
      AudioProfilePtr exitingWater;
      /*!
       */
      AudioProfilePtr impactWaterEasy;
      /*!
       */
      AudioProfilePtr impactWaterMedium;
      /*!
       */
      AudioProfilePtr impactWaterHard;
      /*!
       */
      AudioProfilePtr waterWakeSound;
      /*!
       */
      float collDamageThresholdVel;
      /*!
       */
      float collDamageMultiplier;
   };
   
   class  FlyingVehicleData : public VehicleData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      float jetForce;
      /*!
       */
      float jetEnergyDrain;
      /*!
       */
      float minJetEnergy;
      /*!
       */
      Point3F massCenter;
      /*!
       */
      Point3F massBox;
      /*!
       */
      float bodyRestitution;
      /*!
       */
      float bodyFriction;
      /*!
       */
      AudioProfilePtr softImpactSound;
      /*!
       */
      AudioProfilePtr hardImpactSound;
      /*!
       */
      float minImpactSpeed;
      /*!
       */
      float softImpactSpeed;
      /*!
       */
      float hardImpactSpeed;
      /*!
       */
      float minRollSpeed;
      /*!
       */
      float maxSteeringAngle;
      /*!
       */
      float maxDrag;
      /*!
       */
      float minDrag;
      /*!
       */
      int integration;
      /*!
       */
      float collisionTol;
      /*!
       */
      float contactTol;
      /*!
       */
      bool cameraRoll;
      /*!
       */
      float cameraLag;
      /*!
       */
      float cameraDecay;
      /*!
       */
      float cameraOffset;
      /*!
       */
      ParticleEmitterDataPtr dustEmitter;
      /*!
       */
      float triggerDustHeight;
      /*!
       */
      float dustHeight;
      /*!
       */
      ParticleEmitterDataPtr damageEmitter;
      /*!
       */
      ParticleEmitterDataPtr splashEmitter;
      /*!
       */
      Point3F damageEmitterOffset;
      /*!
       */
      float damageLevelTolerance;
      /*!
       */
      float numDmgEmitterAreas;
      /*!
       */
      float splashFreqMod;
      /*!
       */
      float splashVelEpsilon;
      /*!
       */
      float exitSplashSoundVelocity;
      /*!
       */
      float softSplashSoundVelocity;
      /*!
       */
      float mediumSplashSoundVelocity;
      /*!
       */
      float hardSplashSoundVelocity;
      /*!
       */
      AudioProfilePtr exitingWater;
      /*!
       */
      AudioProfilePtr impactWaterEasy;
      /*!
       */
      AudioProfilePtr impactWaterMedium;
      /*!
       */
      AudioProfilePtr impactWaterHard;
      /*!
       */
      AudioProfilePtr waterWakeSound;
      /*!
       */
      float collDamageThresholdVel;
      /*!
       */
      float collDamageMultiplier;
      /*!
       */
      AudioProfilePtr jetSound;
      /*!
       */
      AudioProfilePtr engineSound;
      /*!
       */
      float maneuveringForce;
      /*!
       */
      float horizontalSurfaceForce;
      /*!
       */
      float verticalSurfaceForce;
      /*!
       */
      float autoInputDamping;
      /*!
       */
      float steeringForce;
      /*!
       */
      float steeringRollForce;
      /*!
       */
      float rollForce;
      /*!
       */
      float autoAngularForce;
      /*!
       */
      float rotationalDrag;
      /*!
       */
      float autoLinearForce;
      /*!
       */
      float maxAutoSpeed;
      /*!
       */
      float hoverHeight;
      /*!
       */
      float createHoverHeight;
      /*!
       */
      ParticleEmitterDataPtr forwardJetEmitter;
      /*!
       */
      ParticleEmitterDataPtr backwardJetEmitter;
      /*!
       */
      ParticleEmitterDataPtr downJetEmitter;
      /*!
       */
      ParticleEmitterDataPtr trailEmitter;
      /*!
       */
      float minTrailSpeed;
      /*!
       */
      float vertThrustMultiple;
   };
   
   class  GuiSpeedometerHud : public GuiBitmapCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool wrap;
      /// @}
   
   
      /*! @name Needle
      @{ */
      /*!
       */
      float maxSpeed;
      /*!
       */
      float minAngle;
      /*!
       */
      float maxAngle;
      /*!
       */
      ColorF color;
      /*!
       */
      Point2F center;
      /*!
       */
      float length;
      /*!
       */
      float width;
      /*!
       */
      float tail;
      /// @}
   
   };
   
   class  HoverVehicleData : public VehicleData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      float jetForce;
      /*!
       */
      float jetEnergyDrain;
      /*!
       */
      float minJetEnergy;
      /*!
       */
      Point3F massCenter;
      /*!
       */
      Point3F massBox;
      /*!
       */
      float bodyRestitution;
      /*!
       */
      float bodyFriction;
      /*!
       */
      AudioProfilePtr softImpactSound;
      /*!
       */
      AudioProfilePtr hardImpactSound;
      /*!
       */
      float minImpactSpeed;
      /*!
       */
      float softImpactSpeed;
      /*!
       */
      float hardImpactSpeed;
      /*!
       */
      float minRollSpeed;
      /*!
       */
      float maxSteeringAngle;
      /*!
       */
      float maxDrag;
      /*!
       */
      float minDrag;
      /*!
       */
      int integration;
      /*!
       */
      float collisionTol;
      /*!
       */
      float contactTol;
      /*!
       */
      bool cameraRoll;
      /*!
       */
      float cameraLag;
      /*!
       */
      float cameraDecay;
      /*!
       */
      float cameraOffset;
      /*!
       */
      ParticleEmitterDataPtr dustEmitter;
      /*!
       */
      float triggerDustHeight;
      /*!
       */
      float dustHeight;
      /*!
       */
      ParticleEmitterDataPtr damageEmitter;
      /*!
       */
      ParticleEmitterDataPtr splashEmitter;
      /*!
       */
      Point3F damageEmitterOffset;
      /*!
       */
      float damageLevelTolerance;
      /*!
       */
      float numDmgEmitterAreas;
      /*!
       */
      float splashFreqMod;
      /*!
       */
      float splashVelEpsilon;
      /*!
       */
      float exitSplashSoundVelocity;
      /*!
       */
      float softSplashSoundVelocity;
      /*!
       */
      float mediumSplashSoundVelocity;
      /*!
       */
      float hardSplashSoundVelocity;
      /*!
       */
      AudioProfilePtr exitingWater;
      /*!
       */
      AudioProfilePtr impactWaterEasy;
      /*!
       */
      AudioProfilePtr impactWaterMedium;
      /*!
       */
      AudioProfilePtr impactWaterHard;
      /*!
       */
      AudioProfilePtr waterWakeSound;
      /*!
       */
      float collDamageThresholdVel;
      /*!
       */
      float collDamageMultiplier;
      /*!
       */
      float dragForce;
      /*!
       */
      float vertFactor;
      /*!
       */
      float floatingThrustFactor;
      /*!
       */
      float mainThrustForce;
      /*!
       */
      float reverseThrustForce;
      /*!
       */
      float strafeThrustForce;
      /*!
       */
      float turboFactor;
      /*!
       */
      float stabLenMin;
      /*!
       */
      float stabLenMax;
      /*!
       */
      float stabSpringConstant;
      /*!
       */
      float stabDampingConstant;
      /*!
       */
      float gyroDrag;
      /*!
       */
      float normalForce;
      /*!
       */
      float restorativeForce;
      /*!
       */
      float steeringForce;
      /*!
       */
      float rollForce;
      /*!
       */
      float pitchForce;
      /*!
       */
      AudioProfilePtr jetSound;
      /*!
       */
      AudioProfilePtr engineSound;
      /*!
       */
      AudioProfilePtr floatSound;
      /*!
       */
      ParticleEmitterDataPtr dustTrailEmitter;
      /*!
       */
      Point3F dustTrailOffset;
      /*!
       */
      float triggerTrailHeight;
      /*!
       */
      float dustTrailFreqMod;
      /*!
       */
      float floatingGravMag;
      /*!
       */
      float brakingForce;
      /*!
       */
      float brakingActivationSpeed;
      /*!
       */
      ParticleEmitterDataPtr forwardJetEmitter;
   };
   
   class  Vehicle : public ShapeBase {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      bool disableMove;
   };
   
   class  HoverVehicle : public Vehicle {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      bool disableMove;
   };
   
   class  VehicleBlocker : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
      /*!
       */
      Point3F dimensions;
   };
   
   class  WheeledVehicleTire : public SimDataBlock {
     public:
      /*!
       */
      filename shapeFile;
      /*!
       */
      float mass;
      /*!
       */
      float radius;
      /*!
       */
      float staticFriction;
      /*!
       */
      float kineticFriction;
      /*!
       */
      float restitution;
      /*!
       */
      float lateralForce;
      /*!
       */
      float lateralDamping;
      /*!
       */
      float lateralRelaxation;
      /*!
       */
      float longitudinalForce;
      /*!
       */
      float longitudinalDamping;
      /*!
       */
      float logitudinalRelaxation;
   };
   
   class  WheeledVehicleSpring : public SimDataBlock {
     public:
      /*!
       */
      float length;
      /*!
       */
      float force;
      /*!
       */
      float damping;
      /*!
       */
      float antiSwayForce;
   };
   
   class  WheeledVehicleData : public VehicleData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   
      /*! @name Render
      @{ */
      /*!
       */
      filename shapeFile;
      /*!
       */
      bool emap;
      /// @}
   
   
      /*! @name Destruction
      
      Parameters related to the destruction effects of this object.
      @{ */
      /*!
       */
      ExplosionDataPtr Explosion;
      /*!
       */
      ExplosionDataPtr underwaterExplosion;
      /*!
       */
      DebrisDataPtr Debris;
      /*!
       */
      bool renderWhenDestroyed;
      /*!
       */
      filename debrisShapeName;
      /// @}
   
   
      /*! @name Physics
      @{ */
      /*!
       */
      float mass;
      /*!
       */
      float drag;
      /*!
       */
      float density;
      /// @}
   
   
      /*! @name Damage/Energy
      @{ */
      /*!
       */
      float maxEnergy;
      /*!
       */
      float maxDamage;
      /*!
       */
      float disabledLevel;
      /*!
       */
      float destroyedLevel;
      /*!
       */
      float repairRate;
      /*!
       */
      bool inheritEnergyFromMount;
      /*!
       */
      bool isInvincible;
      /// @}
   
   
      /*! @name Camera
      @{ */
      /*!
       */
      float cameraMaxDist;
      /*!
       */
      float cameraMinDist;
      /*!
       */
      float cameraDefaultFov;
      /*!
       */
      float cameraMinFov;
      /*!
       */
      float cameraMaxFov;
      /*!
       */
      bool firstPersonOnly;
      /*!
       */
      bool useEyePoint;
      /*!
       */
      bool observeThroughObject;
      /// @}
   
   
      /*! @name HUD
      
      @deprecated Likely to be removed soon.
      @{ */
      /*!
       */
      string hudImageName;
      /*!
       */
      string hudImageNameFriendly;
      /*!
       */
      string hudImageNameEnemy;
      /*!
       */
      bool hudRenderCenter;
      /*!
       */
      bool hudRenderModulated;
      /*!
       */
      bool hudRenderAlways;
      /*!
       */
      bool hudRenderDistance;
      /*!
       */
      bool hudRenderName;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool aiAvoidThis;
      /*!
       */
      bool computeCRC;
      /*!
       */
      bool dynamicReflection;
      /// @}
   
      /*!
       */
      float jetForce;
      /*!
       */
      float jetEnergyDrain;
      /*!
       */
      float minJetEnergy;
      /*!
       */
      Point3F massCenter;
      /*!
       */
      Point3F massBox;
      /*!
       */
      float bodyRestitution;
      /*!
       */
      float bodyFriction;
      /*!
       */
      AudioProfilePtr softImpactSound;
      /*!
       */
      AudioProfilePtr hardImpactSound;
      /*!
       */
      float minImpactSpeed;
      /*!
       */
      float softImpactSpeed;
      /*!
       */
      float hardImpactSpeed;
      /*!
       */
      float minRollSpeed;
      /*!
       */
      float maxSteeringAngle;
      /*!
       */
      float maxDrag;
      /*!
       */
      float minDrag;
      /*!
       */
      int integration;
      /*!
       */
      float collisionTol;
      /*!
       */
      float contactTol;
      /*!
       */
      bool cameraRoll;
      /*!
       */
      float cameraLag;
      /*!
       */
      float cameraDecay;
      /*!
       */
      float cameraOffset;
      /*!
       */
      ParticleEmitterDataPtr dustEmitter;
      /*!
       */
      float triggerDustHeight;
      /*!
       */
      float dustHeight;
      /*!
       */
      ParticleEmitterDataPtr damageEmitter;
      /*!
       */
      ParticleEmitterDataPtr splashEmitter;
      /*!
       */
      Point3F damageEmitterOffset;
      /*!
       */
      float damageLevelTolerance;
      /*!
       */
      float numDmgEmitterAreas;
      /*!
       */
      float splashFreqMod;
      /*!
       */
      float splashVelEpsilon;
      /*!
       */
      float exitSplashSoundVelocity;
      /*!
       */
      float softSplashSoundVelocity;
      /*!
       */
      float mediumSplashSoundVelocity;
      /*!
       */
      float hardSplashSoundVelocity;
      /*!
       */
      AudioProfilePtr exitingWater;
      /*!
       */
      AudioProfilePtr impactWaterEasy;
      /*!
       */
      AudioProfilePtr impactWaterMedium;
      /*!
       */
      AudioProfilePtr impactWaterHard;
      /*!
       */
      AudioProfilePtr waterWakeSound;
      /*!
       */
      float collDamageThresholdVel;
      /*!
       */
      float collDamageMultiplier;
      /*!
       */
      AudioProfilePtr jetSound;
      /*!
       */
      AudioProfilePtr engineSound;
      /*!
       */
      AudioProfilePtr squealSound;
      /*!
       */
      AudioProfilePtr WheelImpactSound;
      /*!
       */
      ParticleEmitterDataPtr tireEmitter;
      /*!
       */
      float maxWheelSpeed;
      /*!
       */
      float engineTorque;
      /*!
       */
      float engineBrake;
      /*!
       */
      float brakeTorque;
   };
   
   class  CubemapData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      filename cubeFace;
      /*!
       */
      bool dynamic;
   };
   
   class  GlowBuffer : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      string shader;
   };
   
   class  GuiBitmapBorderCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiButtonBaseCtrl : public GuiControl {
     public:
      /*!  - simulates a button click from script. */
      virtual void performClick() {}
      /*!  - sets the text of the button to the string. */
      virtual void setText(string text) {}
      /*!  - returns the text of the button. */
      virtual string getText() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
   };
   
   class  GuiBorderButtonCtrl : public GuiButtonBaseCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
   };
   
   class  GuiMLTextEditCtrl : public GuiMLTextCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      int lineSpacing;
      /*!
       */
      bool allowColorChars;
      /*!
       */
      int maxChars;
      /*!
       */
      AudioProfilePtr deniedSound;
      /*!
       */
      caseString text;
      /*!
       */
      string escapeCommand;
   };
   
   class  GuiControlProfile : public SimObject {
     public:
      /*!
       */
      bool tab;
      /*!
       */
      bool canKeyFocus;
      /*!
       */
      bool mouseOverSelected;
      /*!
       */
      bool modal;
      /*!
       */
      bool opaque;
      /*!
       */
      ColorI fillColor;
      /*!
       */
      ColorI fillColorHL;
      /*!
       */
      ColorI fillColorNA;
      /*!
       */
      int border;
      /*!
       */
      int borderThickness;
      /*!
       */
      ColorI borderColor;
      /*!
       */
      ColorI borderColorHL;
      /*!
       */
      ColorI borderColorNA;
      /*!
       */
      string fontType;
      /*!
       */
      int fontSize;
      /*!
       */
      ColorI fontColors;
      /*!
       */
      ColorI fontColor;
      /*!
       */
      ColorI fontColorHL;
      /*!
       */
      ColorI fontColorNA;
      /*!
       */
      ColorI fontColorSEL;
      /*!
       */
      ColorI fontColorLink;
      /*!
       */
      ColorI fontColorLinkHL;
      /*!
       */
      enumval justify;
      /*!
       */
      Point2I textOffset;
      /*!
       */
      string bitmapBase;
      /*!
       */
      bool autoSizeWidth;
      /*!
       */
      bool autoSizeHeight;
      /*!
       */
      bool returnTab;
      /*!
       */
      bool numbersOnly;
      /*!
       */
      ColorI cursorColor;
      /*!
       */
      filename bitmap;
      /*!
       */
      AudioProfilePtr soundButtonDown;
      /*!
       */
      AudioProfilePtr soundButtonOver;
   };
   
   class  GuiCursor : public SimObject {
     public:
      /*!
       */
      Point2I hotSpot;
      /*!
       */
      filename bitmapName;
   };
   
   class  GuiButtonCtrl : public GuiButtonBaseCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
   };
   
   class  GuiCheckBoxCtrl : public GuiButtonBaseCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
   };
   
   class  GuiRadioCtrl : public GuiCheckBoxCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
   };
   
   class  GuiBackgroundCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiTextEditSliderCtrl : public GuiTextEditCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
      /*!
       */
      string validate;
      /*!
       */
      string escapeCommand;
      /*!
       */
      int historySize;
      /*!
       */
      bool password;
      /*!
       */
      bool tabComplete;
      /*!
       */
      AudioProfilePtr deniedSound;
      /*!
       */
      bool sinkAllKeyEvents;
      /*!
       */
      string format;
      /*!
       */
      Point2F range;
      /*!
       */
      float increment;
   };
   
   class  GuiProgressCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiConsoleTextCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString expression;
      /// @}
   
   };
   
   class  GuiAviBitmapCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool done;
      /// @}
   
   };
   
   class  GuiFadeinBitmapCtrl : public GuiBitmapCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool wrap;
      /// @}
   
      /*!
       */
      int fadeinTime;
      /*!
       */
      int waitTime;
      /*!
       */
      int fadeoutTime;
      /*!
       */
      bool done;
   };
   
   class  GuiBubbleTextCtrl : public GuiTextCtrl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
   };
   
   class  GuiInputCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiMouseEventCtrl : public GuiControl {
     public:
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      bool lockMouse;
   };
   
   class  PathedInteriorData : public GameBaseData {
     public:
      /*!
       */
      AudioProfilePtr StartSound;
      /*!
       */
      AudioProfilePtr SustainSound;
      /*!
       */
      AudioProfilePtr StopSound;
      /*!
       */
      caseString category;
      /*!
       */
      string className;
   };
   
   class  Material : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      ColorF diffuse;
      /*!
       */
      ColorF specular;
      /*!
       */
      float specularPower;
      /*!
       */
      bool pixelSpecular;
      /*!
       */
      bool glow;
      /*!
       */
      bool emissive;
      /*!
       */
      bool translucent;
      /*!
       */
      enumval translucentBlendOp;
      /*!
       */
      bool translucentZWrite;
      /*!
       */
      bool castsShadow;
      /*!
       */
      bool breakable;
      /*!
       */
      bool doubleSided;
      /*!
       */
      int animFlags;
      /*!
       */
      Point2F scrollDir;
      /*!
       */
      float scrollSpeed;
      /*!
       */
      float rotSpeed;
      /*!
       */
      Point2F rotPivotOffset;
      /*!
       */
      int waveType;
      /*!
       */
      float waveFreq;
      /*!
       */
      float waveAmp;
      /*!
       */
      float sequenceFramePerSec;
      /*!
       */
      float sequenceSegmentSize;
      /*!
       */
      filename baseTex;
      /*!
       */
      filename detailTex;
      /*!
       */
      filename bumpTex;
      /*!
       */
      filename envTex;
      /*!
       */
      string cubemap;
      /*!
       */
      bool dynamicCubemap;
      /*!
       */
      bool planarReflection;
   };
   
   class  CustomMaterial : public Material {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      ColorF diffuse;
      /*!
       */
      ColorF specular;
      /*!
       */
      float specularPower;
      /*!
       */
      bool pixelSpecular;
      /*!
       */
      bool glow;
      /*!
       */
      bool emissive;
      /*!
       */
      bool translucent;
      /*!
       */
      enumval translucentBlendOp;
      /*!
       */
      bool translucentZWrite;
      /*!
       */
      bool castsShadow;
      /*!
       */
      bool breakable;
      /*!
       */
      bool doubleSided;
      /*!
       */
      int animFlags;
      /*!
       */
      Point2F scrollDir;
      /*!
       */
      float scrollSpeed;
      /*!
       */
      float rotSpeed;
      /*!
       */
      Point2F rotPivotOffset;
      /*!
       */
      int waveType;
      /*!
       */
      float waveFreq;
      /*!
       */
      float waveAmp;
      /*!
       */
      float sequenceFramePerSec;
      /*!
       */
      float sequenceSegmentSize;
      /*!
       */
      filename baseTex;
      /*!
       */
      filename detailTex;
      /*!
       */
      filename bumpTex;
      /*!
       */
      filename envTex;
      /*!
       */
      string cubemap;
      /*!
       */
      bool dynamicCubemap;
      /*!
       */
      bool planarReflection;
      /*!
       */
      filename texture;
      /*!
       */
      float version;
      /*!
       */
      TypeCustomMaterial fallback;
      /*!
       */
      TypeCustomMaterial pass;
      /*!
       */
      string shader;
      /*!
       */
      enumval blendOp;
      /*!
       */
      bool refract;
   };
   
   class  MaterialPropertyMap : public SimObject {
     public:
   };
   
   class  ShaderData : public GameBaseData {
     public:
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      string DXVertexShaderFile;
      /*!
       */
      filename DXPixelShaderFile;
      /*!
       */
      string OGLVertexShaderFile;
      /*!
       */
      filename OGLPixelShaderFile;
      /*!
       */
      float pixVersion;
   };
   
   class  NetStringEvent {
     public:
   };
   
   class  DecalManager : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   };
   
   class  DecalData : public SimDataBlock {
     public:
      /*!
       */
      float sizeX;
      /*!
       */
      float sizeY;
      /*!
       */
      filename textureName;
   };
   
   class  ConnectionMessageEvent {
     public:
   };
   
   class  FileDownloadRequestEvent {
     public:
   };
   
   class  FileChunkEvent {
     public:
   };
   
   class  GhostAlwaysObjectEvent {
     public:
   };
   
   class  PathManagerEvent {
     public:
   };
   
   class  Marker : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
      /*!
       */
      int seqNum;
      /*!
       */
      enumval type;
      /*!
       */
      int msToNext;
      /*!
       */
      enumval smoothingType;
      /// @}
   
   };
   
   class  WaterBlock : public SceneObject {
     public:
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name WaveData
      @{ */
      /*!
       */
      Point2F waveDir;
      /*!
       */
      float waveSpeed;
      /*!
       */
      Point2F waveTexScale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      int reflectTexSize;
      /*!
       */
      ColorI baseColor;
      /*!
       */
      ColorI underwaterColor;
      /*!
       */
      float gridSize;
      /// @}
   
      /*!
       */
      string surfMaterial;
      /*!
       */
      bool fullReflect;
      /*!
       */
      float clarity;
      /*!
       */
      float fresnelBias;
      /*!
       */
      float fresnelPower;
      /*!
       */
      bool renderFogMesh;
   };
   
   class  TSShapeConstructor : public SimDataBlock {
     public:
   
      /*! @name Media
      @{ */
      /*!
       */
      filename baseShape;
      /// @}
   
   
      /*! @name Sequences
      @{ */
      /*!
       */
      filename sequence0;
      /*!
       */
      filename sequence1;
      /*!
       */
      filename sequence2;
      /*!
       */
      filename sequence3;
      /*!
       */
      filename sequence4;
      /*!
       */
      filename sequence5;
      /*!
       */
      filename sequence6;
      /*!
       */
      filename sequence7;
      /*!
       */
      filename sequence8;
      /*!
       */
      filename sequence9;
      /*!
       */
      filename sequence10;
      /*!
       */
      filename sequence11;
      /*!
       */
      filename sequence12;
      /*!
       */
      filename sequence13;
      /*!
       */
      filename sequence14;
      /*!
       */
      filename sequence15;
      /*!
       */
      filename sequence16;
      /*!
       */
      filename sequence17;
      /*!
       */
      filename sequence18;
      /*!
       */
      filename sequence19;
      /*!
       */
      filename sequence20;
      /*!
       */
      filename sequence21;
      /*!
       */
      filename sequence22;
      /*!
       */
      filename sequence23;
      /*!
       */
      filename sequence24;
      /*!
       */
      filename sequence25;
      /*!
       */
      filename sequence26;
      /*!
       */
      filename sequence27;
      /*!
       */
      filename sequence28;
      /*!
       */
      filename sequence29;
      /*!
       */
      filename sequence30;
      /*!
       */
      filename sequence31;
      /*!
       */
      filename sequence32;
      /*!
       */
      filename sequence33;
      /*!
       */
      filename sequence34;
      /*!
       */
      filename sequence35;
      /*!
       */
      filename sequence36;
      /*!
       */
      filename sequence37;
      /*!
       */
      filename sequence38;
      /*!
       */
      filename sequence39;
      /*!
       */
      filename sequence40;
      /*!
       */
      filename sequence41;
      /*!
       */
      filename sequence42;
      /*!
       */
      filename sequence43;
      /*!
       */
      filename sequence44;
      /*!
       */
      filename sequence45;
      /*!
       */
      filename sequence46;
      /*!
       */
      filename sequence47;
      /*!
       */
      filename sequence48;
      /*!
       */
      filename sequence49;
      /*!
       */
      filename sequence50;
      /*!
       */
      filename sequence51;
      /*!
       */
      filename sequence52;
      /*!
       */
      filename sequence53;
      /*!
       */
      filename sequence54;
      /*!
       */
      filename sequence55;
      /*!
       */
      filename sequence56;
      /*!
       */
      filename sequence57;
      /*!
       */
      filename sequence58;
      /*!
       */
      filename sequence59;
      /*!
       */
      filename sequence60;
      /*!
       */
      filename sequence61;
      /*!
       */
      filename sequence62;
      /*!
       */
      filename sequence63;
      /*!
       */
      filename sequence64;
      /*!
       */
      filename sequence65;
      /*!
       */
      filename sequence66;
      /*!
       */
      filename sequence67;
      /*!
       */
      filename sequence68;
      /*!
       */
      filename sequence69;
      /*!
       */
      filename sequence70;
      /*!
       */
      filename sequence71;
      /*!
       */
      filename sequence72;
      /*!
       */
      filename sequence73;
      /*!
       */
      filename sequence74;
      /*!
       */
      filename sequence75;
      /*!
       */
      filename sequence76;
      /*!
       */
      filename sequence77;
      /*!
       */
      filename sequence78;
      /*!
       */
      filename sequence79;
      /*!
       */
      filename sequence80;
      /*!
       */
      filename sequence81;
      /*!
       */
      filename sequence82;
      /*!
       */
      filename sequence83;
      /*!
       */
      filename sequence84;
      /*!
       */
      filename sequence85;
      /*!
       */
      filename sequence86;
      /*!
       */
      filename sequence87;
      /*!
       */
      filename sequence88;
      /*!
       */
      filename sequence89;
      /*!
       */
      filename sequence90;
      /*!
       */
      filename sequence91;
      /*!
       */
      filename sequence92;
      /*!
       */
      filename sequence93;
      /*!
       */
      filename sequence94;
      /*!
       */
      filename sequence95;
      /*!
       */
      filename sequence96;
      /*!
       */
      filename sequence97;
      /*!
       */
      filename sequence98;
      /*!
       */
      filename sequence99;
      /*!
       */
      filename sequence100;
      /*!
       */
      filename sequence101;
      /*!
       */
      filename sequence102;
      /*!
       */
      filename sequence103;
      /*!
       */
      filename sequence104;
      /*!
       */
      filename sequence105;
      /*!
       */
      filename sequence106;
      /*!
       */
      filename sequence107;
      /*!
       */
      filename sequence108;
      /*!
       */
      filename sequence109;
      /*!
       */
      filename sequence110;
      /*!
       */
      filename sequence111;
      /*!
       */
      filename sequence112;
      /*!
       */
      filename sequence113;
      /*!
       */
      filename sequence114;
      /*!
       */
      filename sequence115;
      /*!
       */
      filename sequence116;
      /*!
       */
      filename sequence117;
      /*!
       */
      filename sequence118;
      /*!
       */
      filename sequence119;
      /*!
       */
      filename sequence120;
      /*!
       */
      filename sequence121;
      /*!
       */
      filename sequence122;
      /*!
       */
      filename sequence123;
      /*!
       */
      filename sequence124;
      /*!
       */
      filename sequence125;
      /*!
       */
      filename sequence126;
      /// @}
   
   };
   
   class  ConsoleLogger : public SimObject {
     public:
      /*!  Attaches this object to the console and begins logging */
      virtual bool attach() {}
      /*!  Detaches this object from the console and stops logging */
      virtual bool detach() {}
   
      /*! @name Logging
      @{ */
      /*!
       */
      enumval level;
      /// @}
   
   };
   
   class  FileObject : public SimObject {
     public:
      virtual bool openForRead(string filename) {}
      virtual bool openForWrite(string filename) {}
      virtual bool openForAppend(string filename) {}
      /*! Are we at the end of the file? */
      virtual bool isEOF() {}
      /*! Read a line from the file. */
      virtual string readLine() {}
      /*! Write a line to the file, if it was opened for writing. */
      virtual void writeLine(string text) {}
      /*! Close the file. */
      virtual void Close() {}
   };
   
   class  CreatorTree : public GuiArrayCtrl {
     public:
      virtual int addGroup(string group, string name, string value) {}
      virtual int addItem(Node group, string name, string value) {}
      virtual bool fileNameMatch(string world, string type, string filename) {}
      /*! Return a handle to the currently selected item. */
      virtual int getSelected() {}
      virtual bool isGroup(Group g) {}
      virtual string getName(Node item) {}
      virtual string getValue(Node n) {}
      /*! Clear the tree. */
      virtual void clear() {}
      virtual int getParent(Node n) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  EditManager : public GuiControl {
     public:
      virtual void setBookmark(int slot) {}
      virtual void gotoBookmark(int slot) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  EditTSCtrl : public GuiTSCtrl {
     public:
      virtual void renderSphere(Point3F pos, float radius, int subdivisions=NULL) {}
      virtual void renderCircle(Point3F pos, Point3F normal, float radius, int segments=NULL) {}
      virtual void renderTriangle(Point3F a, Point3F b, Point3F c) {}
      virtual void renderLine(Point3F start, Point3F end, int width) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   
      /*! @name Mission Area
      @{ */
      /*!
       */
      bool renderMissionArea;
      /*!
       */
      ColorI missionAreaFillColor;
      /*!
       */
      ColorI missionAreaFrameColor;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      ColorI consoleFrameColor;
      /*!
       */
      ColorI consoleFillColor;
      /*!
       */
      int consoleSphereLevel;
      /*!
       */
      int consoleCircleSegments;
      /*!
       */
      int consoleLineWidth;
      /// @}
   
   };
   
   class  GuiTerrPreviewCtrl : public GuiControl {
     public:
      /*! Reset the view of the terrain. */
      virtual void reset() {}
      /*! Add the origin to the root and reset the origin. */
      virtual void setRoot() {}
      /*! Return a Point2F representing the position of the root. */
      virtual string getRoot() {}
      /*! Set the origin of the view. */
      virtual void setOrigin(float x, float y) {}
      /*! Return a Point2F containing the position of the origin. */
      virtual string getOrigin() {}
      /*! Returns a 4-tuple containing: root_x root_y origin_x origin_y */
      virtual string getValue() {}
      virtual void setValue() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  MissionAreaEditor : public GuiBitmapCtrl {
     public:
      /*!  in the world so that the center of the world is the center of the mission area. */
      virtual void centerWorld(including terrain) {}
      /*! Return a 4-tuple: area_x area_y area_width are_height */
      virtual string getArea() {}
      /*! Set the mission area to the specified co-ordinates/extents. */
      virtual void setArea(int x, int y, int w, int h) {}
      /*! Update the terrain bitmap that is rendered as background in the control. */
      virtual void updateTerrain() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      filename bitmap;
      /*!
       */
      bool wrap;
      /// @}
   
   
      /*! @name Mirror
      @{ */
      /*!
       */
      bool enableMirroring;
      /*!
       */
      int mirrorIndex;
      /*!
       */
      ColorI mirrorLineColor;
      /*!
       */
      ColorI mirrorArrowColor;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      ColorI handleFrameColor;
      /*!
       */
      ColorI handleFillColor;
      /*!
       */
      ColorI defaultObjectColor;
      /*!
       */
      ColorI waterObjectColor;
      /*!
       */
      ColorI missionBoundsColor;
      /*!
       */
      ColorI cameraColor;
      /*!
       */
      bool squareBitmap;
      /*!
       */
      bool enableEditing;
      /*!
       */
      bool renderCamera;
      /// @}
   
   };
   
   class  Terraformer : public SimObject {
     public:
      virtual void setTerrainInfo(int blockSize, int tileSize, float minHeight, float heightRange, float waterPercent) {}
      virtual void setShift(int x, int y) {}
      virtual int generateSeed() {}
      virtual bool saveGreyscale(int register, string filename) {}
      virtual bool loadGreyscale(int register, string filename) {}
      virtual bool saveHeightField(int register, string filename) {}
      virtual bool setTerrain(int register) {}
      /*! Get the position of the camera. */
      virtual string getCameraPosition() {}
      virtual void setCameraPosition(float x, float y, float z=0) {}
      virtual bool terrainData(int register) {}
      virtual bool terrainFile(int register, string filename) {}
      virtual bool scale(int src_register, int dst_register, float min, float max) {}
      virtual bool smooth(int src_register, int dst_register, float factor, int iterations) {}
      virtual bool smoothWater(int src_register, int dst_register, float factor, int iterations) {}
      virtual bool smoothRidges(int src_register, int dst_register, float factor, int iterations) {}
      virtual bool filter(int src_register, int dst_register, Filter arr) {}
      /*! Perform a blending operation on the terrain.

@param   srcA           First source for operation.
@param   srcB           Second source for operation.
@param   dest_register  Destination register for blend.
@param   factor         Blending factor, from 0-1.
@param   operation      One of: add, subtract, max, min, multiply. Default is add. */
      virtual bool blend(int srcA, int srcB, int dest_register, float factor, string operation) {}
      virtual bool turbulence(int src_register, int dst_register, float factor, float radius) {}
      virtual void maskFBm(int dest_register, int frequency, float roughness, int seed, Filter arr, bool distort_factor, int distort_reg) {}
      virtual bool maskHeight(int src_register, int dst_register, Filter arr, bool distort_factor, int distort_register) {}
      virtual bool maskSlope(int src_register, int dst_register, Filter arr, bool distort_factor, int distort_register) {}
      virtual bool maskWater(int src_register, int dst_register, bool distort_factor, int distort_reg) {}
      virtual bool mergeMasks( src_array, int dst_register) {}
      virtual bool setMaterials( src_array, material_array ) {}
      virtual bool erodeHydraulic(int src_register, int dst_register, int iterations, Filter arr ) {}
      virtual bool erodeThermal(int src_register, int dst_register, float slope, float materialLoss, int iterations ) {}
      virtual bool canyon(int dest_register, int frequency, float turbulence, int seed) {}
      virtual void previewScaled(GuiTerrPreviewCtrl destination, int source) {}
      virtual void preview(GuiTerrPreviewCtrl destination, int register) {}
      virtual void clearRegister(int r) {}
      /*! Run an fBm pass.

@param   roughness   From 0.0-1.0
@param   detail      One of 'Very Low', 'Low', 'Normal', 'High', or 'Very High' */
      virtual void fBm(int r, int freq, float roughness, string detail, int seed) {}
      virtual void sinus(int r, Filter a, int seed) {}
      /*! Run a rigid multi fractal pass.

@param   roughness   From 0.0-1.0
@param   detail      One of 'Very Low', 'Low', 'Normal', 'High', or 'Very High' */
      virtual void rigidMultiFractal(int r, int freq, float roughness, string detail, int seed) {}
   };
   
   class  TerrainEditor : public EditTSCtrl {
     public:
      virtual void attachTerrain(TerrainBlock terrain) {}
      /*! One of box, ellipse, selection. */
      virtual void setBrushType(string type) {}
      virtual void setBrushSize(int w, int h) {}
      /*! Returns a Point2I. */
      virtual string getBrushPos() {}
      virtual void setBrushPos(int x, int y) {}
      virtual void setAction(string action_name) {}
      virtual string getActionName(int num) {}
      virtual int getNumActions() {}
      virtual string getCurrentAction() {}
      virtual void resetSelWeights(bool clear) {}
      virtual void undo() {}
      virtual void redo() {}
      virtual void clearSelection() {}
      virtual void processAction(string action=NULL) {}
      virtual void buildMaterialMap() {}
      virtual int getNumTextures() {}
      virtual string getTextureName(int index) {}
      virtual void markEmptySquares() {}
      virtual void clearModifiedFlags() {}
      virtual void mirrorTerrain() {}
      virtual void pushBaseMaterialInfo() {}
      virtual void popBaseMaterialInfo() {}
      virtual void setLoneBaseMaterial(string materialListBaseName) {}
      /*!  - sets the terraformer current heightmap to draw as an overlay over the current terrain. */
      virtual void setTerraformOverlay(bool overlayEnable) {}
      /*!  sets the list of current terrain materials. */
      virtual void setTerrainMaterials(string matList) {}
      /*!  gets the list of current terrain materials. */
      virtual string getTerrainMaterials() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   
      /*! @name Mission Area
      @{ */
      /*!
       */
      bool renderMissionArea;
      /*!
       */
      ColorI missionAreaFillColor;
      /*!
       */
      ColorI missionAreaFrameColor;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      ColorI consoleFrameColor;
      /*!
       */
      ColorI consoleFillColor;
      /*!
       */
      int consoleSphereLevel;
      /*!
       */
      int consoleCircleSegments;
      /*!
       */
      int consoleLineWidth;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool isDirty;
      /*!
       */
      bool isMissionDirty;
      /*!
       */
      bool renderBorder;
      /*!
       */
      float borderHeight;
      /*!
       */
      ColorI borderFillColor;
      /*!
       */
      ColorI borderFrameColor;
      /*!
       */
      bool borderLineMode;
      /*!
       */
      bool selectionHidden;
      /*!
       */
      bool enableSoftBrushes;
      /*!
       */
      bool renderVertexSelection;
      /*!
       */
      bool processUsesBrush;
      /*!
       */
      float adjustHeightVal;
      /*!
       */
      float setHeightVal;
      /*!
       */
      float scaleVal;
      /*!
       */
      float smoothFactor;
      /*!
       */
      int materialGroup;
      /*!
       */
      float softSelectRadius;
      /*!
       */
      string softSelectFilter;
      /*!
       */
      string softSelectDefaultFilter;
      /*!
       */
      float adjustHeightMouseScale;
      /*!
       */
      caseString paintMaterial;
      /// @}
   
   };
   
   class  WorldEditor : public EditTSCtrl {
     public:
      virtual void ignoreObjClass(string class_name, ...) {}
      virtual void clearIgnoreList() {}
      virtual void undo() {}
      virtual void redo() {}
      virtual void clearSelection() {}
      virtual void selectObject(SceneObject obj) {}
      virtual void unselectObject(SceneObject obj) {}
      virtual int getSelectionSize() {}
      virtual int getSelectObject(int index) {}
      virtual string getSelectionCentroid() {}
      virtual void dropSelection() {}
      virtual void deleteSelection() {}
      virtual void copySelection() {}
      virtual void pasteSelection() {}
      virtual bool canPasteSelection() {}
      virtual void hideSelection(bool hide) {}
      virtual void lockSelection(bool lock) {}
      virtual void redirectConsole( int objID ) {}
      virtual string getMode() {}
      /*! Sets the mode to one of move, rotate, scale. */
      virtual void setMode(string newMode) {}
      virtual void addUndoState() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   
      /*! @name Mission Area
      @{ */
      /*!
       */
      bool renderMissionArea;
      /*!
       */
      ColorI missionAreaFillColor;
      /*!
       */
      ColorI missionAreaFrameColor;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      ColorI consoleFrameColor;
      /*!
       */
      ColorI consoleFillColor;
      /*!
       */
      int consoleSphereLevel;
      /*!
       */
      int consoleCircleSegments;
      /*!
       */
      int consoleLineWidth;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool isDirty;
      /*!
       */
      bool planarMovement;
      /*!
       */
      int undoLimit;
      /*!
       */
      enumval dropType;
      /*!
       */
      float projectDistance;
      /*!
       */
      bool boundingBoxCollision;
      /*!
       */
      bool renderPlane;
      /*!
       */
      bool renderPlaneHashes;
      /*!
       */
      ColorI gridColor;
      /*!
       */
      float planeDim;
      /*!
       */
      Point3F gridSize;
      /*!
       */
      bool renderPopupBackground;
      /*!
       */
      ColorI popupBackgroundColor;
      /*!
       */
      ColorI popupTextColor;
      /*!
       */
      ColorI objectTextColor;
      /*!
       */
      bool objectsUseBoxCenter;
      /*!
       */
      int axisGizmoMaxScreenLen;
      /*!
       */
      bool axisGizmoActive;
      /*!
       */
      float mouseMoveScale;
      /*!
       */
      float mouseRotateScale;
      /*!
       */
      float mouseScaleScale;
      /*!
       */
      float minScaleFactor;
      /*!
       */
      float maxScaleFactor;
      /*!
       */
      ColorI objSelectColor;
      /*!
       */
      ColorI objMouseOverSelectColor;
      /*!
       */
      ColorI objMouseOverColor;
      /*!
       */
      bool showMousePopupInfo;
      /*!
       */
      ColorI dragRectColor;
      /*!
       */
      bool renderObjText;
      /*!
       */
      bool renderObjHandle;
      /*!
       */
      string objTextFormat;
      /*!
       */
      ColorI faceSelectColor;
      /*!
       */
      bool renderSelectionBox;
      /*!
       */
      ColorI selectionBoxColor;
      /*!
       */
      bool selectionLocked;
      /*!
       */
      bool snapToGrid;
      /*!
       */
      bool snapRotations;
      /*!
       */
      float rotationSnap;
      /*!
       */
      bool toggleIgnoreList;
      /*!
       */
      bool renderNav;
      /*!
       */
      filename selectHandle;
      /*!
       */
      filename defaultHandle;
      /*!
       */
      filename lockedHandle;
      /// @}
   
   };
   
   class  Player : public ShapeBase {
     public:
      /*! Return the current state name. */
      virtual string getState() {}
      virtual string getDamageLocation(Point3F pos) {}
      virtual bool setArmThread(string sequenceName) {}
      virtual bool setActionThread(string sequenceName, bool hold, bool fsp) {}
      virtual bool setControlObject(ShapeBase obj) {}
      /*! Get the current control object. */
      virtual float getControlObject() {}
      virtual void clearControlObject() {}
      virtual bool checkDismountPoint(Point3F oldPos, Point3F pos) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  AIPlayer : public Player {
     public:
      /*! Stop moving. */
      virtual void stop() {}
      /*! Stop aiming at anything. */
      virtual void clearAim() {}
      /*! Sets the move speed for an AI object. */
      virtual void setMoveSpeed( float speed ) {}
      /*! Tells the AI to move to the location provided. */
      virtual void setMoveDestination(Point3F goal, bool slowDown=true) {}
      /*! Returns the point the AI is set to move to. */
      virtual string getMoveDestination() {}
      /*! Tells the AI to aim at the location provided. */
      virtual void setAimLocation( Point3F target ) {}
      /*! Returns the point the AI is aiming at. */
      virtual string getAimLocation() {}
      /*! Sets the bot's target object. */
      virtual void setAimObject( GameBase obj ) {}
      /*! Gets the object the AI is targeting. */
      virtual int getAimObject() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  BanList : public SimObject {
     public:
      /*! Ban a user until a given time.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
@param   banTime  Time at which they will be allowed back in. */
      virtual void addAbsolute( int ID, TransportAddress TA, int banTime ) {}
      /*! Ban a user for banLength seconds.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
@param   banTime  Time at which they will be allowed back in. */
      virtual void add( int ID, TransportAddress TA, int banLength ) {}
      /*! Unban someone.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
 */
      virtual void removeBan( int ID, TransportAddress TA ) {}
      /*! Is someone banned?

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
 */
      virtual bool isBanned( int ID, TransportAddress TA ) {}
      /*! Dump the banlist to a file. */
      virtual void export(string filename) {}
   };
   
   class  Camera : public ShapeBase {
     public:
      /*! Get the position of the camera.

@returns A string of form "x y z". */
      virtual string getPosition() {}
      /*! Set the camera to orbit around some given object.

@param   orbitObject  Object we want to orbit.
@param   mat          A set of fields: posX posY posZ aaX aaY aaZ aaTheta
@param   minDistance  Minimum distance to keep from object.
@param   maxDistance  Maximum distance to keep from object.
@param   curDistance  Distance to set initially from object.
@param   ownClientObj Are we observing an object owned by us? */
      virtual void setOrbitMode(GameBase orbitObject, transform mat, float minDistance, float maxDistance, float curDistance, bool ownClientObject) {}
      /*! Set the camera to be able to fly freely. */
      virtual void setFlyMode() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  Debris : public GameBase {
     public:
      /*! Set this piece of debris at the given position with the given velocity. */
      virtual bool init(Point3F position, Point3F velocity) {}
   
      /*! @name Misc
      @{ */
      /*!
       */
      float lifetime;
      /// @}
   
   };
   
   class  DebugView : public GuiTextCtrl {
     public:
      /*! Cause a line to be drawn persistently by the DebugView. */
      virtual void addLine( Point3F start, Point3F end, Color3F color) {}
      /*! Clear all lines added by addLine. */
      virtual void clearLines() {}
      /*! Set one of the lines in the DebugView to contain the specified text at the specified color. */
      virtual void setText(int line, string text, Color3F color=NULL) {}
      /*! Clears all lines, or if a line is specified, that specific line. */
      virtual void clearText(int line=-1) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      caseString text;
      /*!
       */
      int maxLength;
   };
   
   class  GuiPlayerView : public GuiTSCtrl {
     public:
      virtual void setModel( raceGender, skin ) {}
      virtual void setSeq( index ) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      float cameraZRot;
      /*!
       */
      float forceFOV;
   };
   
   class  Item : public ShapeBase {
     public:
      /*! Is the object static (ie, non-movable)? */
      virtual bool isStatic() {}
      /*! Is the object still rotating? */
      virtual bool isRotating() {}
      /*! Temporarily disable collisions against obj. */
      virtual bool setCollisionTimeout(ShapeBase obj) {}
      /*! Get the position on the surface on which the object is stuck. */
      virtual string getLastStickyPos() {}
      /*! Get the normal of the surface on which the object is stuck. */
      virtual string getLastStickyNormal() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool collideable;
      /*!
       */
      bool static;
      /*!
       */
      bool rotate;
      /// @}
   
   };
   
   class  MissionArea : public NetObject {
     public:
      /*! Returns 4 fields: starting x, starting y, extents x, extents y */
      virtual string getArea() {}
      virtual void setArea(int x, int y, int width, int height) {}
   
      /*! @name dimensions
      @{ */
      /*!
       */
      RectI area;
      /*!
       */
      float flightCeiling;
      /*!
       */
      float flightCeilingRange;
      /// @}
   
   };
   
   class  PathCamera : public ShapeBase {
     public:
      virtual void setPosition(pos) {}
      virtual void setTarget(pos) {}
      virtual void setState({forward,backward,stop}) {}
      virtual void reset(speed=0) {}
      virtual void pushBack(transform,speed,type,path) {}
      virtual void pushFront(transform,speed,type,path) {}
      virtual void popFront() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   };
   
   class  PhysicalZone : public SceneObject {
     public:
      /*! Activate the physical zone's effects. */
      virtual void activate() {}
      /*! Deactivate the physical zone's effects. */
      virtual void deactivate() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      float velocityMod;
      /*!
       */
      float gravityMod;
      /*!
       */
      Point3F appliedForce;
      /*!
       */
      TriggerPolyhedron polyhedron;
      /// @}
   
   };
   
   class  TriggerData : public GameBaseData {
     public:
      virtual void onEnterTrigger( Trigger t, SimObject intruder) {}
      virtual void onLeaveTrigger( Trigger t, SimObject intruder) {}
      virtual void onTickTrigger(Trigger t) {}
      /*!
       */
      caseString category;
      /*!
       */
      string className;
      /*!
       */
      int tickPeriodMS;
   };
   
   class  Trigger : public GameBase {
     public:
      virtual int getNumObjects() {}
      virtual int getObject(int idx) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      TriggerPolyhedron polyhedron;
   };
   
   class  Precipitation : public GameBase {
     public:
      virtual void setPercentange(percentage <0.0 to 1.0>) {}
      virtual void modifyStorm(Percentage <0 to 1>, Time<sec>) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
   
      /*! @name Movement
      @{ */
      /*!
       */
      float minSpeed;
      /*!
       */
      float maxSpeed;
      /*!
       */
      float minMass;
      /*!
       */
      float maxMass;
      /// @}
   
   
      /*! @name turbulence
      @{ */
      /*!
       */
      float maxTurbulence;
      /*!
       */
      float turbulenceSpeed;
      /*!
       */
      bool rotateWithCamVel;
      /*!
       */
      bool useTurbulence;
      /// @}
   
      /*!
       */
      int numDrops;
      /*!
       */
      float boxWidth;
      /*!
       */
      float boxHeight;
      /*!
       */
      bool doCollision;
   };
   
   class  TCPObject : public SimObject {
     public:
      /*! Parameters are transmitted as strings, one at a time. */
      virtual void send(...) {}
      /*! Start listening on the specified ports for connections. */
      virtual void listen(int port) {}
      /*! Connect to the given address. */
      virtual void Connect(string addr) {}
      /*! Disconnect from whatever we're connected to, if anything. */
      virtual void disconnect() {}
   };
   
   class  HTTPObject : public TCPObject {
     public:
      virtual void get(TransportAddress addr, string requirstURI, string query=NULL) {}
      virtual void post(TransportAddress addr, string requestURI, string query, string post) {}
   };
   
   class  SimpleNetObject : public NetObject {
     public:
      virtual void setMessage(string msg) {}
   };
   
   class  GuiClockHud : public GuiControl {
     public:
      /*! Sets the current base time for the clock */
      virtual void setTime(time in sec) {}
      /*! Returns current time in secs. */
      virtual float getTime() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool showFill;
      /*!
       */
      bool showFrame;
      /*!
       */
      ColorF fillColor;
      /*!
       */
      ColorF frameColor;
      /*!
       */
      ColorF textColor;
      /// @}
   
   };
   
   class  FlyingVehicle : public Vehicle {
     public:
      /*! Should the vehicle temporarily use the create height specified in the datablock? This can help avoid problems with spawning. */
      virtual void useCreateHeight(bool enabled) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      bool disableMove;
   };
   
   class  WheeledVehicle : public Vehicle {
     public:
      virtual bool setWheelSteering(wheel#,float) {}
      virtual bool setWheelPowered(wheel#,bool) {}
      virtual bool setWheelTire(wheel#,tire) {}
      virtual bool setWheelSpring(wheel#,spring) {}
      virtual int getWheelCount() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      bool disableMove;
   };
   
   class  DebugDrawer : public SimObject {
     public:
      virtual void drawLine(Point3F a, Point3F b) {}
      virtual void setLastTTL(U32 ms) {}
      virtual void setLastZTest(bool enabled) {}
      /*!  - Toggle freeze mode. */
      virtual void toggleFreeze() {}
      /*!  - Enabled/disable drawing. */
      virtual void toggleDrawing() {}
   };
   
   class  GFXCardProfiler {
     public:
   
      /*! @name Core
      
      Functions relating to the card profiler functionality.
      @{ */
      /*!  - Returns the driver version (59.72). */
      virtual string getVersion() {}
      /*!  - Returns the card name (GeforceFX 5950 Ultra). */
      virtual string getCard() {}
      /*!  - Returns the vendor name (nVidia, ATI). */
      virtual string getVendor() {}
      /*!  - Returns the renderer name (D3D9, for instance). */
      virtual string getRenderer() {}
      /*!  - Set a specific card capability. */
      virtual void setCapability(name, true/false) {}
      /// @}
   
   };
   
   class  GuiFrameSetCtrl : public GuiControl {
     public:
      virtual void frameBorder(int index, bool enable=true) {}
      virtual void frameMovable(int index, bool enable=true) {}
      virtual void frameMinExtent(int index, int w, int h) {}
      virtual void addColumn() {}
      virtual void addRow() {}
      virtual void removeColumn() {}
      virtual void removeRow() {}
      virtual int getColumnCount() {}
      virtual int getRowCount() {}
      virtual int getColumnOffset(int index) {}
      virtual int getRowOffset(int index) {}
      virtual void setColumnOffset(int index, int offset) {}
      virtual void setRowOffset(int index, int offset) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      intList columns;
      /*!
       */
      intList rows;
      /*!
       */
      int borderWidth;
      /*!
       */
      ColorI borderColor;
      /*!
       */
      enumval borderEnable;
      /*!
       */
      enumval borderMovable;
      /*!
       */
      bool autoBalance;
      /*!
       */
      int fudgeFactor;
   };
   
   class  GuiBitmapButtonCtrl : public GuiButtonCtrl {
     public:
      virtual void setBitmap(filepath name) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString text;
      /*!
       */
      int groupNum;
      /*!
       */
      enumval buttonType;
      /// @}
   
      /*!
       */
      filename bitmap;
   };
   
   class  GuiSliderCtrl : public GuiControl {
     public:
      /*! Get the position of the slider. */
      virtual float getValue() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   
      /*! @name Slider
      @{ */
      /*!
       */
      Point2F range;
      /*!
       */
      int ticks;
      /*!
       */
      float value;
      /// @}
   
   };
   
   class  DbgFileView : public GuiArrayCtrl {
     public:
      /*! Set the current highlighted line. */
      virtual void setCurrentLine(int line) {}
      /*! Get the currently executing file and line, if any.

@returns A string containing the file, a tab, and then the line number. Use getField() with this. */
      virtual string getCurrentLine() {}
      /*! Open a file for viewing.

@note This loads the file from the local system. */
      virtual bool open(string filename) {}
      /*! Clear all break points in the current file. */
      virtual void clearBreakPositions() {}
      /*! Set a breakpoint at the specified line. */
      virtual void setBreakPosition(int line) {}
      /*! Set a breakpoint at the specified line. */
      virtual void setBreak(int line) {}
      /*! Remove a breakpoint from the specified line. */
      virtual void removeBreak(int line) {}
      /*! Find the specified string in the currently viewed file and scroll it into view. */
      virtual bool findString(string findThis) {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
   };
   
   class  GuiFilterCtrl : public GuiControl {
     public:
      /*! Return a tuple containing all the values in the filter. */
      virtual string getValue() {}
      /*! Reset the filter to use the specified points, spread equidistantly across the domain. */
      virtual void setValue(f1, f2, ...) {}
      /*! Reset the filtering. */
      virtual void identity() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      int controlPoints;
      /*!
       */
      floatList filter;
   };
   
   class  GuiMessageVectorCtrl : public GuiControl {
     public:
      /*! Make this gui control display messages from the specified MessageVector */
      virtual bool attach(MessageVector item) {}
      /*! Stop listing messages from the MessageVector previously attached to, if any. */
      virtual void detach() {}
   
      /*! @name Parent
      @{ */
      /*!
       */
      GuiProfile profile;
      /*!
       */
      enumval horizSizing;
      /*!
       */
      enumval vertSizing;
      /*!
       */
      Point2I position;
      /*!
       */
      Point2I extent;
      /*!
       */
      Point2I minExtent;
      /*!
       */
      bool visible;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated modal;
      /*!
      @deprecated This member is deprecated, which means that its value is always undefined.
       */
      deprecated setFirstResponder;
      /*!
       */
      string variable;
      /*!
       */
      string command;
      /*!
       */
      string altCommand;
      /*!
       */
      string accelerator;
      /// @}
   
      /*!
       */
      int lineSpacing;
      /*!
       */
      int lineContinuedIndex;
      /*!
       */
      string allowedMatches;
      /*!
       */
      ColorI matchColor;
      /*!
       */
      int maxColorIndex;
   };
   
   class  MessageVector : public SimObject {
     public:
      /*! Clear the message vector. */
      virtual void clear() {}
      /*! Push a line onto the back of the list. */
      virtual void pushBackLine(string msg, int tag=0) {}
      /*! Pop a line from the back of the list; destroys the line. */
      virtual bool popBackLine() {}
      /*! Push a line onto the front of the vector. */
      virtual void pushFrontLine(string msg, int tag=0) {}
      /*! Pop a line from the front of the vector, destroying the line. */
      virtual bool popFrontLine() {}
      /*! Insert a new line into the vector at the specified position. */
      virtual bool insertLine(int insertPos, string msg, int tag=0) {}
      /*! Delete the line at the specified position. */
      virtual bool deleteLine(int deletePos) {}
      /*! Dump the message vector to a file, optionally prefixing a header. */
      virtual void dump(string filename, string header=NULL) {}
      /*! Get the number of lines in the vector. */
      virtual int getNumLines() {}
      /*! Scan through the lines in the vector, returning the first line that has a matching tag. */
      virtual string getLineTextByTag(int tag) {}
      /*! Scan through the vector, returning the line number of the first line that matches the specified tag; else returns -1 if no match was found. */
      virtual int getLineIndexByTag(int tag) {}
      /*! Get the text at a specified line. */
      virtual string getLineText(int line) {}
      /*! Get the tag of a specified line. */
      virtual int getLineTag(int line) {}
   };
   
   class  InteriorInstance : public SceneObject {
     public:
      /*!  Mode is 'On' or 'Off' */
      virtual void setAlarmMode(string mode) {}
      virtual void setSkinBase(string basename) {}
      virtual int getNumDetailLevels() {}
      virtual void setDetailLevel(int level) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Media
      @{ */
      /*!
       */
      filename interiorFile;
      /// @}
   
   
      /*! @name Audio
      @{ */
      /*!
       */
      AudioProfilePtr AudioProfile;
      /*!
       */
      AudioEnvironmentPtr AudioEnvironment;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      bool showTerrainInside;
      /// @}
   
   };
   
   class  PathedInterior : public GameBase {
     public:
      virtual void setPathPosition() {}
      virtual void setTargetPosition() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      caseString nameTag;
      /*!
       */
      GameBaseDataPtr dataBlock;
      /// @}
   
      /*!
       */
      string interiorResource;
      /*!
       */
      int interiorIndex;
      /*!
       */
      MatrixPosition basePosition;
      /*!
       */
      MatrixRotation baseRotation;
      /*!
       */
      Point3F baseScale;
   };
   
   class  ActionMap : public SimObject {
     public:
      virtual void bind( device, action, [modifier spec, mod...], command ) {}
      virtual void bindCmd( device, action, makeCmd, breakCmd ) {}
      virtual void unbind( device, action ) {}
      virtual void save( [fileName], [append] ) {}
      virtual void push() {}
      virtual void pop() {}
      virtual string getBinding( command ) {}
      virtual string getCommand( device, action ) {}
      virtual bool isInverted( device, action ) {}
      virtual float getScale( device, action ) {}
      virtual string getDeadZone( device, action ) {}
   };
   
   class  Path : public SimGroup {
     public:
      virtual int getPathId() {}
      /*!
       */
      bool isLooping;
   };
   
   class  Sky : public SceneObject {
     public:
      virtual void stormClouds(bool show, float duration) {}
      virtual void stormFog(float percent, float duration) {}
      virtual void realFog( bool show, float max, float min, float speed ) {}
      virtual string getWindVelocity() {}
      virtual void setWindVelocity(float x, float y, float z) {}
      virtual void stormCloudsShow(bool showClouds) {}
      virtual void stormFogShow(bool show) {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Media
      @{ */
      /*!
       */
      filename materialList;
      /// @}
   
   
      /*! @name Clouds
      @{ */
      /*!
       */
      string cloudText;
      /*!
       */
      float cloudHeightPer;
      /*!
       */
      float cloudSpeed1;
      /*!
       */
      float cloudSpeed2;
      /*!
       */
      float cloudSpeed3;
      /// @}
   
   
      /*! @name Visibility
      @{ */
      /*!
       */
      float visibleDistance;
      /// @}
   
   
      /*! @name Fog
      @{ */
      /*!
       */
      float fogDistance;
      /*!
       */
      ColorF fogColor;
      /*!
       */
      bool fogStorm1;
      /*!
       */
      bool fogStorm2;
      /*!
       */
      bool fogStorm3;
      /*!
       */
      Point3F fogVolume1;
      /*!
       */
      Point3F fogVolume2;
      /*!
       */
      Point3F fogVolume3;
      /// @}
   
   
      /*! @name Wind
      @{ */
      /*!
       */
      Point3F windVelocity;
      /*!
       */
      bool windEffectPrecipitation;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      ColorF SkySolidColor;
      /*!
       */
      bool useSkyTextures;
      /*!
       */
      bool renderBottomTexture;
      /*!
       */
      bool noRenderBans;
      /*!
       */
      float renderBanOffsetHeight;
      /*!
       */
      bool skyGlow;
      /*!
       */
      ColorF skyGlowColor;
      /// @}
   
   };
   
   class  Sun : public NetObject {
     public:
      virtual void apply() {}
   
      /*! @name Misc
      @{ */
      /*!
       */
      Point3F direction;
      /*!
       */
      ColorF color;
      /*!
       */
      ColorF ambient;
      /// @}
   
   };
   
   class  TerrainBlock : public SceneObject {
     public:
      /*!  - saves the terrain block's terrain file to the specified file name. */
      virtual bool save(string fileName) {}
      /*!  - sets the texture script associated with this terrain file. */
      virtual void setTextureScript(string script) {}
      /*!  - sets the heightfield script associated with this terrain file. */
      virtual void setHeightfieldScript(string script) {}
      /*!  - gets the texture script associated with the terrain file. */
      virtual string getTextureScript() {}
      /*!  - gets the heightfield script associated with the terrain file. */
      virtual string getHeightfieldScript() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
   
      /*! @name Media
      @{ */
      /*!
       */
      filename detailTexture;
      /*!
       */
      filename terrainFile;
      /*!
       */
      filename bumpTexture;
      /// @}
   
   
      /*! @name Misc
      @{ */
      /*!
       */
      int squareSize;
      /*!
       */
      intList emptySquares;
      /*!
       */
      float bumpScale;
      /*!
       */
      float bumpOffset;
      /*!
       */
      int zeroBumpScale;
      /// @}
   
   };
   
   class  AtlasInstance : public SceneObject {
     public:
      /*!  - Purge all loaded chunks. */
      virtual void purge() {}
   
      /*! @name Transform
      @{ */
      /*!
       */
      MatrixPosition position;
      /*!
       */
      MatrixRotation rotation;
      /*!
       */
      Point3F scale;
      /// @}
   
      /*!
      Path to the file we will be loading geometry data from.
      
       */
      filename chunkFile;
      /*!
      Path to the file we will be loading texture data from.
      
       */
      filename tqtFile;
      /*!
      Name of our Material. Must be specialized for terrain usage.
      
       */
      string materialName;
      /*!
      Detail texture.
      
       */
      filename detailTexture;
   };
   
   class  MySQL : public SimObject {
     public:
      virtual bool ValidateSettings() {}
      virtual bool Connect() {}
      virtual void Close() {}
      virtual bool Query(QueryStringValue) {}
      virtual int StoreResult() {}
      virtual void FreeResult(ResultID) {}
      virtual int NumRows(ResultID) {}
      virtual bool FetchRow(ResultID) {}
      virtual string GetRowCellDirect(ResultID, FieldNr) {}
      virtual string GetRowCell(ResultID, FieldName) {}
      virtual int NumFields() {}
      virtual string GetFieldName(ResultID, FieldIndex) {}
      virtual int InsertID() {}
      virtual void setupEnv(DB,hostname,port,username,password,compression,ssl) {}
      /*!
       */
      string host;
      /*!
       */
      int port;
      /*!
       */
      string user;
      /*!
       */
      string pwd;
      /*!
       */
      bool flag_compress;
      /*!
       */
      bool flag_ssl;
      /*!
       */
      string db;
   };
