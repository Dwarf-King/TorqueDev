class  SimObject {
  public:
   virtual bool save(fileName, <selectedOnly>) {}
   virtual void setName(newName) {}
   virtual string getName() {}
   virtual string getClassName() {}
   virtual string getFieldValue(fieldName) {}
   virtual bool setFieldValue(fieldName,value) {}
   /*! string InternalName */
   virtual void setInternalName() {}
   /*! getInternalName returns the objects internal name */
   virtual string getInternalName() {}
   virtual void dumpClassHierarchy() {}
   /*!  -- returns true if this object is a member of the specified class */
   virtual bool isMemberOfClass(string classname) {}
   virtual int getId() {}
   virtual int getGroup() {}
   virtual void delete() {}
   virtual int schedule(time, command, <arg1...argN>) {}
   virtual int getDynamicFieldCount() {}
   virtual string getDynamicField(index) {}
   virtual void dump() {}
   virtual int getType() {}
   virtual bool isMethod(string method name) {}
   /*!  returns true, if we are in the specified simgroup - or a subgroup thereof */
   virtual bool isChildOfGroup() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  SimSet : public SimObject {
  public:
   virtual void listObjects() {}
   virtual void add(obj1,...) {}
   virtual void remove(obj1,...) {}
   virtual void clear() {}
   virtual int getCount() {}
   virtual int getObject(objIndex) {}
   virtual bool isMember(object) {}
   virtual void bringToFront(object) {}
   virtual void pushToBack(object) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  SimGroup : public SimSet {
  public:
   /*! string InternalName */
   virtual int findObjectByInternalName() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  GuiControl : public SimGroup {
  public:
   virtual Script getHelpPage() {}
   /*! Sets whether this control can serialize itself to the hard disk */
   virtual void setCanSave() {}
   /*! returns true if the point is in the control, point is in parent coords */
   virtual bool pointInControl() {}
   /*! S32 controlId */
   virtual void addGuiControl() {}
   /*!  (child1, child2) uses simset reorder to push child 1 after child 2 - both must already be child controls of this control */
   virtual void reorderChild() {}
   /*! returns the Id of the parent control */
   virtual int getParent() {}
   virtual void setValue(string value) {}
   virtual string getValue() {}
   virtual void setActive(bool active) {}
   virtual bool isActive() {}
   virtual void setVisible(bool visible) {}
   virtual void makeFirstResponder(bool isFirst) {}
   virtual bool isVisible() {}
   virtual bool isAwake() {}
   virtual void setProfile(GuiControlProfile p) {}
   virtual void resize(int x, int y, int w, int h) {}
   virtual string getPosition() {}
   /*!  returns center of control, as space seperated ints */
   virtual string getCenter() {}
   /*!  sets control position, by center - coords are local not global */
   virtual void setCenter() {}
   /*!  returns center of control, as space seperated ints */
   virtual string getGlobalCenter() {}
   virtual string getGlobalPosition() {}
   /*! int x,y in global screen space */
   virtual void setPositionGlobal() {}
   /*! int x,y in local space */
   virtual void setPosition() {}
   /*! Get the width and height of the control. */
   virtual string getExtent() {}
   /*!  sets the width & height of the control. */
   virtual void setExtent() {}
   /*! Get the minimum allowed size of the control. */
   virtual string getMinExtent() {}
   /*! Sets this control as the first responder */
   virtual void setFirstResponder() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiTextCtrl : public GuiControl {
  public:
   virtual void setText( newText ) {}
   virtual void setTextID( newText ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterLevel4 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterClass4 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterName4 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterName3 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterClass3 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterLevel3 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterLevel2 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterClass2 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterLevel1 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterClass1 : public GuiTextCtrl {
  public:
};

class  GuiButtonBaseCtrl : public GuiControl {
  public:
   /*!  - simulates a button click from script. */
   virtual void performClick() {}
   /*!  - sets the text of the button to the string. */
   virtual void setText(string text) {}
   /*!  - sets the text of the button to the localized string. */
   virtual void setTextID(string id) {}
   /*!  - returns the text of the button. */
   virtual string getText() {}
   /*!  - sets the state on member and updates siblings of the same group. */
   virtual void setStateOn(bool isStateOn) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

};

class  GuiButtonCtrl : public GuiButtonBaseCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

};

class  GuiBitmapButtonCtrl : public GuiButtonCtrl {
  public:
   virtual void setBitmap(filepath name) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

   /*!
    */
   filename bitmap;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  selectButton : public GuiBitmapButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  quitButton : public GuiBitmapButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  newCharacterButton : public GuiBitmapButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  deleteCharacterButton : public GuiBitmapButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterName2 : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterName1 : public GuiTextCtrl {
  public:
};

class  GuiBitmapCtrl : public GuiControl {
  public:
   /*! Set the offset of the bitmap. */
   virtual void setValue(int xAxis, int yAxis) {}
   /*! Set the bitmap displayed in the control. Note that it is limited in size, to 256x256. */
   virtual void setBitmap(string filename) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   filename bitmap;
   /*!
    */
   bool wrap;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  portrait4 : public GuiBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  portrait3 : public GuiBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  portrait2 : public GuiBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  character1Portrait : public GuiBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  portrait1 : public character1Portrait {
  public:
};

class  GuiChunkedBitmapCtrl : public GuiControl {
  public:
   /*! Set the bitmap contained in this control. */
   virtual void setBitmap(string filename) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   filename bitmap;
   /*!
    */
   bool useVariable;
   /*!
    */
   bool tile;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  characterSelectionScreen : public GuiChunkedBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LoginButton : public GuiBitmapButtonCtrl {
  public:
};

class  GuiTextEditCtrl : public GuiTextCtrl {
  public:
   virtual string getText() {}
   virtual int getCursorPos() {}
   virtual void setCursorPos( newPos ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   string validate;
   /*!
    */
   string escapeCommand;
   /*!
    */
   int historySize;
   /*!
    */
   bool password;
   /*!
    */
   bool tabComplete;
   /*!
    */
   AudioProfile deniedSound;
   /*!
    */
   bool sinkAllKeyEvents;
   /*!
    */
   bool password;
   /*!
    */
   string passwordMask;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  passwordTextbox : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  usernameTextbox : public GuiTextEditCtrl {
  public:
};

class  t2dSceneWindow : public GuiControl {
  public:
   virtual Script objectFollowCheck() {}
   virtual Script endLevel() {}
   virtual Script addToLevel() {}
   virtual Script loadLevel() {}
   /*! Fetch Window Extents (Pos/Size). */
   virtual string getWindowExtents() {}
   /*!  - Returns the t2dSceneGraph associated with this window. */
   virtual string getSceneGraph() {}
   /*!  - Associates t2dSceneGraph Object. */
   virtual void setSceneGraph(t2dSceneGraph) {}
   /*! Detaches the window from any t2dSceneGraph Object. */
   virtual void resetSceneGraph() {}
   /*!  - Set current camera area. */
   virtual void setCurrentCameraArea(x1 / y1 / x2 / y2) {}
   /*! Get current camera Area. */
   virtual string getCurrentCameraArea() {}
   /*!  - Set current camera position. */
   virtual void setCurrentCameraPosition(x / y / [width / height]) {}
   /*! Get current camera Position. */
   virtual string getCurrentCameraPosition() {}
   /*!  - Set current camera Zoom Factor. */
   virtual void setCurrentCameraZoom(zoomFactor) {}
   /*! Get current camera Zoom. */
   virtual float getCurrentCameraZoom() {}
   /*!  - Set target camera area. */
   virtual void setTargetCameraArea(x / y / width / height) {}
   /*!  - Set target camera position. */
   virtual void setTargetCameraPosition(x / y / [width / height]) {}
   /*!  - Set target camera Zoom Factor. */
   virtual void setTargetCameraZoom(zoomFactor) {}
   /*!  - Set camera interpolation time. */
   virtual void setCameraInterpolationTime(interpolationTime) {}
   /*!  - Set camera interpolation mode. */
   virtual void setCameraInterpolationMode(interpolationMode) {}
   /*!  - Start Camera Move. */
   virtual void startCameraMove([interpolationTime]) {}
   /*! Stop Camera Move. */
   virtual void stopCameraMove() {}
   /*! Complete Camera Move. */
   virtual void completeCameraMove() {}
   /*!  - Undo Camera Move. */
   virtual void undoCameraMove([interpolationTime]) {}
   /*! Is Camera Moving Status. */
   virtual bool getIsCameraMoving() {}
   /*! Is Camera Mounted Status. */
   virtual bool getIsCameraMounted() {}
   /*!  - Starts the camera shaking. */
   virtual void startCameraShake(shakeMagnitude, time) {}
   /*! Stops the camera shaking. */
   virtual void stopCameraShake() {}
   /*!  - Mounts Camera onto a specified object. */
   virtual void mount(t2dSceneObject, [offsetX / offsetY], [mountForce], [sendToMount?]) {}
   /*! Dismounts Camera from object. */
   virtual void dismount() {}
   /*!  - Set View Limit On. */
   virtual void setViewLimitOn([minX / minY / maxX / maxY]) {}
   /*! Set View Limit Off. */
   virtual void setViewLimitOff() {}
   /*!  - Sets the render group(s). */
   virtual void setRenderGroups(groups$) {}
   /*!  - Sets the render layers(s). */
   virtual void setRenderLayers(layers$) {}
   /*!  - Sets the layer/group mask which control what is rendered. */
   virtual void setRenderMasks(layerMask, groupMask) {}
   /*!  - Sets whether mouses-events are monitored by the window. */
   virtual void setUseWindowMouseEvents(mouseStatus) {}
   /*! Gets whether mouses-events are monitored by the window. */
   virtual bool getUseWindowMouseEvents() {}
   /*!  - Sets whether mouses-events are monitored by the scene-Objects. */
   virtual void setUseObjectMouseEvents(mouseStatus) {}
   /*! Gets whether mouses-events are monitored by the scene-objects. */
   virtual bool getUseObjectMouseEvents() {}
   /*!  - Sets the group filter. */
   virtual void setObjectMouseEventGroupFilter(groups$) {}
   /*!  - Sets the layer filter. */
   virtual void setObjectMouseEventLayerFilter(layers$) {}
   /*! useInvisible - Sets the use invisible flag */
   virtual void setObjectMouseEventInvisibleFilter() {}
   /*! groupMask, layerMask, [useInvisible?] - Sets Filter for Object Mouse-Events. */
   virtual void setObjectMouseEventFilter() {}
   /*! Sets the window mouse-lock status. */
   virtual void setLockMouse() {}
   /*! Gets the window mouse-lock status. */
   virtual bool getLockMouse() {}
   /*!  - Set Debug Font/Size/textColour/backgroundColour */
   virtual void setDebugBanner(fontName, fontSize, textR/G/B/[A]$, backgroundR/G/B/[A]$) {}
   /*! Sets Current Mouse Position. */
   virtual void setMousePosition() {}
   /*! Gets Current Mouse Position. */
   virtual string getMousePosition() {}
   /*!  - Returns World coordinate of Window coordinate. */
   virtual string getWorldPoint(X / Y) {}
   /*!  - Returns Window coordinate of World coordinate. */
   virtual string getWindowPoint(X / Y) {}
   /*!  - Returns Canvas coordinate of Window coordinate. */
   virtual string getCanvasPoint(X / Y) {}
   /*!  - Checks if World coordinate is inside Window. */
   virtual bool getIsWindowPoint(X / Y) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool lockMouse;
   /*!
    */
   bool useWindowMouseEvents;
   /*!
    */
   bool useObjectMouseEvents;
};

class  sceneWindow2D : public t2dSceneWindow {
  public:
   virtual Script onMouseLeave() {}
   virtual Script onMouseEnter() {}
   virtual Script onMouseUp() {}
   virtual Script onMouseDown() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseMove() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  loginScreen : public GuiChunkedBitmapCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  Channel_A_Val : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  Channel_B_Val : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  Channel_G_Val : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  Channel_R_Val : public GuiTextCtrl {
  public:
};

class  GuiColorPickerCtrl : public GuiControl {
  public:
   /*! Gets the current position of the selector */
   virtual string getSelectorPos() {}
   /*! Sets the current position of the selector */
   virtual void setSelectorPos() {}
   /*! Forces update of pick color */
   virtual void updateColor() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name ColorPicker
   @{ */
   /*!
    */
   ColorF BaseColor;
   /*!
    */
   ColorF PickColor;
   /*!
    */
   int SelectorGap;
   /*!
    */
   enumval DisplayMode;
   /*!
    */
   bool ActionOnMove;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ColorRangeSelect : public GuiColorPickerCtrl {
  public:
};

class  GuiSliderCtrl : public GuiControl {
  public:
   /*! Get the position of the slider. */
   virtual float getValue() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Slider
   @{ */
   /*!
    */
   Point2F range;
   /*!
    */
   int ticks;
   /*!
    */
   float value;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ColorAlphaSelect : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ColorBlendSelect : public GuiColorPickerCtrl {
  public:
};

class  GuiWindowCtrl : public GuiTextCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   bool resizeWidth;
   /*!
    */
   bool resizeHeight;
   /*!
    */
   bool canMove;
   /*!
    */
   bool canClose;
   /*!
    */
   bool canMinimize;
   /*!
    */
   bool canMaximize;
   /*!
    */
   Point2I minSize;
   /*!
    */
   string closeCommand;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiPickerDlg : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ColorPickerDlg : public GuiColorPickerCtrl {
  public:
};

class  FileDialogBase : public GuiControl {
  public:
   virtual Script PopulateFilters() {}
   virtual Script GetFilterCount() {}
   virtual Script ClearFilters() {}
   virtual Script AddFilter() {}
   virtual Script onWake() {}
   virtual Script onRemove() {}
   virtual Script onAdd() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  SaveFileDlgEx : public FileDialogBase {
  public:
};

class  GuiArrayCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiTreeViewCtrl : public GuiArrayCtrl {
  public:
   virtual int findItemByName(find item by name and returns the mId) {}
   virtual int insertItem(TreeItemId parent, name, value, icon, normalImage=0, expandedImage=0) {}
   virtual void lockSelection(locks selections) {}
   virtual void clearSelection(clears selection) {}
   virtual void deleteSelection(deletes the selected items) {}
   virtual void addSelection(selects an item) {}
   virtual void removeSelection(deselects an item) {}
   virtual bool selectItem(TreeItemId item, bool select=true) {}
   virtual bool expandItem(TreeItemId item, bool expand=true) {}
   virtual bool buildIconTable(builds an icon table) {}
   /*!  Set the root of the tree view to the specified object, or to the root set. */
   virtual void open(SimSet obj, bool okToEdit=true) {}
   virtual string getItemText(TreeItemId item) {}
   virtual string getItemValue(TreeItemId item) {}
   virtual bool editItem(TreeItemId item, string newText, string newValue) {}
   virtual bool removeItem(TreeItemId item) {}
   /*!  - empty tree */
   virtual void clear() {}
   /*! Get id for root item. */
   virtual int getFirstRootItem() {}
   virtual int getChild(TreeItemId item) {}
   /*! Build the visible tree */
   virtual void buildVisibleTree() {}
   virtual int getParent(TreeItemId item) {}
   virtual int getNextSibling(TreeItemId item) {}
   virtual int getPrevSibling(TreeItemId item) {}
   virtual int getItemCount() {}
   virtual int getSelectedItem() {}
   virtual int getSelectedObject() {}
   virtual void moveItemUp(TreeItemId item) {}
   virtual void moveItemDown(TreeItemId item) {}
   /*!  gets the text from the current node to the root, concatenating at each branch upward, with a specified delimiter optionally */
   virtual string getTextToRoot(TreeItemId item,Delimiter=none) {}
   /*! returns a space seperated list of mulitple item ids */
   virtual string getSelectedItemList() {}
   virtual int findItemByObjectId(find item by object id and returns the mId) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name TreeView
   @{ */
   /*!
    */
   int tabSize;
   /*!
    */
   int textOffset;
   /*!
    */
   bool fullRowSelect;
   /*!
    */
   int itemHeight;
   /*!
    */
   bool destroyTreeOnSleep;
   /*!
    */
   bool MouseDragging;
   /*!
    */
   bool MultipleSelections;
   /*!
    */
   bool DeleteObjectAllowed;
   /*!
    */
   bool DragToItemAllowed;
   /// @}

};

class  GuiDirectoryTreeCtrl : public GuiTreeViewCtrl {
  public:
   /*!  - returns the currently selected path in the tree */
   virtual string getSelectedPath() {}
   /*!  - expands the tree to the specified path */
   virtual bool setSelectedPath(path) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name TreeView
   @{ */
   /*!
    */
   int tabSize;
   /*!
    */
   int textOffset;
   /*!
    */
   bool fullRowSelect;
   /*!
    */
   int itemHeight;
   /*!
    */
   bool destroyTreeOnSleep;
   /*!
    */
   bool MouseDragging;
   /*!
    */
   bool MultipleSelections;
   /*!
    */
   bool DeleteObjectAllowed;
   /*!
    */
   bool DragToItemAllowed;
   /// @}

};

class  FileDialogDirectoryTree : public GuiDirectoryTreeCtrl {
  public:
   virtual Script onSelectPath() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LoadDirTreeEx : public FileDialogDirectoryTree {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  OpenFileDlgEx : public FileDialogBase {
  public:
};

class  FileDialogFileName : public GuiTextEditCtrl {
  public:
   virtual Script onReturn() {}
};

class  GuiListBoxCtrl : public GuiControl {
  public:
   virtual void setMultipleSelection([true/false]) {}
   /*!  - Clears all the items in the listbox */
   virtual void clearItems() {}
   /*!  - sets all currently selected items to unselected */
   virtual void clearSelection() {}
   /*!  - sets the item at the index specified to selected or not */
   virtual void setSelected(index, [true]/false) {}
   /*!  - returns the number of items in the list */
   virtual int getItemCount() {}
   /*!  - returns the number of items currently selected */
   virtual int getSelCount() {}
   /*!  - returns the selected items index. If multiple selections exist it returns the first selected item */
   virtual int getSelectedItem() {}
   /*!  - returns a space delimited list of the selected items indexes in the list */
   virtual string getSelectedItems() {}
   /*!  - Returns index of item with matching text */
   virtual int findItemText( myItemText, [?caseSensitive - false] ) {}
   /*!  - sets the currently selected item at the specified index */
   virtual void setCurSel(index) {}
   /*!  - sets the current selection range from index start to stop.  if no stop is specified it sets from start index to the end of the list */
   virtual void setCurSelRange(start,[stop]) {}
   /*!  - adds an item to the end of the list with an optional color */
   virtual void addItem(text, color) {}
   virtual void setItemColor(index, color) {}
   virtual void clearItemColor(index) {}
   /*!  - inserts an item into the list at the specified index */
   virtual void insertItem( text, index ) {}
   virtual void deleteItem(itemIndex) {}
   /*!  - returns the text of the item at the specified index */
   virtual string getItemText(index) {}
   /*!  - sets the items text at the specified index */
   virtual void setItemText(index, newtext) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool AllowMultipleSelections;
   /*!
    */
   bool fitParentWidth;
};

class  GuiDirectoryFileListCtrl : public GuiListBoxCtrl {
  public:
   virtual void setFilter([mask space delimited]) {}
   /*!  - directory to enumerate files from (without trailing slash) */
   virtual bool setPath(path,filter) {}
   /*!  - returns a word separated list of selected file(s) */
   virtual string getSelectedFiles() {}
   /*!  - returns the currently selected file name */
   virtual string getSelectedFile() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool AllowMultipleSelections;
   /*!
    */
   bool fitParentWidth;
};

class  FileDialogFileList : public GuiDirectoryFileListCtrl {
  public:
   virtual Script onSelect() {}
   virtual Script onDoubleClick() {}
};

class  GuiPopUpMenuCtrlEx : public GuiTextCtrl {
  public:
   virtual void add(string name, int idNum, int scheme=0) {}
   virtual void addScheme(int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL) {}
   virtual void setText(string text) {}
   virtual string getText() {}
   /*! Clear the popup list. */
   virtual void clear() {}
   /*! Sort the list alphabetically. */
   virtual void sort() {}
   /*! Sort the list by ID. */
   virtual void sortID() {}
   virtual void forceOnAction() {}
   virtual void forceClose() {}
   virtual int getSelected() {}
   virtual void setSelected(int id) {}
   virtual void setFirstSelected() {}
   virtual void setNoneSelected() {}
   virtual string getTextById(int id) {}
   /*! This fills the popup with a classrep's field enumeration type info.

More of a helper function than anything.   If console access to the field list is added, at least for the enumerated types, then this should go away.. */
   virtual void setEnumContent(string class, string enum) {}
   /*! Returns the position of the first entry containing the specified text. */
   virtual int findText(string text) {}
   /*! Get the size of the menu - the number of entries in it. */
   virtual int size() {}
   virtual void replaceText(bool doReplaceText) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   int maxPopupHeight;
   /*!
    */
   bool sbUsesNAColor;
   /*!
    */
   bool reverseTextList;
   /*!
    */
   filename bitmap;
   /*!
    */
   Point2I bitmapBounds;
};

class  FileDialogFilterList : public GuiPopUpMenuCtrlEx {
  public:
   virtual Script onSelect() {}
};

class  GuiIconButtonCtrl : public GuiButtonCtrl {
  public:
   virtual void setBitmap(filepath name) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

   /*!
    */
   filename iconBitmap;
   /*!
    */
   bool sizeIconToButton;
   /*!
    */
   enumval textLocation;
   /*!
    */
   int textMargin;
   /*!
    */
   Point2I buttonMargin;
};

class  FileDialogCancelButton : public GuiIconButtonCtrl {
  public:
   virtual Script onClick() {}
};

class  FileDialogOkButton : public GuiIconButtonCtrl {
  public:
   virtual Script onClick() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellCountX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellWidth : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellHeight : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellCountY : public GuiTextEditCtrl {
  public:
};

class  GuiCheckBoxCtrl : public GuiButtonBaseCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCheckboxCellRowOrder : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellStrideY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellStrideX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellOffsetX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellOffsetY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCellOptionsPanel : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorListLinkedImageMaps : public GuiListBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageBuilderLinkWarning : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorLinkOptionsPanel : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageBuilderImageSceneWindow : public t2dSceneWindow {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorPreviewImageSize : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorComFilterMode : public GuiPopUpMenuCtrlEx {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorTxtImageName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCheckBoxFilterPad : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCheckBoxPreferPerf : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCheckBoxPreload : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorCheckBoxAllowUnload : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageBuilderNameWarning : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ImageEditorImageSettingsPanel : public GuiControl {
  public:
};

class  LoadFileListExwPreview : public GuiDirectoryFileListCtrl {
  public:
   virtual Script loadImageFilePreview() {}
   virtual Script onSelect() {}
};

class  GuiScrollCtrl : public GuiControl {
  public:
   /*!  - scrolls the scroll control to the top of the child content area. */
   virtual void scrollToTop() {}
   /*!  - scrolls the scroll control to the bottom of the child content area. */
   virtual void scrollToBottom() {}
   /*!  - scrolls the scroll control to the specified position. */
   virtual void setScrollPosition(x, y) {}
   /*!  - get the current x scroll position of the scroll control. */
   virtual int getScrollPositionX() {}
   /*!  - get the current y scroll position of the scroll control. */
   virtual int getScrollPositionY() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool willFirstRespond;
   /*!
    */
   enumval hScrollBar;
   /*!
    */
   enumval vScrollBar;
   /*!
    */
   bool constantThumbHeight;
   /*!
    */
   Point2I childMargin;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  FileListScrollOTDialog : public GuiScrollCtrl {
  public:
};

class  guiT2DObjectCtrl : public GuiButtonCtrl {
  public:
   /*!  - Set the T2D sceneObject displayed in the control. */
   virtual void setSceneObject(string object-id/name) {}
   /*!  - returns displaying sceneobject id */
   virtual string getSceneObject() {}
   virtual void setCaption( string caption ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   int renderMargin;
   /*!
    */
   string sceneObject;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  OpenFilewPreviewT2DPreview : public guiT2DObjectCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ThumbContainerOTDialog : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  OpenfilewPreviewtxtImageSize : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  SizeCaptionContainerOTDialog : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  PreviewContainerOTDialog : public GuiControl {
  public:
};

class  LoadDirTreeExwPreview : public GuiDirectoryTreeCtrl {
  public:
   virtual Script onSelectPath() {}
};

class  OpenFileDlgExwPreview : public GuiControl {
  public:
   virtual Script onSleep() {}
   virtual Script onWake() {}
};

class  ImageEditorComImageMapList : public GuiPopUpMenuCtrlEx {
  public:
   virtual Script onSelect() {}
};

class  ImageEditorComImageMode : public GuiPopUpMenuCtrlEx {
  public:
   virtual Script onSelect() {}
};

class  ScriptObject : public SimObject {
  public:

   /*! @name Classes
   
   Script objects have the ability to inherit and have class information.
   @{ */
   /*!
   Class of object.
   
    */
   string class;
   /*!
   Superclass of object.
   
    */
   string superclass;
   /// @}

};

class  ImageEditor : public ScriptObject {
  public:
   virtual Script reCreateImage() {}
   virtual Script clearData() {}
   virtual Script Help() {}
   virtual Script deleteImage() {}
   virtual Script delete() {}
   virtual Script imageFileBrowser() {}
   virtual Script cancel() {}
   virtual Script saveImage() {}
   virtual Script clearPreview() {}
   virtual Script loadPreview() {}
   virtual Script setupPreviewWindow() {}
   virtual Script launchImageEditor() {}
};

class  ImageBuilderGui : public GuiControl {
  public:
   virtual Script onSleep() {}
};

class  t2dSceneGraph : public SimSet {
  public:
   virtual Script getShowCollisionBounds() {}
   virtual Script getShowWorldLimits() {}
   virtual Script getShowLinkPoints() {}
   virtual Script getShowBoundingBoxes() {}
   virtual Script setShowCollisionBounds() {}
   virtual Script setShowWorldLimits() {}
   virtual Script setShowLinkPoints() {}
   virtual Script setShowBoundingBoxes() {}
   virtual Script getSuperClass() {}
   virtual Script setSuperClass() {}
   virtual Script getClass() {}
   virtual Script setClass() {}
   virtual Script getCameraSizeY() {}
   virtual Script getCameraSizeX() {}
   virtual Script setCameraSizeY() {}
   virtual Script setCameraSizeX() {}
   virtual Script getCameraPositionY() {}
   virtual Script getCameraPositionX() {}
   virtual Script setCameraPositionY() {}
   virtual Script setCameraPositionX() {}
   virtual Script endLevel() {}
   virtual Script addToLevel() {}
   virtual Script loadLevel() {}
   /*!  - Initialise Scene Graph. */
   virtual void initialise(containerBinSize, containerBinCount, useLayerSorting?, lastInFrontSorting?) {}
   /*!  - Add t2dSceneObject to Scene. */
   virtual void addToScene(t2dSceneObject) {}
   /*!  - Remove t2dSceneObject from Scene. */
   virtual void removeFromScene(t2dSceneObject) {}
   /*!  - Clear Scene of all t2dSceneObject objects. */
   virtual void clearScene([deleteObjects?]) {}
   /*!  - Sets the Layer Draw Order for Specified Object. */
   virtual bool setLayerDrawOrder(t2dSceneObject, orderCommand$ ) {}
   /*!  - Sets the Scene Draw Order for Specified Object. */
   virtual bool setSceneDrawOrder(t2dSceneObject, orderCommand$ ) {}
   /*!  - Apply a continuous force. */
   virtual void setConstantForce(forceX / forceY, [gravitic?]) {}
   /*!  - Apply a continuous polar force. */
   virtual void setConstantForcePolar(angle, force, [gravitic?]) {}
   /*! Gets the scene constant-force. */
   virtual string getConstantForce() {}
   /*! Stops any continuous force. */
   virtual void stopConstantForce() {}
   /*!  - Sets scene pause status. */
   virtual void setScenePause(status) {}
   /*! Gets scene pause status. */
   virtual bool getScenePause() {}
   /*!  - Sets physics limit FPS. */
   virtual void setScenePhysicsLimitFPS(fps) {}
   /*! Gets physics limit FPS. */
   virtual float getScenePhysicsLimitFPS() {}
   /*!  - Sets physics target FPS. */
   virtual void setScenePhysicsTargetFPS(fps) {}
   /*! Gets physics target FPS. */
   virtual float getScenePhysicsTargetFPS() {}
   /*!  - Sets physics maximum iterations. */
   virtual void setScenePhysicsMaxIterations(maxIterations) {}
   /*! Gets physics maximum iterations. */
   virtual int getScenePhysicsMaxIterations() {}
   /*!  - Sets physics FPS Active status. */
   virtual void setScenePhysicsFPSActive(status?) {}
   /*! Gets physics FPS Active status. */
   virtual bool getScenePhysicsFPSActive() {}
   /*!  - Loads a Scene from a Disk File. */
   virtual bool loadScene(file$) {}
   /*!  - Saves a Scene to a Disk File. */
   virtual bool saveScene(file$) {}
   /*! Gets the Scene Graph Time. */
   virtual float getSceneTime() {}
   /*! Gets the Scene Object-Count. */
   virtual int getSceneObjectCount() {}
   /*! Gets the selected Scene Object. */
   virtual int getSceneObject() {}
   /*! Gets the Scene Object-List. */
   virtual string getSceneObjectList() {}
   /*!  - Sets Debug On Mode(s). */
   virtual void setDebugOn(debugMask) {}
   /*!  - Gets the state of the debug mode */
   virtual bool getDebugOn(debug mode) {}
   /*!  - Sets Debug Off Mode(s). */
   virtual void setDebugOff(debugMask) {}
   /*!  - Picks objects intersecting point with optional group/layer masks. */
   virtual string pickPoint(x / y, [groupMask], [layerMask], [showInvisible?], [excludeObject] ) {}
   /*!  - Picks objects intersecting line with optional group/layer masks. */
   virtual string pickLine(start x / y, end x / y, [groupMask], [layerMask], [showInvisible?], [excludeObject] ) {}
   /*!  - Picks objects intersecting rectangle with optional group/layer masks. */
   virtual string pickRect(start x / y, end x / y, [groupMask], [layerMask], [showInvisible?], [excludeObject] ) {}
   /*!  - Picks objects intersecting circle with optional group/layer masks. */
   virtual string pickRadius(x / y, radius, [groupMask], [layerMask], [showInvisible?], [excludeObject] ) {}
   /*! Applies the field selected values of every object in the scene. */
   virtual void applyFieldSelectedValues() {}
   /*! Updates the field selected values of every object in the scene. */
   virtual void updateFieldSelectedValues() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   string class;
   /*!
    */
   string superclass;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderSceneGraph : public t2dSceneGraph {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderPreviewControl : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderStoryBoardFrameControl : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtAnimationName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  CreateAnimationWindow : public GuiControl {
  public:
};

class  GuiScriptNotifyCtrl : public GuiControl {
  public:

   /*! @name Callbacks
   @{ */
   /*!
    */
   bool onChildAdded;
   /*!
    */
   bool onChildRemoved;
   /*!
    */
   bool onChildResized;
   /*!
    */
   bool onParentResized;
   /*!
    */
   bool onResize;
   /*!
    */
   bool onLoseFirstResponder;
   /*!
    */
   bool onGainFirstResponder;
   /// @}


   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ABStoryBoardContainer : public GuiScriptNotifyCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationSourceScroll : public GuiScrollCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ABSourceImageContainer : public GuiScriptNotifyCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderChkUseAllFrames : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animationDatablockFrames : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animDBFrameCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animDBTimeCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animationDatablockTime : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animationDatablockCycleMode : public GuiPopUpMenuCtrlEx {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animDBRepeatCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animDBRandStartCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  animationDatablockRandomStart : public GuiPopUpMenuCtrlEx {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderAnimationControl : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ABDatablockPropertiesContainer : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderImageSceneWindow : public t2dSceneWindow {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  SourceImageCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationBuilderSelectImageWindow : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  AnimationEditorGUI : public GuiControl {
  public:
};

class  AnimationStoryboardWindow2D : public t2dSceneWindow {
  public:
   virtual Script onMouseUp() {}
   virtual Script onMouseDown() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseMove() {}
};

class  AnimationImageMapWindow2D : public t2dSceneWindow {
  public:
   virtual Script onMouseUp() {}
   virtual Script onMouseDown() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseMove() {}
};

class  ImageMapList {
  public:
   virtual Script onSelect() {}
};

class  AnimationBuilderImageList : public GuiListBoxCtrl {
  public:
   virtual Script onSelect() {}
};

class  AnimationBuilderPreviewSpeedSlider : public GuiSliderCtrl {
  public:
   virtual Script onMouseDragged() {}
};

class  AnimationBuilderPreviewSlider : public GuiSliderCtrl {
  public:
   virtual Script onMouseDragged() {}
};

class  previewAnimation {
  public:
   virtual Script onAnimationEnd() {}
   virtual Script onFrameChange() {}
};

class  AnimationBuilderUI : public GuiWindowCtrl {
  public:
   virtual Script refreshSourceImageList() {}
   virtual Script setupDatablockOptions() {}
   virtual Script onStartUp() {}
};

class  AnimationBuilder {
  public:
   virtual Script clearStoryboard() {}
   virtual Script populateAllFrames() {}
   virtual Script loadDefaultFrames() {}
   virtual Script generateName() {}
   virtual Script loadAnimation() {}
   virtual Script SelectImage() {}
   virtual Script useAllFrames() {}
   virtual Script refreshSelectionPreview() {}
   virtual Script populateSelectionList() {}
   virtual Script pausePreview() {}
   virtual Script stopPreview() {}
   virtual Script onPreviewSliderTimeMove() {}
   virtual Script onPreviewSliderMove() {}
   virtual Script setupPreviewSlider() {}
   virtual Script returnFromPreview() {}
   virtual Script hidePreviewControls() {}
   virtual Script showPreviewControls() {}
   virtual Script loadPreview() {}
   virtual Script createAnim() {}
   virtual Script destroyAnimation() {}
   virtual Script deleteAnimation() {}
   virtual Script editAnimation() {}
   virtual Script BuildAnimation() {}
   virtual Script Destroy() {}
   virtual Script purgeResources() {}
   virtual Script init() {}
};

class  OpenProjectButton : public GuiIconButtonCtrl {
  public:
   virtual Script onClick() {}
};

class  projectList : public GuiListBoxCtrl {
  public:
   virtual Script onDoubleClick() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  OpenProjectDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  templateListBox : public GuiPopUpMenuCtrlEx {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  newProjectNameText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  NewProjectDlg : public GuiControl {
  public:
};

class  LevelBuilderBaseTool : public SimObject {
  public:
   /*!  - Returns this tools display name */
   virtual string getToolName() {}
   /*!  - set the name associated with this tool */
   virtual void setToolName(string toolName) {}
   /*!  - Returns this tools associated texture */
   virtual string getToolTexture() {}
   /*!  - set the texture associated with this tool */
   virtual void setToolTexture(string - NO PATH - filename) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  LevelBuilderBaseEditTool : public LevelBuilderBaseTool {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  LevelBuilderCreateTool : public LevelBuilderBaseEditTool {
  public:
   virtual Script onObjectCreated() {}
   /*! sceneWindow, position */
   virtual int createObject() {}
   virtual void setAcquireCreatedObjects() {}
   virtual bool getAcquireCreatedObjects() {}
   /*! Sets the script class namespace to link the created object to. */
   virtual void setConfigDatablock() {}
   /*! Sets the script class namespace to link the created object to. */
   virtual void setClassName() {}
   /*! Sets the script super class namespace to link the created object to. */
   virtual void setSuperClassName() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  LevelBuilderPathTool : public LevelBuilderCreateTool {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorPathTool : public LevelBuilderPathTool {
  public:
};

class  LevelBuilderMountTool : public LevelBuilderBaseTool {
  public:
   virtual Script onFinishEdit() {}
   /*! Selects an object for editing. */
   virtual void editObject() {}
   /*! Applies changes and ends editing of an object. */
   virtual void finishEdit() {}
   /*! Dismounts an object. */
   virtual void dismountObject() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorMountTool : public LevelBuilderMountTool {
  public:
};

class  LevelBuilderChunkedSpriteTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the image map for the created chunked sprites. */
   virtual void setImageMap() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorChunkedSpriteTool : public LevelBuilderChunkedSpriteTool {
  public:
};

class  LevelBuilderAnimatedSpriteTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the animation for the created animated sprites. */
   virtual void setAnimation() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorAnimatedSpriteTool : public LevelBuilderAnimatedSpriteTool {
  public:
};

class  LevelBuilderScrollerTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the image map for the created scrollers. */
   virtual void setImageMap() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorScrollerTool : public LevelBuilderScrollerTool {
  public:
};

class  LevelBuilderTileMapTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the tile map file for the created tile maps. */
   virtual void setTileMap() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorTileMapTool : public LevelBuilderTileMapTool {
  public:
};

class  LevelBuilderParticleTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the effect file for the created particle effects. */
   virtual void setEffect() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorParticleTool : public LevelBuilderParticleTool {
  public:
};

class  LevelBuilder3DShapeTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the shape for the created 3D shapes. */
   virtual void setShape() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditor3DShapeTool : public LevelBuilder3DShapeTool {
  public:
};

class  LevelBuilderTriggerTool : public LevelBuilderCreateTool {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorTriggerTool : public LevelBuilderTriggerTool {
  public:
};

class  LevelBuilderSceneObjectTool : public LevelBuilderCreateTool {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorSceneObjectTool : public LevelBuilderSceneObjectTool {
  public:
};

class  LevelBuilderStaticSpriteTool : public LevelBuilderCreateTool {
  public:
   /*! Sets the image map for the created static sprites. */
   virtual void setImageMap() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorStaticSpriteTool : public LevelBuilderStaticSpriteTool {
  public:
};

class  LevelBuilderPathEditTool : public LevelBuilderBaseEditTool {
  public:
   /*! Selects an object for editing. */
   virtual void editObject() {}
   /*! Applies changes and ends editing of an object. */
   virtual void finishEdit() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorPathEditTool : public LevelBuilderPathEditTool {
  public:
};

class  LevelBuilderWorldLimitTool : public LevelBuilderBaseEditTool {
  public:
   /*! Selects an object for editing. */
   virtual void editObject() {}
   /*! Cancels editing of an object. */
   virtual void cancelEdit() {}
   /*! Applies changes and ends editing of an object. */
   virtual void finishEdit() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorWorldLimitTool : public LevelBuilderWorldLimitTool {
  public:
};

class  LevelBuilderCameraTool : public LevelBuilderBaseEditTool {
  public:
   virtual string getCameraPosition() {}
   virtual string getCameraSize() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorCameraTool : public LevelBuilderCameraTool {
  public:
};

class  LevelBuilderLinkPointTool : public LevelBuilderBaseTool {
  public:
   /*! Selects an object for editing. */
   virtual void editObject() {}
   /*! Applies changes and ends editing of an object. */
   virtual void finishEdit() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorLinkPointTool : public LevelBuilderLinkPointTool {
  public:
};

class  LevelBuilderPolyTool : public LevelBuilderBaseTool {
  public:
   /*! Selects an object for editing. */
   virtual void editObject() {}
   /*! Cancels editing of an object. */
   virtual void cancelEdit() {}
   /*! Applies changes and ends editing of an object. */
   virtual void finishEdit() {}
   virtual int getVertexCount() {}
   virtual string getScript() {}
   virtual void setPolyPrimitive(%numEdges) {}
   virtual string getLocalMousePosition() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorPolyTool : public LevelBuilderPolyTool {
  public:
};

class  LevelBuilderSelectionTool : public LevelBuilderBaseEditTool {
  public:
   virtual Script getPropertyFormName() {}
   /*! %tool.refreshWidgets */
   virtual void RefreshWidgets() {}
   virtual void addWidget(widget) {}
   virtual void setFullContainSelect(true/false) {}
   virtual bool getFullContainSelect() {}
   virtual void setUndoSelections(true/false) {}
   virtual bool getUndoSelections() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorSelectionTool : public LevelBuilderSelectionTool {
  public:
};

class  GuiMLTextCtrl : public GuiControl {
  public:
   virtual Script onURL() {}
   /*! Set the text contained in the control. */
   virtual void setText(string text) {}
   /*! Returns the text from the control, including ML. */
   virtual string getText() {}
   virtual void addText(string text, bool reformat) {}
   /*! Offset in characters to set cursor's position to. */
   virtual bool setCursorPosition(int newPos) {}
   /*! Scroll down to a specified tag. */
   virtual void scrollToTag(int tagID) {}
   /*! Scroll to the top of the text. */
   virtual void scrollToTop() {}
   /*! Scroll to the top of the text. */
   virtual void scrollToBottom() {}
   /*! forces the text control to reflow the text after new text is added, possibly resizing the control. */
   virtual void forceReflow() {}
   virtual void setAlpha() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int lineSpacing;
   /*!
    */
   bool allowColorChars;
   /*!
    */
   int maxChars;
   /*!
    */
   AudioProfile deniedSound;
   /*!
    */
   caseString text;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ToolHelpText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ToolHelpDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DShowGuidesToggle : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DShowCameraToggle : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DUndoSelectionsToggle : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ToolSettingsHeader : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LVLOptionsOKButton : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DLVLGridCheckX : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DLVLGridUnitX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DLVLGridCheckY : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DLVLGridUnitY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DGridColorControl : public GuiColorPickerCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DBGColorControl : public GuiColorPickerCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  EditorBackgroundColorCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GridSizeXCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GridSizeYCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DLVLShowGrid : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GridColorCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DesignResolutionCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DDesignResolutionXText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DDesignResolutionYText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GridSettingsHeader : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DFullContainToggle : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  SnapThresholdCaption : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  T2DSnapThresholdText : public GuiTextEditCtrl {
  public:
};

class  GuiTabPageCtrl : public GuiTextCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelEditorOptionsPage : public GuiTabPageCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LBPlayWindowPauseBtn : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LBPlayWindowStopBtn : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LBPlayWindowToolbarCaption : public GuiTextCtrl {
  public:
};

class  GuiStackControl : public GuiControl {
  public:
   /*!  - Restacks controls it owns */
   virtual void updateStack() {}

   /*! @name Stacking
   @{ */
   /*!
    */
   enumval StackingType;
   /*!
    */
   enumval HorizStacking;
   /*!
    */
   enumval VertStacking;
   /*!
    */
   int Padding;
   /// @}


   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LBPlayWindowCtrlStack : public GuiStackControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LBPlayLevel : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  levelBuilderViewContainer : public GuiControl {
  public:
};

class  GuiFrameSetCtrl : public GuiControl {
  public:
   virtual void frameBorder(int index, bool enable=true) {}
   virtual void frameMovable(int index, bool enable=true) {}
   virtual void frameMinExtent(int index, int w, int h) {}
   virtual void addColumn() {}
   virtual void addRow() {}
   virtual void removeColumn() {}
   virtual void removeRow() {}
   virtual int getColumnCount() {}
   virtual int getRowCount() {}
   virtual int getColumnOffset(int index) {}
   virtual int getRowOffset(int index) {}
   virtual void setColumnOffset(int index, int offset) {}
   virtual void setRowOffset(int index, int offset) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   intList columns;
   /*!
    */
   intList rows;
   /*!
    */
   int borderWidth;
   /*!
    */
   ColorI borderColor;
   /*!
    */
   enumval borderEnable;
   /*!
    */
   enumval borderMovable;
   /*!
    */
   bool autoBalance;
   /*!
    */
   int fudgeFactor;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  levelBuilderContentFrame : public GuiFrameSetCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  LevelBuilderToolBar : public GuiStackControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GG_Logo : public GuiBitmapCtrl {
  public:
};

class  GuiTickCtrl : public GuiControl {
  public:
   /*!  - This will set this object to either be processing ticks or not */
   virtual void setProcessTicks( [tick = true] ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiMenuBar : public GuiTickCtrl {
  public:
   virtual Script onMenuItemSelect() {}
   /*!  - clears all the menus from the menu bar. */
   virtual void clearMenus() {}
   /*!  - Sets the menu rendering margins: horizontal, vertical, bitmap spacing. */
   virtual void setMenuMargins(S32 horizontalMargin, S32 verticalMargin, S32 bitmapToTextSpacing) {}
   /*!  - adds a new menu to the menu bar. */
   virtual void addMenu(string menuText, int menuId) {}
   /*!  - adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id. */
   virtual void addMenuItem(string menu, string menuItemText, int menuItemId, string accelerator = NULL, int checkGroup = -1) {}
   /*!  - sets the menu item to enabled or disabled based on the enable parameter.  The specified menu and menu item can either be text or ids. */
   virtual void setMenuItemEnable(string menu, string menuItem, bool enabled) {}
   /*!  - sets the menu bitmap index for the check mark image. */
   virtual void setCheckmarkBitmapIndex(S32 bitmapindex) {}
   /*!  - sets the menu item bitmap to a check mark, which by default is the first element in the bitmap array (although this may be changed with setCheckmarkBitmapIndex()).  Any other menu items in the menu with the same check group become unchecked if they are checked. */
   virtual void setMenuItemChecked(string menu, string menuItem, bool checked) {}
   /*!  - sets the text of the specified menu to the new string. */
   virtual void setMenuText(string menu, string newMenuText) {}
   /*!  - sets the bitmap index for the menu and toggles rendering only the bitmap. */
   virtual void setMenuBitmapIndex(string menu, S32 bitmapindex, bool bitmaponly, bool drawborder) {}
   /*!  - sets the whether or not to display the specified menu. */
   virtual void setMenuVisible(string menu, bool visible) {}
   /*!  - sets the text of the specified menu item to the new string. */
   virtual void setMenuItemText(string menu, string menuItem, string newMenuItemText) {}
   /*!  - sets the specified menu item to be either visible or not. */
   virtual void setMenuItemVisible(string menu, string menuItem, bool isVisible) {}
   /*!  - sets the specified menu item bitmap index in the bitmap array.  Setting the item's index to -1 will remove any bitmap. */
   virtual void setMenuItemBitmap(string menu, string menuItem, int bitmapIndex) {}
   /*!  - removes the specified menu item from the menu. */
   virtual void removeMenuItem(string menu, string menuItem) {}
   /*!  - removes all the menu items from the specified menu. */
   virtual void clearMenuItems(string menu) {}
   /*!  - removes the specified menu from the menu bar. */
   virtual void removeMenu(string menu) {}
   /*!  - Sets the given menu item to be a submenu */
   virtual void setMenuItemSubmenuState(string menu, string menuItem, bool isSubmenu) {}
   /*!  - adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id. */
   virtual void addSubmenuItem(string menu, string menuItem, string submenuItemText, int submenuItemId, string accelerator = NULL, int checkGroup = -1) {}
   /*!  - removes all the menu items from the specified submenu. */
   virtual void clearSubmenuItems(string menu, string menuItem) {}
   /*!  - sets the menu item bitmap to a check mark, which by default is the first element in the bitmap array (although this may be changed with setCheckmarkBitmapIndex()).  Any other menu items in the menu with the same check group become unchecked if they are checked. */
   virtual void setSubmenuItemChecked(string menu, string menuItem, string submenuItemText, bool checked) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int Padding;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  levelBuilderMenu : public GuiMenuBar {
  public:
};

class  GuiRolloutCtrl : public GuiControl {
  public:
   virtual bool isExpanded() {}
   virtual void collapse() {}
   virtual void expand() {}
   virtual void instantCollapse() {}
   virtual void instantExpand() {}
   virtual void sizeToContents() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString Caption;
   /*!
    */
   Point2I Margin;
   /*!
    */
   int DefaultHeight;
   /*!
    */
   bool DragSizable;
};

class  ObjectLibraryBaseClass : public GuiRolloutCtrl {
  public:
   virtual Script Destroy() {}
   virtual Script clearSelections() {}
};

class  LBOTAnimatedSprite : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCAnimatedSprite {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  GuiDynamicCtrlArrayControl : public GuiControl {
  public:
   /*! Forces the child controls to recalculate */
   virtual void refresh() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int colCount;
   /*!
    */
   int colSize;
   /*!
    */
   int rowSize;
   /*!
    */
   int rowSpacing;
   /*!
    */
   int colSpacing;
};

class  ObjectLibraryBaseType : public GuiDynamicCtrlArrayControl {
  public:
   virtual Script AddT2DObject() {}
   virtual Script ClearLibrary() {}
   virtual Script CreateContent() {}
};

class  LBOTOther : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCOther {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBOTParticleEffect : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCParticleEffect {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBOTScroller : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCScroller {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBOTStaticSprite : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCStaticSprite {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBOT3DShape : public ObjectLibraryBaseClass {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBC3DShape {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBOTTileMap {
  public:
   virtual Script onContentMessage() {}
   virtual Script Destroy() {}
   virtual Script onSleep() {}
   virtual Script refresh() {}
   virtual Script onWake() {}
};

class  LBCTileMap {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  QuickEditCheckBox {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  QuickEditColorTextEdit {
  public:
   virtual Script setProperty() {}
   virtual Script updateProperty() {}
};

class  QuickEditColorPicker {
  public:
   virtual Script updateProperty() {}
   virtual Script onColorPicked() {}
   virtual Script setProperty() {}
   virtual Script onWake() {}
};

class  UndoDynamicFieldQuickEdit {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  DynamicFieldTextEdit {
  public:
   virtual Script updateProperty() {}
};

class  LBQuickEditDeleteFieldButton {
  public:
   virtual Script deleteField() {}
};

class  LBQuickEditAddFieldButton {
  public:
   virtual Script addField() {}
};

class  LBQuickEditDynamicFieldStack {
  public:
   virtual Script deleteChildren() {}
   virtual Script setProperty() {}
   virtual Script createAddDynamicField() {}
   virtual Script createDynamicField() {}
};

class  LBQuickEditHideableStack {
  public:
   virtual Script addControlDependency() {}
   virtual Script updateFields() {}
   virtual Script setProperty() {}
};

class  UndoLRQuickEdit {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  QuickEditLeftRightButton {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  QuickEditLeftRightEditButton {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  QuickEditEnumList {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  QuickEditMaskButton {
  public:
   virtual Script updateProperty() {}
};

class  QuickEditMaskStack {
  public:
   virtual Script setProperty() {}
};

class  UndoQuickEdit {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  QuickEdit {
  public:
   virtual Script addUndo() {}
   virtual Script getObjectProperty() {}
   virtual Script setObjectProperty() {}
};

class  QuickEditField {
  public:
   virtual Script addUndo() {}
   virtual Script setObjectValue() {}
   virtual Script getObjectValue() {}
   virtual Script updateProperty() {}
};

class  LBQuickEditRolloutStack {
  public:
   virtual Script setProperty() {}
};

class  LBQuickEditRollout {
  public:
   virtual Script updateSpatial() {}
};

class  QuickEditT2DList {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  QuickEditTextEdit {
  public:
   virtual Script updateProperty() {}
   virtual Script setProperty() {}
};

class  LBQuickEditContent {
  public:
   virtual Script createCheckBox() {}
   virtual Script createColorPicker() {}
   virtual Script createDynamicFieldStack() {}
   virtual Script createHideableStack() {}
   virtual Script createLeftRight() {}
   virtual Script createLeftRightEdit() {}
   virtual Script createEnumList() {}
   virtual Script createMask() {}
   virtual Script sizeStack() {}
   virtual Script addStatusCheck() {}
   virtual Script addProperty() {}
   virtual Script syncQuickEdit() {}
   virtual Script updateSpatial() {}
   virtual Script updateFields() {}
   virtual Script onContentMessage() {}
   virtual Script createRolloutStack() {}
   virtual Script createT2DDatablockList() {}
   virtual Script createTextEdit() {}
   virtual Script createTextEdit2() {}
   virtual Script createTextEdit3() {}
};

class  LBQEAnimatedSprite {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LevelBuilderParticleEditTool {
  public:
   virtual Script onEffectRelinquished() {}
   virtual Script onEffectAcquired() {}
};

class  LBParticleEditToolProperties {
  public:
   virtual Script SaveForm() {}
};

class  LBQEParticleEffect {
  public:
   virtual Script CreateForm() {}
};

class  LBQEPath {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQESceneGraph {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQESceneObject {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQESceneObjectGroup {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQESceneObjectSet {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQEScroller {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQEShape3D {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQEStaticSprite {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQETrigger {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LevelBuilderSceneView {
  public:
   virtual Script onControlDropped() {}
   virtual Script onMouseWheelUp() {}
   virtual Script onMouseWheelDown() {}
   virtual Script onRightMouseDragged() {}
   virtual Script onRightMouseDown() {}
   virtual Script onAdd() {}
   virtual Script onContentMessage() {}
};

class  LBSceneWindow {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LevelBuilderScriptClassLinkMenu {
  public:
   virtual Script updateClassList() {}
   virtual Script onWake() {}
   virtual Script onSelect() {}
};

class  LevelBuilderClassConfigLink {
  public:
   virtual Script onContentMessage() {}
};

class  LBSuperClassNamespaceLink {
  public:
   virtual Script CreateForm() {}
};

class  LBClassNamespaceLink {
  public:
   virtual Script CreateForm() {}
};

class  SBCreateTrash : public GuiIconButtonCtrl {
  public:
   virtual Script onControlDropped() {}
};

class  LBContentManagementToolBar {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  ObjectBrowserItem {
  public:
   virtual Script onDoubleClick() {}
   virtual Script createDraggingControl() {}
   virtual Script onMouseDragged() {}
   virtual Script onClick() {}
   virtual Script onMouseEnter() {}
   virtual Script onMouseLeave() {}
};

class  LBSideBarCreateMessaging : public GuiStackControl {
  public:
   virtual Script sizeStack() {}
   virtual Script onContentMessage() {}
};

class  LBSideBarCreate {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LevelBuilderDatablockLinkMenu : public GuiPopUpMenuCtrlEx {
  public:
   virtual Script updateDatablockList() {}
   virtual Script onWake() {}
   virtual Script onSelect() {}
};

class  LevelBuilderDatablockConfigLink : public GuiControl {
  public:
   virtual Script onContentMessage() {}
};

class  LBClassConfigLink {
  public:
   virtual Script CreateForm() {}
   virtual Script SaveForm() {}
};

class  LBDatablockConfigLink {
  public:
   virtual Script CreateForm() {}
};

class  LevelBuilderHistoryView : public GuiListBoxCtrl {
  public:
   virtual Script refresh() {}
   virtual Script clear() {}
   virtual Script onDoubleClick() {}
   virtual Script addUndo() {}
   virtual Script onContentMessage() {}
   virtual Script onWake() {}
};

class  LBHistoryView {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LBProjectSideBar {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LBQuickEditClass : public GuiStackControl {
  public:
   virtual Script createBaseStack() {}
   virtual Script findInCache() {}
   virtual Script addToCache() {}
   virtual Script syncQuickEdit() {}
   virtual Script clearCache() {}
   virtual Script clearQuickEdit() {}
   virtual Script sizeStack() {}
   virtual Script onContentMessage() {}
};

class  LBQuickEdit {
  public:
   virtual Script SaveContent() {}
   virtual Script CreateContent() {}
};

class  LevelBuilderSceneTreeView : public GuiTreeViewCtrl {
  public:
   virtual Script onRemoveSelection() {}
   virtual Script onAddSelection() {}
   virtual Script onUnSelect() {}
   virtual Script onSelect() {}
   virtual Script onWake() {}
   virtual Script onContentMessage() {}
};

class  LBSceneTreeView {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  sideBarContentContainer : public GuiScriptNotifyCtrl {
  public:
   virtual Script onParentResized() {}
   virtual Script onResize() {}
   virtual Script sizeContentsToFit() {}
   virtual Script onContentMessage() {}
};

class  LBSideBarContent {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LevelBuilderToolProperties {
  public:
   virtual Script onContentMessage() {}
};

class  LBToolProperties {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  LevelBuilderSelectionToolProperties {
  public:
   virtual Script setGridSnap() {}
   virtual Script setFullContainSelect() {}
   virtual Script onContentMessage() {}
};

class  LBSelectionToolProperties {
  public:
   virtual Script SaveForm() {}
   virtual Script CreateForm() {}
};

class  UndoPasteAction {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  LevelBuilderToolManager {
  public:
   virtual Script updateConfigDatablockLink() {}
   virtual Script updateSuperClassLink() {}
   virtual Script updateClassLink() {}
   virtual Script setCreateTool() {}
   virtual Script setTool() {}
   virtual Script destroyTools() {}
   virtual Script initializeTools() {}
   virtual Script setToolPropertiesOnBar() {}
   virtual Script addToolToBar() {}
   virtual Script addButtonToBar() {}
   virtual Script onRemove() {}
};

class  LevelBuilderBase : public GuiScriptNotifyCtrl {
  public:
   virtual Script onResize() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileMapBrush : public ScriptObject {
  public:
};

class  t2dSceneObject : public SimObject {
  public:
   virtual Script moveBackwardInLayer() {}
   virtual Script moveForwardInLayer() {}
   virtual Script getSuperClass() {}
   virtual Script setSuperClass() {}
   virtual Script getClass() {}
   virtual Script setClass() {}
   virtual Script getPathFollowMode() {}
   virtual Script setPathFollowMode() {}
   virtual Script getPathLoops() {}
   virtual Script setPathLoops() {}
   virtual Script getPathOrient() {}
   virtual Script setPathOrient() {}
   virtual Script getPathMoveForward() {}
   virtual Script setPathMoveForward() {}
   virtual Script getPathSpeed() {}
   virtual Script setPathSpeed() {}
   virtual Script getPathEndNode() {}
   virtual Script setPathEndNode() {}
   virtual Script getPathStartNode() {}
   virtual Script setPathStartNode() {}
   virtual Script getPersistent() {}
   virtual Script setPersistent() {}
   virtual Script setWorldLimitCallback() {}
   virtual Script getWorldLimitCallback() {}
   virtual Script setWorldLimitMaxY() {}
   virtual Script getWorldLimitMaxY() {}
   virtual Script setWorldLimitMaxX() {}
   virtual Script getWorldLimitMaxX() {}
   virtual Script setWorldLimitMinY() {}
   virtual Script getWorldLimitMinY() {}
   virtual Script setWorldLimitMinX() {}
   virtual Script getWorldLimitMinX() {}
   virtual Script setWorldLimitMode() {}
   virtual Script getWorldLimitMode() {}
   /*!  - Add to SceneGraph. */
   virtual void addToScene(t2dSceneGraph) {}
   /*! Remove from SceneGraph. */
   virtual void removeFromScene() {}
   /*!  - Sets the objects enabled status. */
   virtual void setEnabled(status?) {}
   /*! Gets the objects enabled status. */
   virtual bool getEnabled() {}
   /*!  - Sets the objects visible status. */
   virtual void setVisible(status?) {}
   /*! Gets the objects visible status. */
   virtual bool getVisible() {}
   /*!  - Sets the objects paused status. */
   virtual void setPaused(status?) {}
   /*! Gets the objects paused status. */
   virtual bool getPaused() {}
   /*! Gets the objects Child status. */
   virtual bool getIsChild() {}
   /*!  - Sets the objects area. */
   virtual void setArea(x1 / y1 / x2 / y2) {}
   /*! Gets the current area. */
   virtual string getArea() {}
   /*! Gets the current area minimum. */
   virtual string getAreaMin() {}
   /*! Gets the current area maximum. */
   virtual string getAreaMax() {}
   /*!  - Sets the objects position. */
   virtual void setPosition(x / y) {}
   /*! Gets the current position. */
   virtual string getPosition() {}
   /*! Sets Objects Position X-Component. */
   virtual void setPositionX() {}
   /*! Sets Objects Position Y-Component. */
   virtual void setPositionY() {}
   /*! Gets Objects Position X-Component. */
   virtual float getPositionX() {}
   /*! Gets Objects Position Y-Component. */
   virtual float getPositionY() {}
   /*!  - Sets the objects rotation. */
   virtual void setRotation(rotation) {}
   /*! Gets the current rotation. */
   virtual float getRotation() {}
   /*!  - Sets the objects Mount rotation. */
   virtual void setMountRotation(mountRotation) {}
   /*! Gets the Mount Rotation. */
   virtual float getMountRotation() {}
   /*!  - Sets Horizontal Flipping. */
   virtual void setFlipX(flipX) {}
   /*!  - Sets Vertical Flipping. */
   virtual void setFlipY(flipY) {}
   /*!  - Gets Horizontal Flipping. */
   virtual bool getFlipX() {}
   /*!  - Gets Vertical Flipping. */
   virtual bool getFlipY() {}
   /*!  - Sets Flipping for each axis. */
   virtual void setFlip(flipX?, flipY?) {}
   /*! Gets the Flip for each axis. */
   virtual string getFlip() {}
   /*!  - Sets the objects size. */
   virtual void setSize(width [/ height]) {}
   /*! Gets the objects size. */
   virtual string getSize() {}
   /*! Sets Objects Size X-Component. */
   virtual void setSizeX() {}
   /*! Sets Objects Size Y-Component. */
   virtual void setSizeY() {}
   /*! Gets Objects Size X-Component. */
   virtual float getSizeX() {}
   /*! Gets Objects Size Y-Component. */
   virtual float getSizeY() {}
   /*! Sets Objects Width. */
   virtual void setWidth() {}
   /*! Sets Objects Height. */
   virtual void setHeight() {}
   /*! Gets Objects Width. */
   virtual float getWidth() {}
   /*! Gets Objects Height. */
   virtual float getHeight() {}
   /*!  - Sets the objects auto-rotation speed. */
   virtual void setAutoRotation(autoRotationSpeed) {}
   /*! Gets the objects Auto-Rotation. */
   virtual float getAutoRotation() {}
   /*!  - Sets the objects auto mount-rotation speed. */
   virtual void setAutoMountRotation(autoMountRotationSpeed) {}
   /*! Gets the objects Auto Mount-Rotation. */
   virtual float getAutoMountRotation() {}
   /*!  - Sets the object to have 'forward' movement only. */
   virtual void setForwardMovementOnly(forwardMovementOnly?) {}
   /*! Gets the object 'forward' movement only status. */
   virtual bool getForwardMovementOnly() {}
   /*!  - Sets the object 'forward' speed. */
   virtual void setForwardSpeed(forwardSpeed) {}
   /*!  - Sets the objects position-target. */
   virtual void setPositionTarget(positionTarget, [autoStop?], [callback?], [snap?], [targetMargin] ) {}
   /*! Removes the objects position-target. */
   virtual void setPositionTargetOff() {}
   /*!  - Sets the objects rotation-target. */
   virtual void setRotationTarget(rotationTarget, [autoStop?], [callback?], [snap?], [targetMargin] ) {}
   /*! Removes the objects rotation-target. */
   virtual void setRotationTargetOff() {}
   /*!  - Moves-To/Sets the objects position-target. */
   virtual void moveTo(positionTarget, linearSpeed, [autoStop?], [callback?], [snap?], [targetMargin] ) {}
   /*!  - Rotates-To/Sets the objects rotation-target. */
   virtual void rotateTo(rotationTarget, angularSpeed, [autoStop?], [callback?], [snap?], [targetMargin] ) {}
   /*!  - Sets the collision check directions. */
   virtual void setCollisionActive(send, receive) {}
   /*! Sets the collision active send status. */
   virtual void setCollisionActiveSend() {}
   /*! Gets the collision active send status. */
   virtual bool getCollisionActiveSend() {}
   /*! Sets the collision active receive status. */
   virtual void setCollisionActiveReceive() {}
   /*! Gets the collision active receive status. */
   virtual bool getCollisionActiveReceive() {}
   /*! Gets the collision physics send status. */
   virtual void setCollisionPhysicsSend() {}
   /*! Gets the collision physics send status. */
   virtual bool getCollisionPhysicsSend() {}
   /*! Sets the collision physics receive status. */
   virtual void setCollisionPhysicsReceive() {}
   /*! Gets the collision physics receive status. */
   virtual bool getCollisionPhysicsReceive() {}
   /*! Gets the collision active directions. */
   virtual string getCollisionActive() {}
   /*!  - Sets the collision physics directions. */
   virtual void setCollisionPhysics(send, receive) {}
   /*! Gets the collision physics directions. */
   virtual string getCollisionPhysics() {}
   /*!  - Sets the collision masks. */
   virtual void setCollisionMasks(groupMask, [layerMask]) {}
   /*! Gets the collision group/layer masks. */
   virtual string getCollisionMasks() {}
   /*!  - Sets the collision masks against a specific object. */
   virtual void setCollisionAgainst(t2dSceneObject, [clearMasks?]) {}
   /*!  - Sets the collision group(s). */
   virtual void setCollisionGroups(groups$) {}
   /*!  - Sets the collision layers(s). */
   virtual void setCollisionLayers(layers$) {}
   /*!  - Gets the collision layers. */
   virtual string getCollisionLayers() {}
   /*!  - Gets the collision groups. */
   virtual string getCollisionGroups() {}
   /*!  - Sets the Collision-Circle superscribed mode. */
   virtual void setCollisionCircleSuperscribed(superscribeMode?) {}
   virtual bool getCollisionCircleSuperscribed() {}
   /*!  - Sets the Collision-Detection mode. */
   virtual void setCollisionDetection(detectionMode) {}
   /*! Get the Collision-Detection mode. */
   virtual string getCollisionDetection() {}
   /*!  - Sets the Collision-Response mode. */
   virtual void setCollisionResponse(responseMode) {}
   /*! Get the Collision-Response mode. */
   virtual string getCollisionResponse() {}
   /*!  - Sets the Objects Maximum Collision Iterations. */
   virtual void setCollisionMaxIterations(iterations?) {}
   /*! Gets the Objects Maximum Collision Iterations */
   virtual int getCollisionMaxIterations() {}
   /*!  - Sets the collision callback status. */
   virtual void setCollisionCallback(status?) {}
   /*! Gets the collision callback status. */
   virtual bool getCollisionCallback() {}
   /*!  - Sets the collision suppress status. */
   virtual void setCollisionSuppress(status?) {}
   /*! Gets the collision suppress status. */
   virtual bool getCollisionSuppress() {}
   /*!  - Sets the collision-polygon scale. */
   virtual void setCollisionPolyScale(widthScale / [heightScale]) {}
   /*! Gets the collision-polygon Scale. */
   virtual string getCollisionPolyScale() {}
   /*!  - Sets the collision-circle scale. */
   virtual void setCollisionCircleScale(scale) {}
   /*! Gets the collision-circle Scale. */
   virtual float getCollisionCircleScale() {}
   /*!  - Sets the objects layer (0-31). */
   virtual void setLayer(layer) {}
   /*! Gets the Objects Layer. */
   virtual int getLayer() {}
   /*!  - Sets the objects group (0-31). */
   virtual void setGraphGroup(group) {}
   /*! Gets the Objects Group. */
   virtual int getGraphGroup() {}
   /*!  - Sets Primitive Collision Polygon. */
   virtual void setCollisionPolyPrimitive(poly-count) {}
   /*!  - Sets Custom Collision Polygon. */
   virtual void setCollisionPolyCustom(poly-count, poly-Definition$) {}
   /*! Gets Collision Poly Edge Count. */
   virtual int getCollisionPolyCount() {}
   /*! Gets Collision Poly. */
   virtual string getCollisionPoly() {}
   /*!  - Sets Collision Material. */
   virtual void setCollisionMaterial(collisionMaterial) {}
   /*!  - Set World Limit. */
   virtual void setWorldLimit(limitMode, [minX / minY / maxX / maxY], [callback?]) {}
   /*! Get the World Limit. */
   virtual string getWorldLimit() {}
   /*!  - Set Objects' Lifetime. */
   virtual void setLifetime(lifetime) {}
   /*! Gets the Objects Lifetime. */
   virtual float getLifetime() {}
   /*!  - Apply an instantaneous force. */
   virtual void setImpulseForce(impulseForceX / impulseForceY, [gravitic?]) {}
   /*!  - Apply an instantaneous polar force. */
   virtual void setImpulseForcePolar(angle, force, [gravitic?]) {}
   virtual void setConstantForceX(forceX) {}
   virtual void setConstantForceY(forceY) {}
   virtual void setGraviticConstantForce(gravitic) {}
   virtual float getConstantForceX() {}
   virtual float getConstantForceY() {}
   virtual bool getGraviticConstantForce() {}
   /*!  - Apply a continuous force. */
   virtual void setConstantForce(forceX / forceY, [gravitic?]) {}
   /*!  - Apply a continuous polar force. */
   virtual void setConstantForcePolar(angle, force, [gravitic?]) {}
   /*! Stops any continuous force. */
   virtual void stopConstantForce() {}
   /*! Gets the objects constant-force. */
   virtual string getConstantForce() {}
   /*! Sets the objects force-scale. */
   virtual void setForceScale() {}
   /*! Gets the objects force-scale. */
   virtual float getForceScale() {}
   /*! Set Object at Rest. */
   virtual void setAtRest() {}
   /*! Gets whether the Object is at Rest. */
   virtual bool getAtRest() {}
   /*!  - Set Object Friction. */
   virtual void setFriction(friction) {}
   /*!  - Set Object Restitution. */
   virtual void setRestitution(restitution) {}
   /*!  - Set Object Density. */
   virtual void setDensity(density) {}
   /*!  - Sets Auto Mass/Inertia Calculations. */
   virtual void setAutoMassInertia(status?) {}
   /*!  - Set Object Mass. */
   virtual void setMass(mass) {}
   /*!  - Set Object Inertial Moment. */
   virtual void setInertialMoment(inertial Moment) {}
   /*!  - Set Objects Damping. */
   virtual void setDamping(damping) {}
   /*! Set the Object Immovable. */
   virtual void setImmovable() {}
   /*! Gets the immovable status. */
   virtual bool getImmovable() {}
   /*! Gets Object Friction. */
   virtual float getFriction() {}
   /*! Gets Object Restitution. */
   virtual float getRestitution() {}
   /*! Gets Object Density. */
   virtual float getDensity() {}
   /*! Gets Object Auto Mass/Inertia Mode. */
   virtual bool getAutoMassInertia() {}
   /*! Gets Object Mass. */
   virtual float getMass() {}
   /*! Gets Object Inertial Moment. */
   virtual float getInertialMoment() {}
   /*! Gets Object Damping. */
   virtual float getDamping() {}
   /*! Sets Objects Linear Velocity. */
   virtual void setLinearVelocity() {}
   /*!  - Sets Objects Linear Velocity using Polar-speed. */
   virtual void setLinearVelocityPolar(angle, speed) {}
   /*! Gets Objects Linear Velocity using Polar angle/speed. */
   virtual string getLinearVelocityPolar() {}
   /*! Gets Object Linear Velocity. */
   virtual string getLinearVelocity() {}
   /*! Gets Object Linear Velocity X. */
   virtual float getLinearVelocityX() {}
   /*! Gets Object Linear Velocity Y. */
   virtual float getLinearVelocityY() {}
   /*! Sets Objects Linear Velocity X-Component. */
   virtual void setLinearVelocityX() {}
   /*! Sets Objects Linear Velocity Y-Component. */
   virtual void setLinearVelocityY() {}
   /*! Sets Objects Angular Velocity. */
   virtual void setAngularVelocity() {}
   /*! Gets Object Angular Velocity. */
   virtual float getAngularVelocity() {}
   /*!  - Set Object Min Linear Velocity. */
   virtual void setMinLinearVelocity(minLinearVelocity) {}
   /*! Gets the Objects Min Linear Velocity. */
   virtual float getMinLinearVelocity() {}
   /*!  - Set Object Min Angular Velocity. */
   virtual void setMinAngularVelocity(minAngularVelocity) {}
   /*! Gets the Objects Min Angular Velocity. */
   virtual float getMinAngularVelocity() {}
   /*!  - Set Object Max Linear Velocity. */
   virtual void setMaxLinearVelocity(maxLinearVelocity) {}
   /*! Gets the Objects Max Linear Velocity. */
   virtual float getMaxLinearVelocity() {}
   /*!  - Set Object Max Angular Velocity. */
   virtual void setMaxAngularVelocity(maxAngularVelocity) {}
   /*! Gets the Objects Max Angular Velocity. */
   virtual float getMaxAngularVelocity() {}
   /*!  - Sets the Objects Physics Suppress Status. */
   virtual void setPhysicsSuppress(status?) {}
   /*! Gets the Objects Physics Suppress Status. */
   virtual bool getPhysicsSuppress() {}
   /*!  - Enables blending. */
   virtual void setBlendingStatus(blendStatus) {}
   virtual void setSrcBlendFactor(srcBlend) {}
   virtual void setDstBlendFactor(dstBlend) {}
   /*!  - Returns the blending status. */
   virtual bool getBlendingStatus() {}
   /*!  - Returns the src blend factor. */
   virtual string getSrcBlendFactor() {}
   /*!  - Returns the dst blend factor. */
   virtual string getDstBlendFactor() {}
   /*!  - Sets the Rendering Blend Options. */
   virtual void setBlending(blendStatus?, [srcBlendFactor], [dstBlendFactor]) {}
   /*! Gets the Rendering Blend Options. */
   virtual string getBlending() {}
   /*!  - Sets the Rendering Blend Colour. */
   virtual void setBlendColour(blend R / G / B / [A]) {}
   /*!  - Sets the Rendering Blend Color. */
   virtual void setBlendColor(blend R / G / B / [A]) {}
   /*!  - Sets the Rendering Alpha (transparency). */
   virtual void setBlendAlpha(alpha) {}
   /*! Gets the Rendering Blend Colour. */
   virtual string getBlendColour() {}
   /*! Gets the Rendering Blend Colour. */
   virtual string getBlendColor() {}
   /*! Gets the Rendering Alpha (transparency). */
   virtual float getBlendAlpha() {}
   /*!  - Returns local-point for object. */
   virtual string getLocalPoint(X / Y) {}
   /*!  - Returns world-point from object. */
   virtual string getWorldPoint(X / Y) {}
   /*!  - Returns whether point intersects with object. */
   virtual bool getIsPointInObject(X / Y) {}
   /*!  - Sets Debug On Mode(s). */
   virtual void setDebugOn(debugMode) {}
   /*!  - Sets Debug Off Mask. */
   virtual void setDebugOff(debugMask) {}
   /*! getAttachedToPath */
   virtual int getAttachedToPath() {}
   /*!  - Mounts onto a specified object. */
   virtual int mount(t2dSceneObject, [offsetX / offsetY], [mountForce], [trackRotation?], [sendToMount?], [ownedByMount?], [inheritAttributes?] ) {}
   /*! Returns the mount force. */
   virtual float getMountForce() {}
   /*! Sets the mount force. */
   virtual void setMountForce() {}
   /*! Returns the track rotation status. */
   virtual bool getMountTrackRotation() {}
   /*! Sets the track rotation status. */
   virtual void setMountTrackRotation() {}
   /*! Returns the mount owned status. */
   virtual bool getMountOwned() {}
   /*! Sets the mount owned status. */
   virtual void setMountOwned() {}
   /*! Returns the inherit attributes status. */
   virtual bool getMountInheritAttributes() {}
   /*! Sets the mount inherit attributes status. */
   virtual void setMountInheritAttributes() {}
   /*! Dismounts object. */
   virtual void dismount() {}
   /*! Get 'Is Mounted' Status. */
   virtual bool getIsMounted() {}
   /*! Get Parent we're mounted-to. */
   virtual int getMountedParent() {}
   /*!  - Adds a Link-Point. */
   virtual int addLinkPoint([offsetX / offsetY]) {}
   /*!  - Removes a Link-Point. */
   virtual void removeLinkPoint(mountID) {}
   /*! Removes all Link-Points. */
   virtual void removeAllLinkPoints() {}
   /*!  - Sets a Link-Point Position. */
   virtual void setLinkPoint(mountID, offsetX / offsetY) {}
   /*! Safely deletes object. */
   virtual void safeDelete() {}
   /*!  - Gets a Link-Point. */
   virtual string getLinkPoint(mountID) {}
   /*! Gets the Link-Point Count. */
   virtual int getLinkCount() {}
   /*!  - Clone Object. */
   virtual int clone(copyFields?) {}
   /*!  - Copies one object from another. */
   virtual bool copy(t2dSceneObject, [copyFields?]) {}
   /*!  - Loads a copy of the object from disk. */
   virtual bool loadCopy(objectFile$) {}
   /*!  - Saves a copy of the object to disk. */
   virtual bool saveCopy(objectFile$) {}
   /*!  - Starts a periodic timer for this object. */
   virtual void setTimerOn(timePeriod) {}
   /*! Stops the periodic timer for this object. */
   virtual void setTimerOff() {}
   /*!  - Sets whether mouses-events are monitored by this object. */
   virtual void setUseMouseEvents(mouseStatus) {}
   /*! Gets whether mouses-events are monitored by this object. */
   virtual bool getUseMouseEvents() {}
   /*!  - Attach a GUI Control. */
   virtual void attachGui(guiObject, t2dSceneWindow, [sizeControl?]) {}
   /*! Detach any GUI Control. */
   virtual void detachGui() {}
   /*! Update the object's properties to match the persistent fields. */
   virtual void applyFieldSelectedValues() {}
   /*! Update the persistent fields to match the object's properties. */
   virtual void updateFieldSelectedValues() {}
   /*!  - Returns collision details for object over elapsed-time. */
   virtual string castCollision(elapsedTime) {}
   /*!  - Returns list of objects collided with over elapsed-time. */
   virtual string castCollisionList(elapsedTime]) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}

};

class  t2dStaticSprite : public t2dSceneObject {
  public:
   /*!  - Sets imageMap/Frame. */
   virtual bool setImageMap(imageMapName$, [int frame]) {}
   /*!  - Sets imageMap frame. */
   virtual bool setFrame(frame) {}
   /*! Gets current imageMap name. */
   virtual string getImageMap() {}
   /*! Gets current imageMap Frame. */
   virtual int getFrame() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Static Sprite
   @{ */
   /*!
    */
   string imageMap;
   /*!
    */
   int frame;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileEditorCursor : public t2dStaticSprite {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileImagesSceneGraph2D : public t2dSceneGraph {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileEditorSceneGraph2D : public t2dSceneGraph {
  public:
};

class  GuiPopUpMenuCtrl : public GuiTextCtrl {
  public:
   virtual void add(string name, int idNum, int scheme=0) {}
   virtual void addScheme(int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL) {}
   virtual void setText(string text) {}
   virtual string getText() {}
   /*! Clear the popup list. */
   virtual void clear() {}
   /*! Sort the list alphabetically. */
   virtual void sort() {}
   virtual void forceOnAction() {}
   virtual void forceClose() {}
   virtual int getSelected() {}
   virtual void setSelected(int id) {}
   virtual string getTextById(int id) {}
   /*! This fills the popup with a classrep's field enumeration type info.

More of a helper function than anything.   If console access to the field list is added, at least for the enumerated types, then this should go away.. */
   virtual void setEnumContent(string class, string enum) {}
   /*! Returns the position of the first entry containing the specified text. */
   virtual int findText(string text) {}
   /*! Get the size of the menu - the number of entries in it. */
   virtual int size() {}
   virtual void replaceText(bool doReplaceText) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   int maxPopupHeight;
};

class  comTileEditScriptData : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  comTileEditPolyDefinition : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditPolyScale : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditPolyDefinition : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditPolyCount : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chkTileEditTileFlipX : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chkTileEditCollisionActive : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditCustomData : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditScript : public GuiTextEditCtrl {
  public:
};

class  comTileEditCustomData : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chkTileEditTileFlipY : public GuiCheckBoxCtrl {
  public:
};

class  editTileDlg : public GuiControl {
  public:
   virtual Script onWake() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chkTileEditorBlendEnable : public GuiCheckBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileEditorLayerColour : public GuiTextEditCtrl {
  public:
};

class  comTileEditorDstBlend : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  comTileEditorSrcBlend : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  layerBlendDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtResizeTilesSizeY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtResizeTilesSizeX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  resizeTilesDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtResizeLayerCountY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtResizeLayerCountX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  resizeLayerDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtBrushTargetName : public GuiTextEditCtrl {
  public:
};

class  comAssignBrushList : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileAssignBrushDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileHelpDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileViewZoom : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileViewHeight : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileViewWidth : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  sldTileViewWidth : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  sldTileViewHeight : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  sldTileViewZoom : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileViewDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtLayerLayers : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtLayerSizeY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtLayerSizeX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtLayerCountY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtLayerCountX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  newLayerDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileLayers : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileSizeY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileSizeX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileCountY : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  txtTileCountX : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  newTileDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  lblTileBrushStatus : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  lblTileLayerStatus : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  lblTileMouseStatus : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  comTileImageIndex : public GuiPopUpMenuCtrl {
  public:
};

class  imageSceneWindow2D : public t2dSceneWindow {
  public:
   virtual Script onRightMouseDown() {}
   virtual Script onMouseDown() {}
   virtual Script onExtentChange() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  tileEditorImageLibrary : public GuiWindowCtrl {
  public:
};

class  tileSceneWindow2D : public t2dSceneWindow {
  public:
   virtual Script onMouseMove() {}
   virtual Script onRightMouseUp() {}
   virtual Script onRightMouseDragged() {}
   virtual Script onRightMouseDown() {}
   virtual Script onMouseUp() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseDown() {}
};

class  tileScreenMenu : public GuiMenuBar {
  public:
   virtual Script onMenuItemSelect() {}
};

class  tileEditorScreenGUI : public GuiChunkedBitmapCtrl {
  public:
   virtual Script onWake() {}
};

class  EmitterRemoveGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  EmitterAddGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  EmitterChangeGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  EffectRemoveGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  EffectAddGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  EffectChangeGraphKey {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  ParticleEditorRemoveEmitter {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  ParticleEditorAddEmitter {
  public:
   virtual Script redo() {}
   virtual Script undo() {}
};

class  ParticleEditorEmitterTableGraphFieldsList {
  public:
   virtual Script onSelect() {}
};

class  ParticleEditorEmitterComImageMap {
  public:
   virtual Script onSelect() {}
};

class  ParticleEditorEmitterComImagery {
  public:
   virtual Script onSelect() {}
};

class  ParticleEditorEmitterComOrientation {
  public:
   virtual Script onSelect() {}
};

class  ParticleEditorEffectTableGraphFieldsList {
  public:
   virtual Script onSelect() {}
};

class  EmitterHiddenGraphFieldsList {
  public:
   virtual Script getItemIndex() {}
};

class  emitterGraph {
  public:
   virtual Script onPlotPointRemoved() {}
   virtual Script onPlotPointSelected() {}
   virtual Script onPlotPointSelectedMouseDown() {}
   virtual Script onPlotPointChangedMove() {}
   virtual Script onPlotPointChangedUp() {}
   virtual Script onPlotPointAdded() {}
   virtual Script onSetSelected() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseMove() {}
};

class  T2DParticleEditorEmitterGuiTabBook {
  public:
   virtual Script onTabSelected() {}
};

class  emitterVisibleGraphFieldsList {
  public:
   virtual Script getItemIndex() {}
   virtual Script onSelect() {}
};

class  effectHiddenGraphFieldsList {
  public:
   virtual Script getItemIndex() {}
};

class  effectVisibleGraphFieldsList {
  public:
   virtual Script onSelect() {}
   virtual Script getItemIndex() {}
};

class  EffectGraph {
  public:
   virtual Script onPlotPointSelected() {}
   virtual Script onPlotPointSelectedMouseDown() {}
   virtual Script onPlotPointRemoved() {}
   virtual Script onPlotPointChangedMove() {}
   virtual Script onPlotPointChangedUp() {}
   virtual Script onPlotPointAdded() {}
   virtual Script onSetSelected() {}
   virtual Script onMouseDragged() {}
   virtual Script onMouseMove() {}
};

class  T2DParticleEditorEffectGuiTabBook {
  public:
   virtual Script onTabSelected() {}
};

class  LevelBuilderParticleEditor {
  public:
   virtual Script onContentMessage() {}
   virtual Script EmitterGetNameFromIndex() {}
   virtual Script GraphGetSelectedEmitterGraph() {}
   virtual Script GraphReadVisibleEmitterGraphKeys() {}
   virtual Script GraphReadSelectedEmitterGraphKeys() {}
   virtual Script GraphReadEmitterGraphKeys() {}
   virtual Script GraphDestroyEmitterGraphKey() {}
   virtual Script GraphAddEmitterGraphKey() {}
   virtual Script clearEmitterGraphKeys() {}
   virtual Script destroyEmitterGraphKey() {}
   virtual Script writeEmitterGraphKey() {}
   virtual Script editEmitterGraphKey() {}
   virtual Script addEmitterGraphKey() {}
   virtual Script readEmitterGraphKeys() {}
   virtual Script EmitterGetNameIndex() {}
   virtual Script EmitterReturnInternalName() {}
   virtual Script initEmitterGraphs() {}
   virtual Script readEmitterGraphFields() {}
   virtual Script writeEmitterFields() {}
   virtual Script readEmitterFields() {}
   virtual Script autoApplyEmitter() {}
   virtual Script UpdateEmitterOptions() {}
   virtual Script initEmitterEdit() {}
   virtual Script setEmitterEdit() {}
   virtual Script EffectGetNameIndex() {}
   virtual Script EffectReturnInternalName() {}
   virtual Script GraphDestroyEffectGraphKey() {}
   virtual Script clearEffectGraphKeys() {}
   virtual Script destroyEffectGraphKey() {}
   virtual Script writeEffectGraphKey() {}
   virtual Script editEffectGraphKey() {}
   virtual Script GraphAddEffectGraphKey() {}
   virtual Script addEffectGraphKey() {}
   virtual Script GraphReadVisibleEffectGraphKeys() {}
   virtual Script GraphReadSelectedEffectGraphKeys() {}
   virtual Script GraphReadEffectGraphKeys() {}
   virtual Script readEffectGraphKeys() {}
   virtual Script EffectGetNameFromIndex() {}
   virtual Script readEffectGraphFields() {}
   virtual Script reinitializeGUI() {}
   virtual Script initializeGUI() {}
   virtual Script clearEmitters() {}
   virtual Script destroyEmitter() {}
   virtual Script createEmitter() {}
   virtual Script setEmitterSolo() {}
   virtual Script setEmitterShowAll() {}
   virtual Script setEmitterVisibility() {}
   virtual Script setEmitterDown() {}
   virtual Script setEmitterUp() {}
   virtual Script readEmitterList() {}
   virtual Script setEffectEdit() {}
   virtual Script autoApplyEffect() {}
   virtual Script writeEffectFields() {}
   virtual Script GraphGetSelectedEffectGraph() {}
   virtual Script readEffectFields() {}
   virtual Script initEffectGraphs() {}
   virtual Script UpdateEffectOptions() {}
   virtual Script initEffectEdit() {}
   virtual Script EmitterMoveToVisible() {}
   virtual Script EmitterMoveToHidden() {}
   virtual Script EffectMoveToVisible() {}
   virtual Script EffectMoveToHidden() {}
   virtual Script setSelectedEmitter() {}
   virtual Script getSelectedEmitter() {}
   virtual Script getSelectedEffect() {}
   virtual Script onEffectAcquired() {}
   virtual Script onEffectRelinquished() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  imageExtensionText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  imageExtensionList : public GuiListBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  scriptExtensionText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  scriptExtensionList : public GuiListBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  addImageExtensionButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  removeImageExtensionButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  removeScriptExtensionButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  addScriptExtensionButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingExtensionsDlg : public GuiControl {
  public:
};

class  GuiTextListCtrl : public GuiArrayCtrl {
  public:
   /*! Get the ID of the currently selected item. */
   virtual int getSelectedId() {}
   /*! Finds the specified entry by id, then marks its row as selected. */
   virtual void setSelectedById(int id) {}
   /*! Selects the specified row. */
   virtual void setSelectedRow(int rowNum) {}
   virtual int getSelectedRow(not ID) {}
   /*! Set the selection to nothing. */
   virtual void clearSelection() {}
   /*! Returns row number of the new item. */
   virtual int addRow(int id, string text, int index=0) {}
   virtual void setRowById(int id, string text) {}
   /*! Performs a standard (alphabetical) sort on the values in the specified column. */
   virtual void sort(int columnID, bool increasing=false) {}
   /*! Perform a numerical sort on the values in the specified column. */
   virtual void sortNumerical(int columnID, bool increasing=false) {}
   /*! Clear the list. */
   virtual void clear() {}
   /*! Get the number of rows. */
   virtual int rowCount() {}
   /*! Get the row ID for an index. */
   virtual int getRowId(int index) {}
   /*! Get the text of a row with the specified id. */
   virtual string getRowTextById(int id) {}
   /*! Get the row number for a specified id. */
   virtual int getRowNumById(int id) {}
   /*! Get the text of the row with the specified index. */
   virtual string getRowText(int index) {}
   /*! Remove row with the specified id. */
   virtual void removeRowById(int id) {}
   /*! Remove a row from the table, based on its index. */
   virtual void removeRow(int index) {}
   /*! Scroll so the specified row is visible. */
   virtual void scrollVisible(int rowNum) {}
   /*! Find needle in the list, and return the row number it was found in. */
   virtual int findTextIndex(string needle) {}
   /*! Mark a specified row as active/not. */
   virtual void setRowActive(int rowNum, bool active) {}
   /*! Is the specified row currently active? */
   virtual bool isRowActive(int rowNum) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool enumerate;
   /*!
    */
   bool resizeCell;
   /*!
    */
   intList columns;
   /*!
    */
   bool fitParentWidth;
   /*!
    */
   bool clipColumnText;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingStatusList : public GuiTextListCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingStatusScroll : public GuiScrollCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  statusOkButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingStatusWindow : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingStatusDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ignoreDirectory : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ignoredDirectories : public GuiListBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ignoreFile : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ignoredFiles : public GuiListBoxCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  addIgnoredDirectoryButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  removeIgnoredDirectoryButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  removeIgnoredFileButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  addIgnoredFileButton : public GuiIconButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingOptionsDlg : public GuiControl {
  public:
};

class  GuiProgressCtrl : public GuiTextCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingProgress : public GuiProgressCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingBuildStack : public GuiStackControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  targetPlatformDropDown : public GuiPopUpMenuCtrlEx {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  outDirectory : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  packagingGameList : public GuiListBoxCtrl {
  public:
};

class  packagingUtilityMenu : public GuiMenuBar {
  public:
   virtual Script onMenuItemSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  bigRedWindow : public GuiWindowCtrl {
  public:
};

class  packagingUtilityDlg : public GuiControl {
  public:
   virtual Script onWake() {}
};

class  FileRef {
  public:
   virtual Script addToRemoveGroup() {}
   virtual Script delRef() {}
   virtual Script addRef() {}
   virtual Script getModDir() {}
   virtual Script getPath() {}
   virtual Script getShortFileName() {}
   virtual Script getFileName() {}
   virtual Script getRefCount() {}
   virtual Script safeDelete() {}
   virtual Script onRemove() {}
   virtual Script onAdd() {}
   virtual Script setFileName() {}
};

class  FileRefList {
  public:
   virtual Script clear() {}
   virtual Script isMember() {}
   virtual Script getObject() {}
   virtual Script getCount() {}
   virtual Script remove() {}
   virtual Script add() {}
   virtual Script onRemove() {}
   virtual Script onAdd() {}
};

class  HTMLReport {
  public:
   virtual Script close() {}
   virtual Script writeFileList() {}
};

class  packagingMainGameMenu : public GuiPopUpMenuCtrlEx {
  public:
   virtual Script onSelect() {}
};

class  GuiControlListPopUp : public GuiPopUpMenuCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   int maxPopupHeight;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  NewGuiDialogClass : public GuiControlListPopUp {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  NewGuiDialogName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  NewGuiDialog : public GuiControl {
  public:
};

class  GuiInspector : public GuiStackControl {
  public:
   virtual Script setAllGroupStateScript() {}
   virtual Script toggleGroupScript() {}
   virtual Script toggleDynamicGroupScript() {}
   /*! Inspect(Object) */
   virtual void inspect() {}
   /*!  - Returns currently inspected object */
   virtual string getInspectObject() {}
   virtual void setName(NewObjectName) {}

   /*! @name Stacking
   @{ */
   /*!
    */
   enumval StackingType;
   /*!
    */
   enumval HorizStacking;
   /*!
    */
   enumval VertStacking;
   /*!
    */
   int Padding;
   /// @}


   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorInspectFields : public GuiInspector {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorInspectName : public GuiTextEditCtrl {
  public:
};

class  GuiEditorTreeView : public GuiTreeViewCtrl {
  public:
   virtual Script onSelect() {}
   virtual Script onDeleteSelection() {}
   virtual Script onRemoveSelection() {}
   virtual Script onAddSelection() {}
   virtual Script onRightMouseDown() {}
   virtual Script onDefineIcons() {}
};

class  GuiEditCtrl : public GuiControl {
  public:
   virtual void setRoot(GuiControl root) {}
   virtual void addNewCtrl(GuiControl ctrl) {}
   /*! selects a control. */
   virtual void addSelection() {}
   /*! deselects a control. */
   virtual void removeSelection() {}
   /*! Clear selected controls list. */
   virtual void clearSelection() {}
   virtual void select(GuiControl ctrl) {}
   virtual void setCurrentAddSet(GuiControl ctrl) {}
   /*! Toggle activation. */
   virtual void toggle() {}
   virtual void justify(int mode) {}
   virtual void bringToFront() {}
   virtual void pushToBack() {}
   /*! Delete the selected text. */
   virtual void deleteSelection() {}
   virtual void moveSelection(int deltax, int deltay) {}
   virtual void saveSelection(string fileName) {}
   virtual void loadSelection(string fileName) {}
   virtual void selectAll() {}
   /*!  - Gets the GUI control(s) the editor is currently selecting */
   virtual string getSelected() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiEditor : public GuiEditCtrl {
  public:
   virtual Script onSelect() {}
   virtual Script onDelete() {}
   virtual Script onRemoveSelected() {}
   virtual Script onAddSelected() {}
   virtual Script onClearSelected() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorContent : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorRegion : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorScroll : public GuiScrollCtrl {
  public:
};

class  GuiEditorRuler : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   string refCtrl;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorLeftRuler : public GuiEditorRuler {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorTopRuler : public GuiEditorRuler {
  public:
};

class  GuiEditorResList : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  GuiEditorContentList : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  GuiEditorClassPopup : public GuiControlListPopUp {
  public:
   virtual Script onSelect() {}
};

class  GuiEditorMenuBar : public GuiMenuBar {
  public:
   virtual Script onMenuItemSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  GuiEditorGui : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  WatchDialogExpression : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerWatchDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DbgConsoleEntry : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerRightFrame : public GuiFrameSetCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerWatchView : public GuiTextListCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerLeftFrame : public GuiFrameSetCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerRootFrame : public GuiFrameSetCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerStatus : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerCursorWatch : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerGui : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerFindStringText : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerFindDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  EditWatchDialogValue : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerEditWatchDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerConnectPassword : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerConnectPort : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerConnectAddress : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerConnectDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  BreakClear : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  BreakPassCount : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  BreakCondition : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  DebuggerBreakConditionDlg : public GuiControl {
  public:
};

class  DbgFileView : public GuiArrayCtrl {
  public:
   /*! Set the current highlighted line. */
   virtual void setCurrentLine(int line, bool selected) {}
   /*! Get the currently executing file and line, if any.

@returns A string containing the file, a tab, and then the line number. Use getField() with this. */
   virtual string getCurrentLine() {}
   /*! Open a file for viewing.

@note This loads the file from the local system. */
   virtual bool open(string filename) {}
   /*! Clear all break points in the current file. */
   virtual void clearBreakPositions() {}
   /*! Set a breakpoint at the specified line. */
   virtual void setBreakPosition(int line) {}
   /*! Set a breakpoint at the specified line. */
   virtual void setBreak(int line) {}
   /*! Remove a breakpoint from the specified line. */
   virtual void removeBreak(int line) {}
   /*! Find the specified string in the currently viewed file and scroll it into view. */
   virtual bool findString(string findThis) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  DebuggerFileView : public DbgFileView {
  public:
   virtual Script onSetBreakPoint() {}
   virtual Script onRemoveBreakPoint() {}
};

class  DebuggerBreakPoints : public GuiTextListCtrl {
  public:
   virtual Script onAction() {}
   virtual Script clearBreaks() {}
   virtual Script removeBreak() {}
   virtual Script addBreak() {}
};

class  DebuggerCallStack : public GuiTextListCtrl {
  public:
   virtual Script onAction() {}
};

class  DebuggerFilePopup : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  DebuggerConsoleView : public GuiTextListCtrl {
  public:
   virtual Script print() {}
};

class  TCPDebugger {
  public:
   virtual Script handleError() {}
   virtual Script handleEvalOut() {}
   virtual Script handleRunning() {}
   virtual Script handleBreak() {}
   virtual Script handleBreakList() {}
   virtual Script handleFileList() {}
   virtual Script handleLineOut() {}
   virtual Script handlePass() {}
   virtual Script onLine() {}
};

class  FormMenuBarClass : public GuiMenuBar {
  public:
   virtual Script onMenuItemSelect() {}
};

class  GuiFormCtrl : public GuiControl {
  public:
   /*! Returns the ID of the Form Menu */
   virtual int getMenuID() {}
   /*!  - Sets the title of the Form Menu */
   virtual void setCaption(caption) {}
   /*!
    */
   string Caption;
   /*!
    */
   string ContentLibrary;
   /*!
    */
   string Content;
   /*!
    */
   bool Movable;
   /*!
    */
   bool HasMenu;

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  FormControlClass : public GuiFormCtrl {
  public:
   virtual Script onResize() {}
   virtual Script sizeContentsToFit() {}
   virtual Script onWake() {}
};

class  GuiFormClass {
  public:
   virtual Script RemoveFrameSplit() {}
   virtual Script AddFrameSplitToForm() {}
   virtual Script ClearControlContent() {}
   virtual Script SetControlContent() {}
   virtual Script SetFormContent() {}
   virtual Script BuildFormMenu() {}
   virtual Script BuildFormControl() {}
   virtual Script BuildEmptyFrame() {}
};

class  ScriptClassManager {
  public:
   virtual Script GetScriptClassList() {}
};

class  GuiFormManager {
  public:
   virtual Script BroadcastContentMessage() {}
   virtual Script SendContentMessage() {}
   virtual Script ClearLayoutContent() {}
   virtual Script SaveLayoutContent() {}
   virtual Script DeactivateLayout() {}
   virtual Script ActivateLayout() {}
   virtual Script ReloadLayout() {}
   virtual Script SaveLayout() {}
   virtual Script FindLayout() {}
   virtual Script UnregisterLayout() {}
   virtual Script RegisterLayout() {}
   virtual Script InitLayouts() {}
   virtual Script GetContentCount() {}
   virtual Script RemoveContentReference() {}
   virtual Script AddContentReference() {}
   virtual Script GetFormContentCount() {}
   virtual Script GetFormContentByIndex() {}
   virtual Script FindFormContent() {}
   virtual Script RemoveFormContent() {}
   virtual Script AddFormContent() {}
   virtual Script Destroy() {}
   virtual Script init() {}
   virtual Script FindLibrary() {}
   virtual Script UnregisterLibrary() {}
   virtual Script RegisterLibrary() {}
};

class  GuiConsoleTextCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString expression;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  TextOverlayControl : public GuiConsoleTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  FrameOverlayGui : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chatClientList : public GuiTextListCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chatClientScroll : public GuiScrollCtrl {
  public:
};

class  GuiMessageVectorCtrl : public GuiControl {
  public:
   /*! Make this gui control display messages from the specified MessageVector */
   virtual bool attach(MessageVector item) {}
   /*! Stop listing messages from the MessageVector previously attached to, if any. */
   virtual void detach() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int lineSpacing;
   /*!
    */
   int lineContinuedIndex;
   /*!
    */
   string allowedMatches;
   /*!
    */
   ColorI matchColor;
   /*!
    */
   int maxColorIndex;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chatMessageText : public GuiMessageVectorCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chatTextScroll : public GuiScrollCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  chatEditText : public GuiTextEditCtrl {
  public:
};

class  chatGui : public GuiWindowCtrl {
  public:
   virtual Script quit() {}
   virtual Script onGetList() {}
   virtual Script getClients() {}
   virtual Script send() {}
   virtual Script onSleep() {}
   virtual Script onWake() {}
};

class  RSSFeedObject {
  public:
   virtual Script onDisconnect() {}
   virtual Script getTagContents() {}
   virtual Script onLine() {}
   virtual Script onConnected() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RSSFeedMLText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RSSFeedControl : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RSSFeedGui : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  HelpText : public GuiMLTextCtrl {
  public:
};

class  HelpFileList : public GuiTextListCtrl {
  public:
   virtual Script onSelect() {}
};

class  HelpDlg : public GuiControl {
  public:
   virtual Script onWake() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  waitingForServer : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  setIPEdit : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  setIpWindow : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_statusText : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_statusBar : public GuiProgressCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_cancelQuery : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_queryStatus : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_status : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JoinServerPlayerName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_serverList : public GuiTextListCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_joinServer : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_refreshServer : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_queryLan : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  JS_queryMaster : public GuiButtonCtrl {
  public:
};

class  JoinServerGui : public GuiControl {
  public:
   virtual Script connectToIp() {}
   virtual Script update() {}
   virtual Script exit() {}
   virtual Script refreshSelectedServer() {}
   virtual Script refresh() {}
   virtual Script join() {}
   virtual Script cancel() {}
   virtual Script queryLan() {}
   virtual Script query() {}
   virtual Script onWake() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  startServerMaxPlayers : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  startServerPort : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  startServerPlayerName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  startServerName : public GuiTextEditCtrl {
  public:
};

class  startServerGui : public GuiControl {
  public:
   virtual Script createServer() {}
   virtual Script onWake() {}
};

class  InspectTreeView : public GuiTreeViewCtrl {
  public:
   virtual Script onSelect() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  InspectTreeTitle : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  InspectFields : public GuiInspector {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  InspectObjectName : public GuiTextEditCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  InspectTitle : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  InspectDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ConsoleErrorDisplay : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ConsoleErrorScroller : public GuiScrollCtrl {
  public:
};

class  GuiPaneControl : public GuiControl {
  public:
   virtual void setCollapsed(bool) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   string Caption;
   /*!
    */
   string captionID;
   /*!
    */
   bool collapsable;
   /*!
    */
   bool barBehindText;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ConsoleErrorPane : public GuiPaneControl {
  public:
};

class  GuiConsoleEditCtrl : public GuiTextEditCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   string validate;
   /*!
    */
   string escapeCommand;
   /*!
    */
   int historySize;
   /*!
    */
   bool password;
   /*!
    */
   bool tabComplete;
   /*!
    */
   AudioProfile deniedSound;
   /*!
    */
   bool sinkAllKeyEvents;
   /*!
    */
   bool password;
   /*!
    */
   string passwordMask;

   /*! @name Misc
   @{ */
   /*!
    */
   bool useSiblingScroller;
   /// @}

};

class  ConsoleEntry : public GuiConsoleEditCtrl {
  public:
   virtual Script eval() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ConsoleDlgWindow : public GuiWindowCtrl {
  public:
};

class  ConsoleDlg : public GuiControl {
  public:
   virtual Script onSleep() {}
   virtual Script onWake() {}
};

class  GuiInputCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  RemapInput : public GuiInputCtrl {
  public:
   virtual Script onInputEvent() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RemapText : public GuiTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RemapDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  RemapGui : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  KeysTextList : public GuiTextListCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ControlOptionsTabPage : public GuiTabPageCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MusicAudioVolume : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  EffectsAudioVolume : public GuiSliderCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  ScreenshotMenu : public GuiPopUpMenuCtrl {
  public:
};

class  BPPMenu : public GuiPopUpMenuCtrl {
  public:
   virtual Script init() {}
};

class  ResolutionMenu : public GuiPopUpMenuCtrl {
  public:
   virtual Script init() {}
};

class  GraphicsDriverMenu : public GuiPopUpMenuCtrl {
  public:
   virtual Script onSelect() {}
};

class  FullscreenToggle : public GuiCheckBoxCtrl {
  public:
   virtual Script onAction() {}
};

class  GuiTabBookCtrl : public GuiControl {
  public:
   virtual void addPage(no arguments expected) {}
   virtual void selectPage(int pageIndex) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   enumval TabPosition;
   /*!
    */
   int TabHeight;
   /*!
    */
   int TabMargin;
   /*!
    */
   int MinTabWidth;
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  OptionsTabBook : public GuiTabBookCtrl {
  public:
};

class  OptionsDlg : public GuiControl {
  public:
   virtual Script onWake() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MessagePopText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MessagePopFrame : public GuiWindowCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MessagePopupDlg : public GuiControl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelDetailsInfoText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelDetailsScroll : public GuiScrollCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelDetailsButton : public GuiButtonCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelDetailsText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelDetailsFrame : public GuiWindowCtrl {
  public:
};

class  MessageBoxOKCancelDetailsDlg : public GuiControl {
  public:
   virtual Script onSleep() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKCancelFrame : public GuiWindowCtrl {
  public:
};

class  MessageBoxOKCancelDlg : public GuiControl {
  public:
   virtual Script onSleep() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBYesNoText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBYesNoFrame : public GuiWindowCtrl {
  public:
};

class  MessageBoxYesNoDlg : public GuiControl {
  public:
   virtual Script onSleep() {}
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKText : public GuiMLTextCtrl {
  public:
};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  MBOKFrame : public GuiWindowCtrl {
  public:
};

class  MessageBoxOKDlg : public GuiControl {
  public:
   virtual Script onSleep() {}
};

class  GuiCanvas : public GuiCanvas {
  public:
   virtual Script popLayer() {}
   virtual Script popDialog() {}
   virtual Script pushDialog() {}
   virtual Script setContent() {}
   virtual Script checkCursor() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

/// Stub class
/// 
/// @note This is a stub class to ensure a proper class hierarchy. No 
///       information was available for this class.
class  Canvas : public GuiCanvas {
  public:
};

class  ScriptGroup : public SimGroup {
  public:

   /*! @name Classes
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}

};

class  ScriptClass : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name ClassLibrary
   
   Script objects have the ability to inherit and have class information.
   @{ */
   /*!
   Class Library This Belongs to.
   
    */
   string libraryName;
   /*!
   Script Class Namespace this object defines.
   
    */
   string className;
   /// @}

};

class  SimDataBlock : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  SimChunk : public SimGroup {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  UnknownChunk : public SimChunk {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  TextChunk : public SimChunk {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   string textData;
};

class  MaterialPropertyMap : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  RemoteCommandEvent {
  public:
};

class  SimpleMessageEvent {
  public:
};

class  GuiAutoScrollCtrl : public GuiTickCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   float startDelay;
   /*!
    */
   float resetDelay;
   /*!
    */
   int childBorder;
   /*!
    */
   float scrollSpeed;
   /*!
    */
   bool tickCallback;
};

class  GuiControlArrayControl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int colCount;
   /*!
    */
   intList colSizes;
   /*!
    */
   int rowSize;
   /*!
    */
   int rowSpacing;
   /*!
    */
   int colSpacing;
};

class  GuiBackgroundCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiBitmapBorderCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiConsole : public GuiArrayCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiMLTextEditCtrl : public GuiMLTextCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int lineSpacing;
   /*!
    */
   bool allowColorChars;
   /*!
    */
   int maxChars;
   /*!
    */
   AudioProfile deniedSound;
   /*!
    */
   caseString text;
   /*!
    */
   string escapeCommand;
};

class  GuiTextEditSliderCtrl : public GuiTextEditCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   string validate;
   /*!
    */
   string escapeCommand;
   /*!
    */
   int historySize;
   /*!
    */
   bool password;
   /*!
    */
   bool tabComplete;
   /*!
    */
   AudioProfile deniedSound;
   /*!
    */
   bool sinkAllKeyEvents;
   /*!
    */
   bool password;
   /*!
    */
   string passwordMask;
   /*!
    */
   string format;
   /*!
    */
   Point2F range;
   /*!
    */
   float increment;
};

class  GuiCursor : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   Point2I hotSpot;
   /*!
    */
   Point2F renderOffset;
   /*!
    */
   filename bitmapName;
};

class  GuiControlProfile : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool tab;
   /*!
    */
   bool canKeyFocus;
   /*!
    */
   bool mouseOverSelected;
   /*!
    */
   bool Modal;
   /*!
    */
   bool opaque;
   /*!
    */
   ColorI fillColor;
   /*!
    */
   ColorI fillColorHL;
   /*!
    */
   ColorI fillColorNA;
   /*!
    */
   int border;
   /*!
    */
   int borderThickness;
   /*!
    */
   ColorI borderColor;
   /*!
    */
   ColorI borderColorHL;
   /*!
    */
   ColorI borderColorNA;
   /*!
    */
   ColorI bevelColorHL;
   /*!
    */
   ColorI bevelColorLL;
   /*!
    */
   string fontType;
   /*!
    */
   int fontSize;
   /*!
    */
   enumval fontCharset;
   /*!
    */
   ColorI fontColors;
   /*!
    */
   ColorI fontColor;
   /*!
    */
   ColorI fontColorHL;
   /*!
    */
   ColorI fontColorNA;
   /*!
    */
   ColorI fontColorSEL;
   /*!
    */
   ColorI fontColorLink;
   /*!
    */
   ColorI fontColorLinkHL;
   /*!
    */
   enumval justify;
   /*!
    */
   Point2I textOffset;
   /*!
    */
   bool autoSizeWidth;
   /*!
    */
   bool autoSizeHeight;
   /*!
    */
   bool returnTab;
   /*!
    */
   bool numbersOnly;
   /*!
    */
   ColorI cursorColor;
   /*!
    */
   filename bitmap;
   /*!
    */
   AudioProfile soundButtonDown;
   /*!
    */
   AudioProfile soundButtonOver;
   /*!
    */
   SimObjectPtr profileForChildren;
};

class  GuiInspectorGroup : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   string Caption;
};

class  GuiInspectorField : public GuiControl {
  public:
   virtual void apply(newValue) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorDatablockField : public GuiInspectorField {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeEnum : public GuiInspectorField {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeCheckBox : public GuiInspectorField {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeGuiProfile : public GuiInspectorTypeEnum {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeFileName : public GuiInspectorField {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeColor : public GuiInspectorField {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeColorI : public GuiInspectorTypeColor {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiInspectorTypeColorF : public GuiInspectorTypeColor {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiSeparatorCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   string Caption;
   /*!
    */
   enumval type;
   /*!
    */
   int BorderMargin;
   /*!
    */
   bool Invisible;
   /*!
    */
   int LeftMargin;
};

class  GuiAviBitmapCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   bool done;
   /// @}

};

class  GuiFadeinBitmapCtrl : public GuiBitmapCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   filename bitmap;
   /*!
    */
   bool wrap;
   /// @}

   /*!
    */
   int fadeinTime;
   /*!
    */
   int waitTime;
   /*!
    */
   int fadeoutTime;
   /*!
    */
   bool done;
};

class  GuiBubbleTextCtrl : public GuiTextCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
};

class  GuiMouseEventCtrl : public GuiControl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool lockMouse;
};

class  GuiVectorFieldCtrl : public GuiTickCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiEffectCanvas : public GuiCanvas {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiBitmapButtonTextCtrl : public GuiBitmapButtonCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

   /*!
    */
   filename bitmap;
};

class  GuiBorderButtonCtrl : public GuiButtonBaseCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

};

class  GuiRadioCtrl : public GuiCheckBoxCtrl {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

};

class  NetStringEvent {
  public:
};

class  ConnectionMessageEvent {
  public:
};

class  FileDownloadRequestEvent {
  public:
};

class  FileChunkEvent {
  public:
};

class  GhostAlwaysObjectEvent {
  public:
};

class  AudioEnvironment : public SimDataBlock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool useRoom;
   /*!
    */
   enumval room;
   /*!
    */
   int roomHF;
   /*!
    */
   int reflections;
   /*!
    */
   int reverb;
   /*!
    */
   float roomRolloffFactor;
   /*!
    */
   float decayTime;
   /*!
    */
   float decayHFRatio;
   /*!
    */
   float reflectionsDelay;
   /*!
    */
   float reverbDelay;
   /*!
    */
   int roomVolume;
   /*!
    */
   float effectVolume;
   /*!
    */
   float damping;
   /*!
    */
   float environmentSize;
   /*!
    */
   float environmentDiffusion;
   /*!
    */
   float airAbsorption;
   /*!
    */
   int flags;
};

class  AudioSampleEnvironment : public SimDataBlock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   int direct;
   /*!
    */
   int directHF;
   /*!
    */
   int room;
   /*!
    */
   float obstruction;
   /*!
    */
   float obstructionLFRatio;
   /*!
    */
   float occlusion;
   /*!
    */
   float occlusionLFRatio;
   /*!
    */
   float occlusionRoomRatio;
   /*!
    */
   float roomRolloff;
   /*!
    */
   float airAbsorption;
   /*!
    */
   int outsideVolumeHF;
   /*!
    */
   int flags;
};

class  AudioDescription : public SimDataBlock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   float volume;
   /*!
    */
   bool isLooping;
   /*!
    */
   bool isStreaming;
   /*!
    */
   bool is3D;
   /*!
    */
   float referenceDistance;
   /*!
    */
   float maxDistance;
   /*!
    */
   int coneInsideAngle;
   /*!
    */
   int coneOutsideAngle;
   /*!
    */
   float coneOutsideVolume;
   /*!
    */
   Point3F coneVector;
   /*!
    */
   float environmentLevel;
   /*!
    */
   int loopCount;
   /*!
    */
   int minLoopGap;
   /*!
    */
   int maxLoopGap;
   /*!
    */
   int type;
};

class  AudioProfile : public SimDataBlock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   filename fileName;
   /*!
    */
   AudioDescription description;
   /*!
    */
   AudioSampleEnvironment environment;
   /*!
    */
   bool preload;
};

class  t2dBaseDatablock : public SimDataBlock {
  public:
   /*! Gets datablocks unique classname. */
   virtual string getDatablockClassName() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dActiveTileDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dActiveTile : public SimObject {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dSceneObjectDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
};

class  t2dAnimatedSpriteDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   string startAnimation;
};

class  t2dAnimationDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   string imageMap;
   /*!
    */
   string animationFrames;
   /*!
    */
   float animationTime;
   /*!
    */
   bool animationCycle;
   /*!
    */
   bool randomStart;
   /*!
    */
   int startFrame;
};

class  t2dChunkedImageDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   filename imageName;
};

class  t2dChunkedSpriteDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   string chunkedImage;
   /*!
    */
   int repeatX;
   /*!
    */
   int repeatY;
};

class  t2dCollisionMaterialDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /*!
    */
   float density;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float forceScale;
   /*!
    */
   float damping;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   bool immovable;
};

class  t2dSceneGraphDatablock : public t2dBaseDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   float containerBinSize;
   /*!
    */
   int containerBinCount;
   /*!
    */
   bool useLayerSorting;
   /*!
    */
   bool lastInFrontSorting;
   /*!
    */
   float scenePhysicsLimitFPS;
   /*!
    */
   float scenePhysicsTargetFPS;
   /*!
    */
   int scenePhysicsMaxIterations;
   /*!
    */
   bool scenePhysicsFPSActive;
};

class  t2dSceneObjectSet : public SimSet {
  public:
   /*! Updates the Set with object changes. */
   virtual void updateFieldSelectedValues() {}
   virtual void setPositionX(x position) {}
   virtual void setPositionY(y position) {}
   virtual void setWidth(width) {}
   virtual void setHeight(height) {}
   virtual void setRotation(height) {}
   virtual void setFlipX(flipX) {}
   virtual void setFlipY(flipY) {}
   virtual void setGraphGroup(graph group) {}
   virtual void setLayer(layer) {}
   /*!  - Returns x position. */
   virtual float getPositionX() {}
   /*!  - Returns y position. */
   virtual float getPositionY() {}
   /*!  - Returns width. */
   virtual float getWidth() {}
   /*!  - Returns height. */
   virtual float getHeight() {}
   /*!  - Returns rotation. */
   virtual float getRotation() {}
   /*!  - Returns flip x. */
   virtual bool getFlipX() {}
   /*!  - Returns flip y. */
   virtual bool getFlipY() {}
   /*!  - Returns the graph group. */
   virtual int getGraphGroup() {}
   /*!  - Returns the layer. */
   virtual int getLayer() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dSceneObjectGroup : public t2dSceneObjectSet {
  public:
   virtual Script getSuperClass() {}
   virtual Script setSuperClass() {}
   virtual Script getClass() {}
   virtual Script setClass() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dScrollerDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   t2dImageMapDatablock imageMap;
   /*!
    */
   float repeatX;
   /*!
    */
   float repeatY;
   /*!
    */
   float scrollX;
   /*!
    */
   float scrollY;
};

class  t2dStaticSpriteDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   t2dImageMapDatablock imageMap;
   /*!
    */
   int frame;
};

class  t2dTileMapDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   filename tilemapFile;
};

class  t2dTriggerDatablock : public t2dSceneObjectDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   Point2F position;
   /*!
    */
   float rotation;
   /*!
    */
   float mountRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   Point2F size;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /*!
    */
   float lifetime;
   /*!
    */
   float autoRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   bool collisionCircleSuperscribed;
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   int collisionGroupMask;
   /*!
    */
   int collisionLayerMask;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   bool collisionSuppress;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool Blending;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /*!
    */
   bool useMouseEvents;
   /*!
    */
   caseString defaultClass;
   /*!
    */
   caseString defaultNamespace;
   /*!
    */
   caseString defaultScriptClass;
   /*!
    */
   caseString defaultScriptSuperclass;
   /*!
    */
   bool enterCallback;
   /*!
    */
   bool stayCallback;
   /*!
    */
   bool leaveCallback;
};

class  t2dTestTileDatablock : public t2dActiveTileDatablock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dTestTile : public t2dActiveTile {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  TSShapeConstructor : public SimDataBlock {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Media
   @{ */
   /*!
    */
   filename baseShape;
   /// @}


   /*! @name Sequences
   @{ */
   /*!
    */
   filename sequence0;
   /*!
    */
   filename sequence1;
   /*!
    */
   filename sequence2;
   /*!
    */
   filename sequence3;
   /*!
    */
   filename sequence4;
   /*!
    */
   filename sequence5;
   /*!
    */
   filename sequence6;
   /*!
    */
   filename sequence7;
   /*!
    */
   filename sequence8;
   /*!
    */
   filename sequence9;
   /*!
    */
   filename sequence10;
   /*!
    */
   filename sequence11;
   /*!
    */
   filename sequence12;
   /*!
    */
   filename sequence13;
   /*!
    */
   filename sequence14;
   /*!
    */
   filename sequence15;
   /*!
    */
   filename sequence16;
   /*!
    */
   filename sequence17;
   /*!
    */
   filename sequence18;
   /*!
    */
   filename sequence19;
   /*!
    */
   filename sequence20;
   /*!
    */
   filename sequence21;
   /*!
    */
   filename sequence22;
   /*!
    */
   filename sequence23;
   /*!
    */
   filename sequence24;
   /*!
    */
   filename sequence25;
   /*!
    */
   filename sequence26;
   /*!
    */
   filename sequence27;
   /*!
    */
   filename sequence28;
   /*!
    */
   filename sequence29;
   /*!
    */
   filename sequence30;
   /*!
    */
   filename sequence31;
   /*!
    */
   filename sequence32;
   /*!
    */
   filename sequence33;
   /*!
    */
   filename sequence34;
   /*!
    */
   filename sequence35;
   /*!
    */
   filename sequence36;
   /*!
    */
   filename sequence37;
   /*!
    */
   filename sequence38;
   /*!
    */
   filename sequence39;
   /*!
    */
   filename sequence40;
   /*!
    */
   filename sequence41;
   /*!
    */
   filename sequence42;
   /*!
    */
   filename sequence43;
   /*!
    */
   filename sequence44;
   /*!
    */
   filename sequence45;
   /*!
    */
   filename sequence46;
   /*!
    */
   filename sequence47;
   /*!
    */
   filename sequence48;
   /*!
    */
   filename sequence49;
   /*!
    */
   filename sequence50;
   /*!
    */
   filename sequence51;
   /*!
    */
   filename sequence52;
   /*!
    */
   filename sequence53;
   /*!
    */
   filename sequence54;
   /*!
    */
   filename sequence55;
   /*!
    */
   filename sequence56;
   /*!
    */
   filename sequence57;
   /*!
    */
   filename sequence58;
   /*!
    */
   filename sequence59;
   /*!
    */
   filename sequence60;
   /*!
    */
   filename sequence61;
   /*!
    */
   filename sequence62;
   /*!
    */
   filename sequence63;
   /*!
    */
   filename sequence64;
   /*!
    */
   filename sequence65;
   /*!
    */
   filename sequence66;
   /*!
    */
   filename sequence67;
   /*!
    */
   filename sequence68;
   /*!
    */
   filename sequence69;
   /*!
    */
   filename sequence70;
   /*!
    */
   filename sequence71;
   /*!
    */
   filename sequence72;
   /*!
    */
   filename sequence73;
   /*!
    */
   filename sequence74;
   /*!
    */
   filename sequence75;
   /*!
    */
   filename sequence76;
   /*!
    */
   filename sequence77;
   /*!
    */
   filename sequence78;
   /*!
    */
   filename sequence79;
   /*!
    */
   filename sequence80;
   /*!
    */
   filename sequence81;
   /*!
    */
   filename sequence82;
   /*!
    */
   filename sequence83;
   /*!
    */
   filename sequence84;
   /*!
    */
   filename sequence85;
   /*!
    */
   filename sequence86;
   /*!
    */
   filename sequence87;
   /*!
    */
   filename sequence88;
   /*!
    */
   filename sequence89;
   /*!
    */
   filename sequence90;
   /*!
    */
   filename sequence91;
   /*!
    */
   filename sequence92;
   /*!
    */
   filename sequence93;
   /*!
    */
   filename sequence94;
   /*!
    */
   filename sequence95;
   /*!
    */
   filename sequence96;
   /*!
    */
   filename sequence97;
   /*!
    */
   filename sequence98;
   /*!
    */
   filename sequence99;
   /*!
    */
   filename sequence100;
   /*!
    */
   filename sequence101;
   /*!
    */
   filename sequence102;
   /*!
    */
   filename sequence103;
   /*!
    */
   filename sequence104;
   /*!
    */
   filename sequence105;
   /*!
    */
   filename sequence106;
   /*!
    */
   filename sequence107;
   /*!
    */
   filename sequence108;
   /*!
    */
   filename sequence109;
   /*!
    */
   filename sequence110;
   /*!
    */
   filename sequence111;
   /*!
    */
   filename sequence112;
   /*!
    */
   filename sequence113;
   /*!
    */
   filename sequence114;
   /*!
    */
   filename sequence115;
   /*!
    */
   filename sequence116;
   /*!
    */
   filename sequence117;
   /*!
    */
   filename sequence118;
   /*!
    */
   filename sequence119;
   /*!
    */
   filename sequence120;
   /*!
    */
   filename sequence121;
   /*!
    */
   filename sequence122;
   /*!
    */
   filename sequence123;
   /*!
    */
   filename sequence124;
   /*!
    */
   filename sequence125;
   /*!
    */
   filename sequence126;
   /// @}

};

class  UndoAction : public SimObject {
  public:
   virtual void addToManager([undoManager]) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
   A brief description of the action, for UI representation of this undo/redo action.
   
    */
   string actionName;
};

class  UndoScriptAction : public UndoAction {
  public:

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
   A brief description of the action, for UI representation of this undo/redo action.
   
    */
   string actionName;
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
};

class  ConsoleLogger : public SimObject {
  public:
   /*!  Attaches this object to the console and begins logging */
   virtual bool attach() {}
   /*!  Detaches this object from the console and stops logging */
   virtual bool detach() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Logging
   @{ */
   /*!
    */
   enumval level;
   /// @}

};

class  FileObject : public SimObject {
  public:
   virtual bool openForRead(string filename) {}
   virtual bool openForWrite(string filename) {}
   virtual bool openForAppend(string filename) {}
   /*! Are we at the end of the file? */
   virtual bool isEOF() {}
   /*! Read a line from the file. */
   virtual string readLine() {}
   /*! Write a line to the file, if it was opened for writing. */
   virtual void writeLine(string text) {}
   /*! Close the file. */
   virtual void close() {}
   virtual void writeObject(SimObject, object prepend) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  BanList : public SimObject {
  public:
   /*! Ban a user until a given time.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
@param   banTime  Time at which they will be allowed back in. */
   virtual void addAbsolute( int ID, TransportAddress TA, int banTime ) {}
   /*! Ban a user for banLength seconds.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
@param   banTime  Time at which they will be allowed back in. */
   virtual void add( int ID, TransportAddress TA, int banLength ) {}
   /*! Unban someone.

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
 */
   virtual void removeBan( int ID, TransportAddress TA ) {}
   /*! Is someone banned?

@param   ID       Unique ID of the player.
@param   TA       Address from which the player connected.
 */
   virtual bool isBanned( int ID, TransportAddress TA ) {}
   /*! Dump the banlist to a file. */
   virtual void export(string filename) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  NetConnection : public SimGroup {
  public:
   /*! Returns the address we're connected to. */
   virtual string getAddress() {}
   virtual void setSimulatedNetParams(float packetLoss, int delay) {}
   virtual int getPing() {}
   virtual int getPacketLoss() {}
   virtual void checkMaxRate() {}
   /*!  Convert a ghost id from this connection to a real id. */
   virtual int resolveGhostID( S32 ghostID ) {}
   /*!  Convert a ghost index from this connection to a real id. */
   virtual int resolveObjectFromGhostIndex( S32 ghostIdx) {}
   /*!  Convert a real id to the ghost id for this connection. */
   virtual int getGhostID( S32 realID ) {}
   /*!  Connects this NC object to the remote address. */
   virtual void connect(string remoteAddress) {}
   /*! Connects a connection to the server running in the same process. */
   virtual string connectLocal() {}
   /*! Returns number of ghosts active. */
   virtual int getGhostsActive() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  GameConnection : public NetConnection {
  public:
   virtual Script setPlayerName() {}
   virtual Script onDrop() {}
   virtual Script onConnect() {}
   virtual Script onConnectRequest() {}
   virtual Script spamReset() {}
   virtual Script spamMessageTimeout() {}
   virtual Script onConnectRequestTimedOut() {}
   virtual Script onConnectRequestRejected() {}
   virtual Script onConnectionError() {}
   virtual Script onConnectionDropped() {}
   virtual Script onConnectionTimedOut() {}
   virtual Script onConnectionAccepted() {}
   virtual void setJoinPassword() {}
   virtual void setConnectArgs() {}
   virtual void activateGhosting() {}
   virtual void resetGhosting() {}
   /*!  Disconnect a client; reason is sent as part of the disconnect packet. */
   virtual void delete(string reason=NULL) {}
   /*!  Get the server connection if any. */
   virtual int getServerConnection() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  TCPObject : public SimObject {
  public:
   /*! Parameters are transmitted as strings, one at a time. */
   virtual void send(...) {}
   /*! Start listening on the specified ports for connections. */
   virtual void listen(int port) {}
   /*! Connect to the given address. */
   virtual void connect(string addr) {}
   /*! Disconnect from whatever we're connected to, if anything. */
   virtual void disconnect() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  HTTPObject : public TCPObject {
  public:
   virtual void get(TransportAddress addr, string requirstURI, string query=NULL) {}
   virtual void post(TransportAddress addr, string requestURI, string query, string post) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  NetObject : public SimObject {
  public:
   /*! Cause the NetObject to be forced as scoped on the specified NetConnection. */
   virtual void scopeToClient(NetConnection %client) {}
   /*! Undo the effects of a scopeToClient() call. */
   virtual void clearScopeToClient(%client) {}
   /*! Always scope this object on all connections. */
   virtual void setScopeAlways() {}
   virtual int getGhostID() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  SimpleNetObject : public NetObject {
  public:
   virtual void setMessage(string msg) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  GuiDragAndDropControl : public GuiControl {
  public:
   virtual void startDragging(%offset) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool deleteOnMouseUp;
};

class  GuiFilterCtrl : public GuiControl {
  public:
   /*! Return a tuple containing all the values in the filter. */
   virtual string getValue() {}
   /*! Reset the filter to use the specified points, spread equidistantly across the domain. */
   virtual void setValue(f1, f2, ...) {}
   /*! Reset the filtering. */
   virtual void identity() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   int controlPoints;
   /*!
    */
   floatList filter;
};

class  GuiGraphCtrl : public GuiControl {
  public:
   /*! Add a data point to the given plot. */
   virtual void addDatum(int plotID, float v) {}
   /*! Get a data point from the plot specified, samples from the start of the graph. */
   virtual float getDatum(int plotID, int samples) {}
   /*! Adds a data point with value variable, every update ms. */
   virtual void addAutoPlot(int plotID, string variable, int update) {}
   /*! Stops automatic pointing over set interval. */
   virtual void removeAutoPlot(int plotID) {}
   /*! Change GraphType of plot plotID. */
   virtual void setGraphType(int plotID, string graphType) {}
   /*! Sets the scale of all specified plots to the maximum scale among them. */
   virtual void matchScale(int plotID, int plotID, ...) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  GuiImageList : public SimObject {
  public:
   /*!  Get a path to the texture at the specified index */
   virtual string getImage(int index) {}
   /*! clears the imagelist */
   virtual bool clear() {}
   /*! gets the number of images in the list */
   virtual int count() {}
   /*!  removes an image from the list by index */
   virtual bool remove(image index) {}
   /*!  retrieves the imageindex of a specified texture in the list */
   virtual int getIndex(image path) {}
   /*!  insert an image into imagelist- returns the image index or -1 for failure */
   virtual int insert(image path) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  GuiInspectorDynamicGroup {
  public:
   virtual void addDynamicField() {}
};

class  GuiInspectorDynamicField : public GuiInspectorField {
  public:
   virtual void renameField(newDynamicFieldName) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  MessageVector : public SimObject {
  public:
   /*! Clear the message vector. */
   virtual void clear() {}
   /*! Push a line onto the back of the list. */
   virtual void pushBackLine(string msg, int tag=0) {}
   /*! Pop a line from the back of the list; destroys the line. */
   virtual bool popBackLine() {}
   /*! Push a line onto the front of the vector. */
   virtual void pushFrontLine(string msg, int tag=0) {}
   /*! Pop a line from the front of the vector, destroying the line. */
   virtual bool popFrontLine() {}
   /*! Insert a new line into the vector at the specified position. */
   virtual bool insertLine(int insertPos, string msg, int tag=0) {}
   /*! Delete the line at the specified position. */
   virtual bool deleteLine(int deletePos) {}
   /*! Dump the message vector to a file, optionally prefixing a header. */
   virtual void dump(string filename, string header=NULL) {}
   /*! Get the number of lines in the vector. */
   virtual int getNumLines() {}
   /*! Scan through the lines in the vector, returning the first line that has a matching tag. */
   virtual string getLineTextByTag(int tag) {}
   /*! Scan through the vector, returning the line number of the first line that matches the specified tag; else returns -1 if no match was found. */
   virtual int getLineIndexByTag(int tag) {}
   /*! Get the text at a specified line. */
   virtual string getLineText(int line) {}
   /*! Get the tag of a specified line. */
   virtual int getLineTag(int line) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  GuiTheoraCtrl : public GuiControl {
  public:
   /*!  Set an Ogg Theora file to play. */
   virtual void setFile(string filename) {}
   /*!  Stop playback. */
   virtual void stop() {}
   /*!  Return the time elapsed in playback, in seconds. */
   virtual float getCurrentTime() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Playback
   @{ */
   /*!
    */
   filename theoraFile;
   /*!
    */
   bool done;
   /*!
    */
   bool stopOnSleep;
   /*!
    */
   ColorI backgroundColor;
   /// @}

};

class  GuiToolboxButtonCtrl : public GuiButtonCtrl {
  public:
   /*!  sets the bitmap that shows when the button is active */
   virtual void setNormalBitmap( filepath name ) {}
   /*!  sets the bitmap that shows when the button is disabled */
   virtual void setLoweredBitmap( filepath name ) {}
   /*!  sets the bitmap that shows when the button is disabled */
   virtual void setHoverBitmap( filepath name ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}


   /*! @name Misc
   @{ */
   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int groupNum;
   /*!
    */
   enumval buttonType;
   /// @}

   /*!
    */
   filename normalBitmap;
   /*!
    */
   filename loweredBitmap;
   /*!
    */
   filename hoverBitmap;
};

class  ActionMap : public SimObject {
  public:
   virtual void bind( device, action, [modifier spec, mod...], command ) {}
   virtual void bindCmd( device, action, makeCmd, breakCmd ) {}
   virtual void unbind( device, action ) {}
   virtual void save( [fileName], [append] ) {}
   virtual void push() {}
   virtual void pop() {}
   virtual string getBinding( command ) {}
   virtual string getCommand( device, action ) {}
   virtual bool isInverted( device, action ) {}
   virtual float getScale( device, action ) {}
   virtual string getDeadZone( device, action ) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dAnimatedSprite : public t2dSceneObject {
  public:
   /*!  - Sets the frame-change callback status. */
   virtual void setFrameChangeCallback(status?) {}
   /*!  - Sets the current animation frame. */
   virtual void setAnimationFrame(frame) {}
   /*! Checks animation status. */
   virtual bool getIsAnimationFinished() {}
   /*! Gets current animation name. */
   virtual string getAnimationName() {}
   /*! Gets current animation name. */
   virtual string getAnimation() {}
   /*! Gets current animation frame. */
   virtual int getAnimationFrame() {}
   /*! Gets current animation time. */
   virtual float getAnimationTime() {}
   virtual void setAnimation(animationName) {}
   /*!  - Plays an animation. */
   virtual bool playAnimation(animationName$, [autoRestore?], [frameIndex], [mergeTime?]) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Animated Sprite
   @{ */
   /*!
    */
   string startAnimation;
   /// @}

};

class  t2dChunkedSprite : public t2dSceneObject {
  public:
   /*!  - Sets Chunked-Image. */
   virtual bool setChunkedImage(chunkedImageName$) {}
   /*!  - Sets the Repeat X/Y repetition. */
   virtual void setRepeat(repeatX / repeatY) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Chunked Sprite
   @{ */
   /*!
    */
   string chunkedImage;
   /*!
    */
   int repeatX;
   /*!
    */
   int repeatY;
   /// @}

};

class  t2dImageMapDatablock : public t2dBaseDatablock {
  public:
   /*! Compile Image-Map. */
   virtual bool compile() {}
   /*! Set Filter Mode. */
   virtual void setFilterMode() {}
   /*! Get Filter Mode. */
   virtual string getFilterMode() {}
   /*! Get ImageMap Mode. */
   virtual string getImageMapMode() {}
   /*! Get Source Bitmap Name. */
   virtual string getSrcBitmapName() {}
   /*! Get Source Bitmap Size. */
   virtual string getSrcBitmapSize() {}
   /*! Get ImageMap Frame Count. */
   virtual int getFrameCount() {}
   /*!  - Get ImageMap Frame Size. */
   virtual string getFrameSize(int frame) {}
   /*!  - Get ImageMap Frame Texture Page. */
   virtual int getFrameTexturePage(int frame) {}
   /*! Get ImageMap Texture-Page Count. */
   virtual int getTexturePageCount() {}
   /*!  - Get ImageMap Texture-Page Size. */
   virtual string getTexturePageSize(int texturePage) {}
   /*!  - Get ImageMap Texture-Page Frame Count. */
   virtual int getTexturePageFrameCount(int texturePage) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   filename imageName;
   /*!
    */
   enumval imageMode;
   /*!
    */
   int frameCount;
   /*!
    */
   enumval filterMode;
   /*!
    */
   bool filterPad;
   /*!
    */
   bool preferPerf;
   /*!
    */
   bool cellRowOrder;
   /*!
    */
   int cellOffsetX;
   /*!
    */
   int cellOffsetY;
   /*!
    */
   int cellStrideX;
   /*!
    */
   int cellStrideY;
   /*!
    */
   int cellCountX;
   /*!
    */
   int cellCountY;
   /*!
    */
   int cellWidth;
   /*!
    */
   int cellHeight;
   /*!
    */
   string linkImageMaps;
   /*!
    */
   bool preload;
   /*!
    */
   bool allowUnload;
};

class  t2dParticleEffect : public t2dSceneObject {
  public:
   /*!  - Adds an Emitter to the Effect creating a new one if necessary. */
   virtual int addEmitter(emitter) {}
   /*!  - Removes an Emitter from the Effect. */
   virtual void removeEmitter(emitterObject, deleteEmitter) {}
   /*! Clear all Emitters from the Effect. */
   virtual void clearEmitters() {}
   /*! Gets Emitter Count for Effect. */
   virtual int getEmitterCount() {}
   /*!  - Finds Emitter Object by name from Effect. */
   virtual int findEmitterObject(emitterName$) {}
   /*!  - Gets Emitter Object from Effect. */
   virtual int getEmitterObject(emitterIndex) {}
   /*!  - Moves the Emitter Object. */
   virtual void moveEmitter(fromEmitterIndex, toEmitterIndex) {}
   /*!  - Select Graph Name. */
   virtual void selectGraph(graphName) {}
   /*!  - Add Data-Key to Graph. */
   virtual int addDataKey(time, value) {}
   /*!  - Remove Data-Key from Graph. */
   virtual bool removeDataKey(keyIndex) {}
   /*! Clear Data-Key(s) from Graph. */
   virtual bool clearDataKeys() {}
   /*!  - Set Data-Key Value in Graph. */
   virtual bool setDataKeyValue(keyIndex, value) {}
   /*!  - Get Data-Key Time/Value from Graph. */
   virtual string getDataKey(keyIndex) {}
   /*! Get Data-Key Count from Graph. */
   virtual int getDataKeyCount() {}
   /*! Get Min-Value from Graph. */
   virtual float getMinValue() {}
   /*! Get Max-Value from Graph. */
   virtual float getMaxValue() {}
   /*! Get Min-Time from Graph. */
   virtual float getMinTime() {}
   /*! Get Max-Value from Graph. */
   virtual float getMaxTime() {}
   /*!  - Get Time-Value from Graph. */
   virtual float getGraphValue(time) {}
   /*!  - Set Time-Repeat For Graph. */
   virtual bool setTimeRepeat(timeRepeat) {}
   /*! Get Time-Repeat for Graph. */
   virtual float getTimeRepeat() {}
   /*!  - Set Value-Scale For Graph. */
   virtual bool setValueScale(valueScale) {}
   /*! Get Value-Scale for Graph. */
   virtual float getValueScale() {}
   /*!  - Find Particle Peak-Time. */
   virtual string findParticlePeak(searchTime, timeStep, peakLimit) {}
   /*!  - Move Effect-Time To. */
   virtual string moveEffectTo(moveTime, timeStep) {}
   /*!  - Plays the Particle Effect. */
   virtual bool playEffect(resetParticles?) {}
   /*!  - Stops the Particle Effect. */
   virtual void stopEffect([waitForParticles?, killEffect?]) {}
   /*!  - Sets the Effect Life Mode/Time. */
   virtual void setEffectLifeMode(lifeMode, [time]) {}
   /*! Gets the Effect Life Mode. */
   virtual string getEffectLifeMode() {}
   /*! Set the effect collision status. */
   virtual void setEffectCollisionStatus() {}
   /*! Get the effect collision status. */
   virtual bool getEffectCollisionStatus() {}
   /*!  - Loads a Particle Effect. */
   virtual bool loadEffect(effectFile$) {}
   /*!  - Saves a Particle Effect. */
   virtual bool saveEffect(effectFile$) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Particle Effect
   @{ */
   /*!
    */
   filename effectFile;
   /*!
    */
   bool collisionStatus;

   /*! @name Particle Effect
   @{ */
};

class  t2dParticleEmitter : public SimObject {
  public:
   /*!  - Select Graph Name. */
   virtual void selectGraph(graphName) {}
   /*!  - Add Data-Key to Graph. */
   virtual int addDataKey(time, value) {}
   /*!  - Remove Data-Key from Graph. */
   virtual bool removeDataKey(keyIndex) {}
   /*! Clear Data-Key(s) from Graph. */
   virtual bool clearDataKeys() {}
   /*!  - Set Data-Key Value in Graph. */
   virtual bool setDataKeyValue(keyIndex, value) {}
   /*!  - Get Data-Key Time/Value from Graph. */
   virtual string getDataKey(keyIndex) {}
   /*! Get Data-Key Count from Graph. */
   virtual int getDataKeyCount() {}
   /*! Get Min-Value from Graph. */
   virtual float getMinValue() {}
   /*! Get Max-Value from Graph. */
   virtual float getMaxValue() {}
   /*! Get Min-Time from Graph. */
   virtual float getMinTime() {}
   /*! Get Max-Value from Graph. */
   virtual float getMaxTime() {}
   /*!  - Get Value from Graph. */
   virtual float getGraphValue(time) {}
   /*!  - Set Time-Repeat for Graph. */
   virtual bool setTimeRepeat(timeRepeat) {}
   /*! Get Time-Repeat for Graph. */
   virtual float getTimeRepeat() {}
   /*!  - Set Value-Scale For Graph. */
   virtual bool setValueScale(valueScale) {}
   /*! Get Value-Scale for Graph. */
   virtual float getValueScale() {}
   /*!  - Set the Emitters Visibility. */
   virtual void setVisible(status?) {}
   /*!  - Set the Emitters Name. */
   virtual void setEmitterName(emitterName$) {}
   /*!  - Set Fixed-Aspect. */
   virtual void setFixedAspect(fixedAspect) {}
   /*!  - Set Fixed-Force Angle. */
   virtual void setFixedForceAngle(fixedForceAngle) {}
   /*!  - Set Particle Orientation. */
   virtual void setParticleOrientationMode(particleOrientationMode$) {}
   /*!  - Set Align-Orientation Angle Offset. */
   virtual void setAlignAngleOffset(alignAngleOffset) {}
   /*!  - Set Align-Orientation Keep-Aligned Flag. */
   virtual void setAlignKeepAligned(keepAligned) {}
   /*!  - Set Random-Orientation Angle-Offset. */
   virtual void setRandomAngleOffset(randomAngle) {}
   /*!  - Set Random-Orientation Arc. */
   virtual void setRandomArc(randomArc) {}
   /*!  - Set Fixed-Orientation Angle-Offset. */
   virtual void setFixedAngleOffset(randomAngle) {}
   /*!  - Set Emitter Type. */
   virtual void setEmitterType(emitterType$) {}
   /*!  - Set the ImageMap/Frame. */
   virtual bool setImageMap(imageMapName$, [int frame]) {}
   /*!  - Set the Animation. */
   virtual bool setAnimationName(animationName$) {}
   /*!  - Set the Pivot-Point. */
   virtual void setPivotPoint(pivotX / pivotY) {}
   /*!  - Set Use-Effect-Emission Flag. */
   virtual void setUseEffectEmission(useEffectEmission) {}
   /*!  - Set Link-Emission-Rotation Flag. */
   virtual void setLinkEmissionRotation(linkEmissionRotation) {}
   /*!  - Set Intense-Particles Flag. */
   virtual void setIntenseParticles(intenseParticles) {}
   /*!  - Set Single-Particle Flag. */
   virtual void setSingleParticle(singleParticle) {}
   /*!  - Set Attach-Position-To-Emitter Flag. */
   virtual void setAttachPositionToEmitter(attachPositionToEmitter) {}
   /*!  - Set Attach-Rotation-To-Emitter Flag. */
   virtual void setAttachRotationToEmitter(attachRotationToEmitter) {}
   /*!  - Set First-InFront-Order Flag. */
   virtual void setFirstInFrontOrder(firstInFrontOrder) {}
   /*!  - Sets the Rendering Blend Options. */
   virtual void setBlending(blendStatus?, [srcBlendFactor], [dstBlendFactor]) {}
   /*! Gets the Rendering Blend Options. */
   virtual string getBlending() {}
   /*! Get the Emitters Visibility. */
   virtual bool getVisible() {}
   /*! Get the Emitters Name. */
   virtual string getEmitterName() {}
   /*! Get Fixed-Aspect. */
   virtual bool getFixedAspect() {}
   /*! Get Fixed-Force-Direction. */
   virtual float getFixedForceAngle() {}
   /*! Get Particle Orientation. */
   virtual string getParticleOrientation() {}
   /*! Get Align-Orientation Angle-Offset. */
   virtual float getAlignAngleOffset() {}
   /*! Get Align-Orientation Keep-Aligned Flag. */
   virtual float getAlignKeepAligned() {}
   /*! Get Random-Orientation Angle-Offset. */
   virtual float getRandomAngleOffset() {}
   /*! Get Random-Orientation Arc. */
   virtual float getRandomArc() {}
   /*! Get Fixed-Orientation Angle-Offset. */
   virtual float getFixedAngleOffset() {}
   /*! Get Emitter Type. */
   virtual string getEmitterType() {}
   /*! Get ImageMap Name and Frame. */
   virtual string getImageMapNameFrame() {}
   /*! Get Animation Name. */
   virtual string getAnimationName() {}
   /*! Get Pivot-Point. */
   virtual string getPivotPoint() {}
   /*! Get Use-Effect-Emission Flag. */
   virtual bool getUseEffectEmission() {}
   /*! Get Link-Emission-Rotation Flag. */
   virtual bool getLinkEmissionRotation() {}
   /*! Get Intense-Particles Flag. */
   virtual bool getIntenseParticles() {}
   /*! Get Single-Particle Flag. */
   virtual bool getSingleParticle() {}
   /*! Get Attach-Position-To-Emitter Flag. */
   virtual bool getAttachPositionToEmitter() {}
   /*! Get Attach-Rotation-To-Emitter Flag. */
   virtual bool getAttachRotationToEmitter() {}
   /*! Get First-In-Front-Order Flag. */
   virtual bool getFirstInFrontOrder() {}
   /*! Get Using Animation Flag. */
   virtual bool getUsingAnimation() {}
   /*!  - Loads a Particle Emitter. */
   virtual bool loadEmitter(emitterFile$) {}
   /*!  - Save a Particle Emitter. */
   virtual bool saveEmitter(emitterFile$) {}
   /*! Set the emitter collision status. */
   virtual void setEmitterCollisionStatus() {}
   /*! Get the emitter collision status. */
   virtual bool getEffectCollisionStatus() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  t2dPath : public t2dSceneObject {
  public:
   /*! Sets the interpolation type for the path. */
   virtual void setPathType() {}
   /*! Gets the interpolation type. */
   virtual string getPathType() {}
   virtual void attachObject(%obj, %speed, %dir, %start, %end, %pathMode, %loops, %sendToStart) {}
   virtual void detachObject(%object) {}
   virtual int addNode(%position, %location, %rotation, %weight) {}
   virtual int removeNode(%index) {}
   virtual void clear() {}
   virtual void setStartNode(object, node) {}
   virtual void setEndNode(object, node) {}
   virtual void setSpeed(object, speed) {}
   virtual void setMoveForward(object, forward) {}
   virtual void setOrient(object, orient) {}
   virtual void setLoops(object, loops) {}
   virtual void setFollowMode(object, pathMode) {}
   virtual int getStartNode(object) {}
   virtual int getEndNode(object) {}
   virtual float getSpeed(object) {}
   virtual bool getMoveForward(object) {}
   virtual bool getOrient(object) {}
   virtual int getLoops(object) {}
   virtual string getFollowMode(object) {}
   virtual int getNodeCount() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Path
   @{ */
   /*!
    */
   enumval pathType;
   /*!
    */
   enumval pathMode;
   /*!
    */
   int nodeCount;
   /*!
    */
   int objectCount;
   /// @}

};

class  t2dScroller : public t2dSceneObject {
  public:
   /*!  - Sets the imageMap Name. */
   virtual void setImageMap(imageMapName$) {}
   /*!  - Returns the image map. */
   virtual string getImageMap() {}
   virtual void setRepeatX(repeatX) {}
   virtual void setRepeatY(repeatY) {}
   /*! Returns repeat X */
   virtual float getRepeatX() {}
   /*! Returns repeat Y */
   virtual float getRepeatY() {}
   virtual void setScrollX(ScrollX) {}
   virtual void setScrollY(ScrollY) {}
   /*! Returns Scroll X */
   virtual float getScrollX() {}
   /*! Returns Scroll Y */
   virtual float getScrollY() {}
   virtual void setScrollPositionX(ScrollPositionX) {}
   virtual void setScrollPositionY(ScrollPositionY) {}
   /*! Returns ScrollPosition X */
   virtual float getScrollPositionX() {}
   /*! Returns ScrollPosition Y */
   virtual float getScrollPositionY() {}
   /*!  - Sets the Repeat X/Y repetition. */
   virtual void setRepeat(repeatX / repeatY) {}
   /*!  - Sets the Scroll speed. */
   virtual void setScroll(offsetX / offsetY) {}
   /*!  - Sets Auto-Pan Polarwise. */
   virtual void setScrollPolar(angle, scrollSpeed) {}
   /*!  - Sets the Scroll position X/Y. */
   virtual void setScrollPosition(positionX / positionY) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Scroller
   @{ */
   /*!
    */
   string imageMap;
   /*!
    */
   float repeatX;
   /*!
    */
   float repeatY;
   /*!
    */
   float scrollX;
   /*!
    */
   float scrollY;
   /*!
    */
   float panPositionX;
   /*!
    */
   float panPositionY;
   /// @}

   /*!
    */
   t2dBaseDatablock Config;
};

class  t2dShape3D : public t2dSceneObject {
  public:
   virtual Script getShapeScaleZ() {}
   virtual Script getShapeScaleY() {}
   virtual Script getShapeScaleX() {}
   virtual Script setShapeScaleZ() {}
   virtual Script setShapeScaleY() {}
   virtual Script setShapeScaleX() {}
   virtual Script getShapeOffsetZ() {}
   virtual Script getShapeOffsetY() {}
   virtual Script getShapeOffsetX() {}
   virtual Script setShapeOffsetZ() {}
   virtual Script setShapeOffsetY() {}
   virtual Script setShapeOffsetX() {}
   virtual Script getShapeRotationZ() {}
   virtual Script getShapeRotationY() {}
   virtual Script getShapeRotationX() {}
   virtual Script setShapeRotationZ() {}
   virtual Script setShapeRotationY() {}
   virtual Script setShapeRotationX() {}
   virtual Script getShapeAngularVelocityZ() {}
   virtual Script getShapeAngularVelocityY() {}
   virtual Script getShapeAngularVelocityX() {}
   virtual Script setShapeAngularVelocityZ() {}
   virtual Script setShapeAngularVelocityY() {}
   virtual Script setShapeAngularVelocityX() {}
   /*!  - Loads a shape into the object. */
   virtual bool setShape( shapeFile$ ) {}
   /*!  - Changes the skin to the specified texture */
   virtual bool setSkin( skinSet$, skinName$ ) {}
   /*!  - Plays an Animation by Sequence Name. */
   virtual bool playAnimation( animationName, [startTime], [transitionTime] ) {}
   /*!  - Plays an Animation by Sequence Index. */
   virtual bool playAnimationSequence( sequence, [startTime], [transitionTime]  ) {}
   /*!  - Set the animation time-scale. */
   virtual bool setTimeScale( timeScale ) {}
   /*!  - Sets Shape Rotation */
   virtual bool setShapeRotation(x / y / z) {}
   /*!  - Sets Shape Angular Velocity. */
   virtual bool setShapeAngularVelocity(x / y / z) {}
   /*!  - Sets Shape Offset. */
   virtual bool setShapeOffset(x / y / z) {}
   /*!  - Sets Shape Offset. */
   virtual bool setShapeScale(x [/ y / z]) {}
   /*!  - Sets Trigger Status. */
   virtual bool setTriggerActive(status) {}
   /*!  - Sets Current Detail Level. */
   virtual bool setDetailLevel(detailLevel, [intraDetail] ) {}
   /*! Get Detail Level Count. */
   virtual int getDetailLevelCount() {}
   /*! Get Detail Level. */
   virtual int getCurrentDetailLevel() {}
   /*! Get Intra-Detail-Level. */
   virtual float getCurrentIntraDetailLevel() {}
   virtual string getShapeAngularVelocity() {}
   virtual string getShapeRotation() {}
   virtual string getShapeOffset() {}
   virtual string getShapeScale() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Shape 3D
   @{ */
   /*!
    */
   string shapeFile;
   /*!
    */
   Point3F shapeAngularVelocity;
   /*!
    */
   Point3F shapeRotation;
   /*!
    */
   Point3F shapeOffset;
   /*!
    */
   Point3F shapeScale;
   /// @}

};

class  t2dShapeVector : public t2dSceneObject {
  public:
   /*!  - Sets the polygon scale. */
   virtual void setPolyScale(widthScale / [heightScale]) {}
   /*!  - Sets a regular polygon primitive. */
   virtual void setPolyPrimitive(vertexCount) {}
   /*!  - Sets Custom Polygon. */
   virtual void setPolyCustom(poly-count, poly-Definition$) {}
   /*!  - Sets the Rendering Line Colour. */
   virtual void setLineColour(R / G / B / [A]) {}
   /*!  - Sets the Rendering Line Color. */
   virtual void setLineColor(R / G / B / [A]) {}
   /*!  - Sets the Rendering Line Alpha (transparency). */
   virtual void setLineAlpha(alpha) {}
   /*!  - Sets the Rendering Fill Colour. */
   virtual void setFillColour(R / G / B / [A]) {}
   /*!  - Sets the Rendering Fill Color. */
   virtual void setFillColor(R / G / B / [A]) {}
   /*!  - Sets the Rendering Fill Alpha (transparency). */
   virtual void setFillAlpha(alpha) {}
   /*!  - Sets the Rendering Fill Mode. */
   virtual void setFillMode(fillMode?) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Shape Vector
   @{ */
   /*!
    */
   ColorF lineColor;
   /*!
    */
   ColorF fillColor;
   /*!
    */
   bool fillMode;
   /*!
    */
   point2FList vertexList;
   /// @}

};

class  t2dTileMap : public t2dSceneObject {
  public:
   /*!  - Creates a Tile Layer. */
   virtual int createTileLayer(tileCountX / tileCountY / tileSizeX / tileSizeY) {}
   /*! Deletes all Tile Layer(s). */
   virtual void deleteAllLayers() {}
   /*!  - Deletes a Tile Layer. */
   virtual void deleteTileLayer(layerIndex) {}
   /*!  - Deletes a Tile Layer (by Id). */
   virtual void deleteTileLayerId(tileLayerID) {}
   /*! Returns Tile Layer Count. */
   virtual int getTileLayerCount() {}
   /*!  - Returns Tile Layer by Index. */
   virtual int getTileLayer(layerIndex) {}
   /*! Synchronizes all tile-layers to parents position/size/rotation. */
   virtual void setAllLayersToParent() {}
   /*!  - Loads a Tilemap from a Datablock. */
   virtual bool loadTileMapDataBlock(tileMapDatablock$) {}
   /*!  - Loads a Tilemap File. */
   virtual bool loadTileMap(tileMapFile$) {}
   /*!  - Saves a Tilemap File. */
   virtual bool saveTileMap(tileMapFile$) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Tilemap
   @{ */
   /*!
    */
   filename tilemapFile;
   /// @}

};

class  t2dTileLayer : public t2dSceneObject {
  public:
   /*!  - Deletes All Layer Tiles. */
   virtual void clearLayer() {}
   /*!  - Resize Tile Layer. */
   virtual void resizeLayer( newTileCountX / newTileCountY ) {}
   /*!  - Clears a Tile. */
   virtual void clearTile( tileX / tileY ) {}
   /*!  - Sets a Static Tile. */
   virtual bool setStaticTile( tileX / tileY, imageMapName, [frame] ) {}
   /*!  - Sets an Animated Tile. */
   virtual bool setAnimatedTile( tileX / tileY, animationName, [forceUnique]) {}
   /*!  - Sets an Active Tile. */
   virtual int setActiveTile(tileX / tileY, activeTileClass, [activeTileDatablockName]) {}
   /*!  - Sets a Script on a Tile. */
   virtual bool setTileScript(tileX / tileY, script) {}
   /*!  - Sets custom data on a Tile. */
   virtual bool setTileCustomData(tileX / tileY, data) {}
   /*!  - Sets Tile Receive Collisions. */
   virtual bool setTileCollisionActive(tileX / tileY, receiveCollision) {}
   /*!  - Sets Tile Primitive Collision Polygon. */
   virtual bool setTileCollisionPolyPrimitive(tileX / tileY, poly-count) {}
   /*!  - Sets Tile Custom Collision Polygon. */
   virtual bool setTileCollisionPolyCustom(tileX / tileY, poly-count, poly-Definition$) {}
   /*!  - Sets Tile collision scale. */
   virtual bool setTileCollisionScale(tileX / tileY, widthScale / [heightScale]) {}
   /*!  - Sets Tile Flipping. */
   virtual bool setTileFlip(tileX / tileY, flipHorz, flipVert) {}
   /*!  - Sets Wrap Options. */
   virtual void setWrap(wrapX, wrapY) {}
   /*!  - Sets Pan Position. */
   virtual void setPanPosition(panX / panY) {}
   /*!  - Sets Auto-Pan. */
   virtual void setAutoPan(autoPanX / autoPanY) {}
   /*!  - Sets Auto-Pan Polarwise. */
   virtual void setAutoPanPolar(angle, panSpeed) {}
   /*!  - Sets Tile Size. */
   virtual void setTileSize(tileSizeX / [tileSizeY]) {}
   /*! Gets Tile Size. */
   virtual string getTileSize() {}
   /*! Gets Tile Count. */
   virtual string getTileCount() {}
   /*!  - Gets a tile type. */
   virtual string getTileType( x / y ) {}
   /*!  - Gets a tile flip options. */
   virtual string getTileFlip( x / y ) {}
   /*!  - Gets a tile script. */
   virtual string getTileScript( x / y ) {}
   /*!  - Gets a tile script actioned-flag. */
   virtual bool getTileScriptActioned( x / y ) {}
   /*!  - Gets a tile custom-data. */
   virtual string getTileCustomData( x / y ) {}
   /*!  - Gets a tile collision options. */
   virtual string getTileCollision( x / y ) {}
   /*!  - Picks Tile from world position. */
   virtual string pickTile( x / y ) {}
   /*!  - Set grid-lines status. */
   virtual void setGridActive(status) {}
   /*!  - Set custom-data-icon status. */
   virtual void setCustomIconActive(status) {}
   /*!  - Set script-icon status. */
   virtual void setScriptIconActive(status) {}
   /*!  - Set cursor-icon status. */
   virtual void setCursorIconActive(status, blinkTime) {}
   /*!  - Set cursor positiom. */
   virtual void setCursorPosition(x / y) {}
   /*!  - Set tile-icons imagemap. */
   virtual void setTileIcons(tileIconImageMap) {}
   /*! Resets dynamic properties of the Tile-Layer. */
   virtual void resetLayer() {}
   /*!  - Loads a Tile-Layer File. */
   virtual bool loadTileLayer(tileLayerFile$) {}
   /*!  - Saves a Tile-Layer File. */
   virtual bool saveTileLayer(tileLayerFile$) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Tile Layer
   @{ */
   /*!
    */
   bool wrapX;
   /*!
    */
   bool wrapY;
   /*!
    */
   float panPositionX;
   /*!
    */
   float panPositionY;
   /*!
    */
   float autoPanX;
   /*!
    */
   float autoPanY;
   /// @}

};

class  t2dTrigger : public t2dSceneObject {
  public:
   virtual void setEnterCallback(true) {}
   virtual void setStayCallback(true) {}
   virtual void setLeaveCallback(true) {}
   virtual bool getEnterCallback() {}
   virtual bool getStayCallback() {}
   virtual bool getLeaveCallback() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Namespace
   @{ */
   /*!
    */
   string class;
   /*!
    */
   string superclass;
   /// @}


   /*! @name Config
   @{ */
   /*!
    */
   t2dBaseDatablock Config;
   /*!
    */
   SimObjectPtr scenegraph;
   /*!
    */
   bool enabled;
   /*!
    */
   bool Visible;
   /*!
    */
   bool paused;
   /*!
    */
   float lifetime;
   /// @}


   /*! @name Spatial
   @{ */
   /*!
    */
   Point2F position;
   /*!
    */
   Point2F size;
   /*!
    */
   float rotation;
   /*!
    */
   float autoRotation;
   /*!
    */
   bool flipX;
   /*!
    */
   bool flipY;
   /*!
    */
   int layer;
   /*!
    */
   int group;
   /// @}


   /*! @name World Limits
   @{ */
   /*!
    */
   enumval worldLimitMode;
   /*!
    */
   Point2F worldLimitMin;
   /*!
    */
   Point2F worldLimitMax;
   /*!
    */
   bool worldLimitCallback;
   /// @}


   /*! @name Collision
   @{ */
   /*!
    */
   enumval collisionDetectionMode;
   /*!
    */
   enumval collisionResponseMode;
   /*!
    */
   bool collisionActiveSend;
   /*!
    */
   bool collisionActiveReceive;
   /*!
    */
   bool collisionPhysicsSend;
   /*!
    */
   bool collisionPhysicsReceive;
   /*!
    */
   intList collisionLayers;
   /*!
    */
   intList collisionGroups;
   /*!
    */
   bool collisionCallback;
   /*!
    */
   point2FList collisionPolyList;
   /*!
    */
   float collisionCircleScale;
   /*!
    */
   Point2F collisionPolyScale;
   /*!
    */
   bool collisionCircleSuperscribed;
   /// @}


   /*! @name Physics
   @{ */
   /*!
    */
   Point2F linearVelocity;
   /*!
    */
   float minlinearVelocity;
   /*!
    */
   float maxLinearVelocity;
   /*!
    */
   float angularVelocity;
   /*!
    */
   float minAngularVelocity;
   /*!
    */
   float maxAngularVelocity;
   /*!
    */
   bool immovable;
   /*!
    */
   Point2F constantForce;
   /*!
    */
   bool graviticConstantForce;
   /*!
    */
   bool forwardOnly;
   /*!
    */
   float forceScale;
   /*!
    */
   float density;
   /*!
    */
   bool autoMassInertia;
   /*!
    */
   float mass;
   /*!
    */
   float inertialMoment;
   /*!
    */
   float damping;
   /*!
    */
   float friction;
   /*!
    */
   float restitution;
   /// @}


   /*! @name Blending
   @{ */
   /*!
    */
   bool blendingOn;
   /*!
    */
   enumval srcBlendFactor;
   /*!
    */
   enumval dstBlendFactor;
   /*!
    */
   ColorF blendColor;
   /// @}


   /*! @name Mounting
   @{ */
   /*!
    */
   point2FList linkPoints;
   /*!
    */
   intList linkPointIDs;
   /*!
    */
   float mountRotation;
   /*!
    */
   float autoMountRotation;
   /*!
    */
   int mountID;
   /*!
    */
   int mountToID;
   /*!
    */
   int mountToNode;
   /*!
    */
   Point2F mountOffset;
   /*!
    */
   float mountForce;
   /*!
    */
   bool trackRotation;
   /*!
    */
   bool ownedByMount;
   /*!
    */
   bool inheritAttributes;
   /// @}


   /*! @name Trigger
   @{ */
   /*!
    */
   bool enterCallback;
   /*!
    */
   bool stayCallback;
   /*!
    */
   bool leaveCallback;
   /// @}

};

class  T2DDatablockDropDownCtrl : public GuiPopUpMenuCtrlEx {
  public:
   /*!  - no parameters for all t2d datablocks */
   virtual void setFilter(datablock classname) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   caseString text;
   /*!
    */
   string textID;
   /*!
    */
   int maxLength;
   /*!
    */
   int maxPopupHeight;
   /*!
    */
   bool sbUsesNAColor;
   /*!
    */
   bool reverseTextList;
   /*!
    */
   filename bitmap;
   /*!
    */
   Point2I bitmapBounds;
   /*!
    */
   string DatablockFilter;
};

class  GuiParticleGraphCtrl : public GuiControl {
  public:
   /*! Add a data point to the given plot. */
   virtual void setSelectedPlot(int plotID) {}
   /*! Clear the graph of the given plot. */
   virtual void clearGraph(int plotID) {}
   /*! Clear all of the graphs. */
   virtual void clearAllGraphs() {}
   /*! Add a data point to the given plot. */
   virtual void addPlotPoint(int plotID, float x, float y, bool setAdded = true;) {}
   /*! Change a data point to the given plot and plot position. */
   virtual void insertPlotPoint(int plotID, int i, float x, float y) {}
   /*! Change a data point to the given plot and plot position. */
   virtual string changePlotPoint(int plotID, int i, float x, float y) {}
   /*! Get a data point from the plot specified, samples from the start of the graph. */
   virtual string getPlotPoint(int plotID, int samples) {}
   /*! Get the color of the graph passed. */
   virtual string getGraphColor(int plotID) {}
   /*! Get the color of the graph passed. */
   virtual string getGraphMin(int plotID) {}
   /*! Get the color of the graph passed. */
   virtual string getGraphMax(int plotID) {}
   /*! Get the name of the graph passed. */
   virtual string getGraphName(int plotID) {}
   /*! Set the min values of the graph of plotID. */
   virtual void setGraphMin(int plotID, float minX, float minY) {}
   /*! Set the min X value of the graph of plotID. */
   virtual void setGraphMinX(int plotID, float minX) {}
   /*! Set the min Y value of the graph of plotID. */
   virtual void setGraphMinY(int plotID, float minY) {}
   /*! Set the max values of the graph of plotID. */
   virtual void setGraphMax(int plotID, float maxX, float maxY) {}
   /*! Set the max X value of the graph of plotID. */
   virtual void setGraphMaxX(int plotID, float maxX) {}
   /*! Set the max Y value of the graph of plotID. */
   virtual void setGraphMaxY(int plotID, float maxY) {}
   /*! Set whether the graph number passed is hidden or not. */
   virtual void setGraphHidden(int plotID, bool isHidden) {}
   /*! Set whether the max will automatically be set when adding points. */
   virtual void setAutoGraphMax(bool autoMax) {}
   /*! Set whether or not a point should be deleted when you drag another one over it. */
   virtual void setAutoRemove(bool autoRemove) {}
   /*! Set whether or not a position should be rendered on every point or just the last selected. */
   virtual void setRenderAll(bool renderAll) {}
   /*! Set whether the x position of the selected graph point should be clamped */
   virtual void setPointXMovementClamped(bool clamped) {}
   /*! Set whether or not to render the graph tooltip. */
   virtual void setRenderGraphTooltip(bool renderGraphTooltip) {}
   /*! set the graph's name of plot plotID. */
   virtual void setGraphName(int plotID, string graphName) {}
   /*! This will reset the selected point to nothing. */
   virtual void resetSelectedPoint() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

};

class  LevelBuilderSceneEdit : public SimObject {
  public:
   virtual Script breakApart() {}
   virtual Script groupObjects() {}
   virtual Script onToolDeactivate() {}
   virtual Script onToolActivate() {}
   virtual Script onQuickHelp() {}
   virtual Script editAnimation() {}
   virtual Script editImageMap() {}
   virtual Script editPath() {}
   virtual Script editTileLayer() {}
   virtual Script editWorldLimit() {}
   virtual Script dismountObject() {}
   virtual Script mountObject() {}
   virtual Script editLinkPoints() {}
   virtual Script editCollisionPoly() {}
   virtual Script onObjectDeleted() {}
   virtual Script onRelinquishObject() {}
   virtual Script onObjectSpatialChanged() {}
   virtual Script onObjectChanged() {}
   virtual Script onQuickEdit() {}
   virtual Script onAcquireObjectSet() {}
   virtual Script onAcquireObject() {}
   virtual Script setHistoryUndoManager() {}
   /*! Acquires an object. */
   virtual void acquireObject() {}
   /*! Relinquishes acquisition of an object. */
   virtual void clearAcquisition() {}
   /*! Deletes all acquired objects. */
   virtual void deleteAcquiredObjects() {}
   /*! Move an object from the recycle bin back to the scene. */
   virtual void moveFromRecycleBin() {}
   /*! Move an object from scene to the recycle bin. */
   virtual void moveToRecycleBin() {}
   /*! Undoes the last action */
   virtual void undo() {}
   /*! Redoes the last action */
   virtual void redo() {}
   /*! Returns the acquired object set. */
   virtual int getAcquiredObjects() {}
   /*! Returns the acquired object count. */
   virtual int getAcquiredObjectCount() {}
   /*! Returns the acquired object group. */
   virtual int getAcquiredGroup() {}
   /*! Returns whether or not an object is acquired. */
   virtual bool isAcquired() {}
   /*! Puts all acquired objects in a t2dSceneObjectGroup. */
   virtual void groupAcquiredObjects() {}
   /*! Removes all acquired objects from there group. */
   virtual void breakApartAcquiredObjects() {}
   /*! Updates the t2dSceneObjectSet of acquired objects. */
   virtual void updateAcquiredObjectSet() {}
   /*! Returns the active tool. */
   virtual int getActiveTool() {}
   /*! Sets the active tool. */
   virtual bool setActiveTool() {}
   virtual bool addTool(ToolObject) {}
   virtual bool removeTool(ToolObject) {}
   /*! Set the design resolution. */
   virtual void setDesignResolution() {}
   /*! Returns the design resolution. */
   virtual string getDesignResolution() {}
   /*!  sets the X snap unit for our tool, in world units, set to 0 to turn of snapping */
   virtual void setGridSizeX() {}
   /*!  sets the Y snap unit for our tool, in world units, set to 0 to turn of snapping */
   virtual void setGridSizeY() {}
   /*!  returns current X snap  grid. 0 = off */
   virtual float getGridSnapX() {}
   /*!  returns current Y snap  grid. 0 = off */
   virtual float getGridSnapY() {}
   /*! Toggles Snapping. */
   virtual void setSnapToGrid() {}
   /*! Gets the snap status. */
   virtual bool getSnapToGrid() {}
   /*!  sets whether we'll snap to X axis */
   virtual void setSnapToGridX() {}
   /*!  sets whether we'll snap to Y axis */
   virtual void setSnapToGridY() {}
   /*!  returns current X snap */
   virtual bool getSnapToGridX() {}
   /*!  returns current Y snap */
   virtual bool getSnapToGridY() {}
   /*!  turns grid drawing on/off */
   virtual void setGridVisibility() {}
   /*!  turns camera drawing on/off */
   virtual void setCameraVisibility() {}
   /*!  turns guides drawing on/off */
   virtual void setGuidesVisibility() {}
   /*!  turns grid drawing on/off */
   virtual bool getGridVisibility() {}
   /*!  turns grid drawing on/off */
   virtual bool getCameraVisibility() {}
   /*!  turns grid drawing on/off */
   virtual bool getGuidesVisibility() {}
   /*! sets the grid color for the control */
   virtual void setGridColor() {}
   /*!  returns current grid color */
   virtual string getGridColor() {}
   /*! sets the fill color for the control */
   virtual void setFillColor() {}
   /*!  returns current fill color */
   virtual string getFillColor() {}
   /*! Sets the snap threshold for snap to grid. */
   virtual void setSnapThreshold() {}
   /*! Gets the snap threshold for snap to grid. */
   virtual float getSnapThreshold() {}
   /*! Sets the snap rotation flag. */
   virtual void setRotationSnap() {}
   /*! Gets the snap rotation flag. */
   virtual bool getRotationSnap() {}
   /*! Sets the rotation snap angle. */
   virtual void setRotationSnapAngle() {}
   /*! Gets the rotation snap angle. */
   virtual float getRotationSnapAngle() {}
   /*! Sets the rotation snap threshold for snap to grid. */
   virtual void setRotationSnapThreshold() {}
   /*! Gets the rotation snap threshold for snap to grid. */
   virtual float getRotationSnapThreshold() {}
   virtual string getMousePosition() {}
   virtual string getCameraPosition() {}
   virtual float getCameraZoom() {}
   virtual void setLastWindow() {}
   virtual int getLastWindow() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  LevelBuilderSceneWindow : public t2dSceneWindow {
  public:
   /*!  - Sets the tool manager for this edit window) */
   virtual void setSceneEdit(toolManager) {}
   /*!  - Gets the tool manager for this edit window) */
   virtual int getSceneEdit() {}
   /*!  - Sets a tool override for this edit window) */
   virtual bool setToolOverride() {}
   /*!  - Clears the tool override on this window */
   virtual void clearToolOverride() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}


   /*! @name Parent
   @{ */
   /*!
   Script Class of object.
   
    */
   string class;
   /*!
   Script SuperClass of object.
   
    */
   string superclass;
   /*!
    */
   GuiProfile Profile;
   /*!
    */
   enumval HorizSizing;
   /*!
    */
   enumval VertSizing;
   /*!
    */
   Point2I position;
   /*!
    */
   Point2I Extent;
   /*!
    */
   Point2I MinExtent;
   /*!
    */
   bool canSave;
   /*!
    */
   bool Visible;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated Modal;
   /*!
   @deprecated This member is deprecated, which means that its value is always undefined.
    */
   deprecated setFirstResponder;
   /*!
    */
   string Variable;
   /*!
    */
   string Command;
   /*!
    */
   string AltCommand;
   /*!
    */
   string Accelerator;
   /// @}


   /*! @name tooltip
   @{ */
   /*!
    */
   GuiProfile tooltipprofile;
   /*!
    */
   string tooltip;
   /*!
    */
   int hovertime;
   /// @}


   /*! @name I18N
   @{ */
   /*!
    */
   string langTableMod;
   /// @}

   /*!
    */
   bool lockMouse;
   /*!
    */
   bool useWindowMouseEvents;
   /*!
    */
   bool useObjectMouseEvents;
};

class  SelectionToolWidget : public SimObject {
  public:
   virtual void addClass(className) {}
   virtual void setTexture(textureName) {}
   virtual void setDisplayRule("Rule") {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

   /*!
    */
   int priority;
   /*!
    */
   int position;
   /*!
    */
   bool showClasses;
   /*!
    */
   string callback;
   /*!
    */
   caseString tooltip;
};

class  t2dGunTurret : public t2dActiveTile {
  public:
   /*!  - Sets imageMap/Frame. */
   virtual bool setImageMap(imageMapName$, [int frame]) {}
   /*!  - Sets imageMap frame. */
   virtual bool setFrame(frame) {}
   /*!  - Sets Object to Track. */
   virtual bool setTrackObject(t2dSceneObject) {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};

class  UndoManager : public SimObject {
  public:
   virtual Script onRemoveUndo() {}
   virtual Script onClear() {}
   virtual Script onRedo() {}
   virtual Script onUndo() {}
   virtual Script onAddUndo() {}
   /*! Clears the undo manager. */
   virtual void clearAll() {}
   virtual int getUndoCount() {}
   virtual string getUndoName(index) {}
   virtual int getRedoCount() {}
   virtual string getRedoName(index) {}
   virtual void undo() {}
   virtual void redo() {}
   virtual string getNextUndoName() {}
   virtual string getNextRedoName() {}
   /*!
   Number of undo & redo levels.
   
    */
   int numLevels;
};

class  LangTable : public SimObject {
  public:
   virtual int addLanguage(string filename, [string languageName]) {}
   virtual string getString(string filename) {}
   virtual void setDefaultLanguage(int language) {}
   virtual void setCurrentLanguage(int language) {}
   virtual int getCurrentLanguage() {}
   virtual string getLangName(int language) {}
   virtual int getNumLang() {}

   /*! @name SimBase
   @{ */
   /*!
    */
   bool canSaveDynamicFields;
   /*!
    */
   string internalName;
   /// @}

};